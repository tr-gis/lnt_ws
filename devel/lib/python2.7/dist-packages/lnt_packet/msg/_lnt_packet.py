# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lnt_packet/lnt_packet.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class lnt_packet(genpy.Message):
  _md5sum = "f9c87db58664bf6126cb6c2b6c55b3f5"
  _type = "lnt_packet/lnt_packet"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 packet_code
float32[6] values
int8 eff_mode
"""
  __slots__ = ['packet_code','values','eff_mode']
  _slot_types = ['int8','float32[6]','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       packet_code,values,eff_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lnt_packet, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.packet_code is None:
        self.packet_code = 0
      if self.values is None:
        self.values = [0.,0.,0.,0.,0.,0.]
      if self.eff_mode is None:
        self.eff_mode = 0
    else:
      self.packet_code = 0
      self.values = [0.,0.,0.,0.,0.,0.]
      self.eff_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.packet_code))
      buff.write(_struct_6f.pack(*self.values))
      buff.write(_struct_b.pack(self.eff_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.packet_code,) = _struct_b.unpack(str[start:end])
      start = end
      end += 24
      self.values = _struct_6f.unpack(str[start:end])
      start = end
      end += 1
      (self.eff_mode,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.packet_code))
      buff.write(self.values.tostring())
      buff.write(_struct_b.pack(self.eff_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.packet_code,) = _struct_b.unpack(str[start:end])
      start = end
      end += 24
      self.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 1
      (self.eff_mode,) = _struct_b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
_struct_6f = struct.Struct("<6f")
