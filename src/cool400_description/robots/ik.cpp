/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-04-26 17:53:24.761565
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57;
x0=IKcos(j[5]);
x1=IKsin(j[0]);
x2=IKsin(j[1]);
x3=IKsin(j[3]);
x4=(x2*x3);
x5=(x1*x4);
x6=IKcos(j[3]);
x7=IKsin(j[2]);
x8=IKcos(j[0]);
x9=(x7*x8);
x10=((1.0)*x9);
x11=IKcos(j[1]);
x12=IKcos(j[2]);
x13=(x1*x12);
x14=((1.0)*x13);
x15=(x10+((x11*x14)));
x16=(x15*x6);
x17=IKsin(j[5]);
x18=IKcos(j[4]);
x19=((1.0)*x18);
x20=(x12*x8);
x21=(x1*x7);
x22=((1.0)*x21);
x23=(x11*x22);
x24=IKsin(j[4]);
x25=((1.0)*x24);
x26=(x1*x2*x6);
x27=(x15*x3);
x28=((((-1.0)*(1.0)*x26))+x27);
x29=((((-1.0)*(1.0)*x25*x28))+((x19*(((((-1.0)*(1.0)*x20))+x23)))));
x30=((1.0)*x20);
x31=((0.1515)*x2);
x32=((0.00025)*x20);
x33=((0.00025)*x21);
x34=(x1*x11*x7);
x35=((0.00025)*x7);
x36=(x35*x8);
x37=((0.00025)*x13);
x38=((0.078)*x11);
x39=(x2*x3*x8);
x40=((1.0)*x39);
x41=((((-1.0)*(1.0)*x11*x30))+x22);
x42=(x41*x6);
x43=(x11*x9);
x44=(x2*x6);
x45=(x44*x8);
x46=(x3*x41);
x47=(x45+x46);
x48=((((-1.0)*(1.0)*x25*x47))+((x19*(((((-1.0)*(1.0)*x13))+(((-1.0)*(1.0)*x43)))))));
x49=(x11*x3);
x50=((1.0)*x49);
x51=(x12*x44);
x52=(x18*x2*x7);
x53=(x11*x6);
x54=(x12*x4);
x55=(x54+x53);
x56=((((-1.0)*(1.0)*x25*x55))+(((1.0)*x52)));
x57=(x2*x24*x7);
eerot[0]=(((x17*x29))+((x0*(((((-1.0)*(1.0)*x16))+(((-1.0)*(1.0)*x5)))))));
eerot[1]=(((x17*((x5+x16))))+((x0*x29)));
eerot[2]=(((x24*(((((-1.0)*(1.0)*x30))+x23))))+((x18*x28)));
eetrans[0]=((((0.00025)*x5))+(((-1.0)*(0.078)*x26))+((x3*(((((0.078)*x9))+((x13*x38))))))+((x6*((((x11*x37))+x36))))+(((-1.0)*(1.0)*x1*x31))+(((-1.0)*(0.00945)*x8))+(((-1.0)*(1.0)*x11*x33))+((x18*(((((-1.0)*(1.1e-7)*x34))+(((1.1e-7)*x20))))))+((x24*(((((-1.0)*(1.1e-7)*x26))+(((1.1e-7)*x27))))))+((x24*(((((-1.0)*(0.031)*x20))+(((0.031)*x34))))))+x32+((x18*(((((-1.0)*(0.031)*x26))+(((0.031)*x27)))))));
eerot[3]=(((x17*x48))+((x0*((x40+(((-1.0)*(1.0)*x42)))))));
eerot[4]=(((x17*(((((-1.0)*(1.0)*x40))+x42))))+((x0*x48)));
eerot[5]=(((x24*(((((-1.0)*(1.0)*x14))+(((-1.0)*(1.0)*x10*x11))))))+((x18*x47)));
eetrans[1]=(((x24*(((((-1.0)*(0.031)*x43))+(((-1.0)*(0.031)*x13))))))+(((-1.0)*(0.00025)*x39))+((x6*(((((-1.0)*(1.0)*x11*x32))+x33))))+((x18*(((((0.031)*x46))+(((0.031)*x45))))))+((x11*x36))+(((0.078)*x45))+((x18*(((((1.1e-7)*x13))+(((1.1e-7)*x43))))))+((x3*(((((0.078)*x21))+(((-1.0)*(1.0)*x20*x38))))))+x37+((x24*(((((1.1e-7)*x45))+(((1.1e-7)*x46))))))+((x31*x8))+(((-1.0)*(0.00945)*x1)));
eerot[6]=(((x17*x56))+((x0*((x50+(((-1.0)*(1.0)*x51)))))));
eerot[7]=(((x17*((x51+(((-1.0)*(1.0)*x50))))))+((x0*x56)));
eerot[8]=(((x18*x55))+x57);
eetrans[2]=((0.131101)+((x18*(((((0.031)*x53))+(((0.031)*x54))))))+(((-1.0)*(1.1e-7)*x52))+(((0.1515)*x11))+(((-1.0)*(0.00025)*x49))+(((0.078)*x54))+(((0.00025)*x51))+(((0.031)*x57))+(((0.078)*x53))+(((-1.0)*(1.0)*x2*x35))+((x24*(((((1.1e-7)*x53))+(((1.1e-7)*x54)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*(((1.0)*r00)));
new_r01=((-1.0)*(((1.0)*r01)));
new_r02=r02;
new_px=((((-1.0)*(0.031)*r02))+px);
new_r10=((-1.0)*(((1.0)*r10)));
new_r11=((-1.0)*(((1.0)*r11)));
new_r12=r12;
new_py=(py+(((-1.0)*(0.031)*r12)));
new_r20=((-1.0)*(((1.0)*r20)));
new_r21=((-1.0)*(((1.0)*r21)));
new_r22=r22;
new_pz=((-0.131101)+pz+(((-1.0)*(0.031)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x58=((1.0)*py);
IkReal x59=((1.0)*pz);
IkReal x60=((1.0)*px);
pp=((py*py)+(px*px)+(pz*pz));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((pz*r22))+((py*r12))+((px*r02)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x58)));
rxp0_1=((((-1.0)*r00*x59))+((px*r20)));
rxp0_2=((((-1.0)*r10*x60))+((py*r00)));
rxp1_0=((((-1.0)*r21*x58))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x59)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x60)));
rxp2_0=((((-1.0)*r22*x58))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x59))+((px*r22)));
rxp2_2=((((-1.0)*r12*x60))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x61=((1.14717548076923e-9)*r00);
IkReal x62=((-1.0)*x61);
IkReal x63=((5.04757211538462e-13)*r01);
IkReal x64=((-1.0)*x63);
IkReal x65=((0.0002168987625)*r10);
IkReal x66=((1.21394230769231e-7)*npx);
IkReal x67=((-1.0)*x66);
IkReal x68=((5.34134615384615e-11)*npy);
IkReal x69=((-1.0)*x68);
IkReal x70=((0.000242788461538462)*pp);
IkReal x71=((4.58870192307692e-6)*px);
IkReal x72=((2.5247475e-9)*r22);
IkReal x73=((0.02295225)*rxp0_2);
IkReal x74=((-1.0)*x73);
IkReal x75=((3.7875e-5)*px);
IkReal x76=((2.5247475e-9)*r12);
IkReal x77=((1.6665e-8)*rxp2_0);
IkReal x78=((0.001431675)*npx);
IkReal x79=((-1.0)*x78);
IkReal x80=((0.00127099580437592)*r00);
IkReal x81=((4.16625e-12)*r01);
IkReal x82=((-1.0)*x81);
IkReal x83=((0.0002168987625)*r20);
IkReal x84=((-1.0)*x83);
IkReal x85=((0.02295225)*rxp0_1);
IkReal x86=((-1.0)*x85);
IkReal x87=(npx*px);
IkReal x88=((0.1515)*x87);
IkReal x89=((-1.0)*x88);
IkReal x90=(pp*r00);
IkReal x91=((0.07575)*x90);
IkReal x92=((((-1.0)*(1.06826923076923e-10)*npx))+(((0.0459045)*rxp1_2))+(((2.42788461538462e-7)*npy)));
IkReal x93=((1.00951442307692e-12)*r00);
IkReal x94=((2.29435096153846e-9)*r01);
IkReal x95=((0.000433797525)*r11);
IkReal x96=((((0.00286335)*npy))+(((0.000433797525)*r21)));
IkReal x97=((8.3325e-12)*r00);
IkReal x98=((0.00254199160875183)*r01);
IkReal x99=((0.0459045)*rxp1_1);
IkReal x100=(npy*px);
IkReal x101=((0.303)*x100);
IkReal x102=(pp*r01);
IkReal x103=((0.1515)*x102);
IkReal x104=((-1.0)*x65);
IkReal x105=((-7.02798484975668e-6)+x72+x73+x66+x70+x68);
IkReal x106=((3.5791875e-7)+x88+x81+(((-1.0)*x91))+(((-1.0)*x80))+x85);
IkReal x107=((0.156)*px);
IkReal x108=((1.039896e-5)*r12);
IkReal x109=((-1.0)*x108);
IkReal x110=((6.864e-5)*rxp2_0);
IkReal x111=((5.8968)*npx);
IkReal x112=((-1.0)*x111);
IkReal x113=((5.23499262000378)*r00);
IkReal x114=((1.716e-8)*r01);
IkReal x115=((-1.0)*x114);
IkReal x116=((0.8933652)*r20);
IkReal x117=((94.536)*rxp0_1);
IkReal x118=((624.0)*x87);
IkReal x119=((-1.0)*x118);
IkReal x120=((312.0)*x90);
IkReal x121=((0.0189)*px);
IkReal x122=((-1.0)*x121);
IkReal x123=((4.725e-6)*r00);
IkReal x124=((2.079e-9)*r01);
IkReal x125=((0.8933652)*r10);
IkReal x126=((0.0005)*npx);
IkReal x127=((2.2e-7)*npy);
IkReal x128=((-1.0)*(((1.0)*pp)));
IkReal x129=((1.039896e-5)*r22);
IkReal x130=((94.536)*rxp0_2);
IkReal x131=((0.0289469474999879)+(((-1.0)*x130))+x128+x127+x126+x129);
IkReal x132=((((-1.0)*(1.7867304)*r21))+(((11.7936)*npy)));
IkReal x133=((3.432e-8)*r00);
IkReal x134=((10.4699852400076)*r01);
IkReal x135=((189.072)*rxp1_1);
IkReal x136=((1248.0)*x100);
IkReal x137=((624.0)*x102);
IkReal x138=((((-1.0)*(0.001)*npy))+(((189.072)*rxp1_2))+(((4.4e-7)*npx)));
IkReal x139=((4.158e-9)*r00);
IkReal x140=((9.45e-6)*r01);
IkReal x141=((1.7867304)*r11);
IkReal x142=((-1.0)*x116);
IkReal x143=((0.0014742)+x114+x118+(((-1.0)*x117))+(((-1.0)*x120))+(((-1.0)*x113)));
IkReal x144=((-1.0)*x123);
IkReal x145=((-1.0)*x124);
IkReal x146=((-1.0)*x125);
IkReal x147=((-1.0)*x126);
IkReal x148=((-1.0)*x127);
IkReal x149=((2.29435096153846e-9)*npx);
IkReal x150=((-1.0)*x149);
IkReal x151=((1.00951442307692e-12)*npy);
IkReal x152=((-1.0)*x151);
IkReal x153=((8.67264663461538e-8)*px);
IkReal x154=((1.1476125e-5)*py);
IkReal x155=((-1.0)*x154);
IkReal x156=((7.649984925e-10)*r02);
IkReal x157=((-1.0)*x156);
IkReal x158=((5.049495e-9)*rxp2_1);
IkReal x159=((-1.0)*x158);
IkReal x160=((4.58870192307692e-6)*pp);
IkReal x161=((2.16816165865385e-11)*r00);
IkReal x162=((9.53991129807692e-15)*r01);
IkReal x163=((0.000385111728725903)*r10);
IkReal x164=((1.26237375e-12)*r11);
IkReal x165=((0.00695453175)*rxp0_0);
IkReal x166=(npx*py);
IkReal x167=((0.0459045)*x166);
IkReal x168=(pp*r10);
IkReal x169=((0.02295225)*x168);
IkReal x170=((-1.0)*x169);
IkReal x171=((-1.32828913660401e-7)+(((-1.0)*x161))+x170+x165+x167+x164+(((-1.0)*x163))+x160+(((-1.0)*x162)));
IkReal x172=((7.158375e-7)*px);
IkReal x173=((3.149685e-10)*rxp2_0);
IkReal x174=((2.70586575e-5)*npx);
IkReal x175=((-1.0)*x174);
IkReal x176=((1.1476125e-5)*pz);
IkReal x177=((2.40218207027048e-5)*r00);
IkReal x178=((7.8742125e-14)*r01);
IkReal x179=((-1.0)*x178);
IkReal x180=((0.000385111728725903)*r20);
IkReal x181=((1.26237375e-12)*r21);
IkReal x182=((-1.0)*x181);
IkReal x183=((5.049495e-9)*rxp2_2);
IkReal x184=((0.00286335)*x87);
IkReal x185=((-1.0)*x184);
IkReal x186=((0.0459045)*npx*pz);
IkReal x187=((-1.0)*x186);
IkReal x188=((0.001431675)*x90);
IkReal x189=((0.02295225)*pp*r20);
IkReal x190=((((4.58870192307692e-9)*npy))+(((-1.0)*(2.01902884615385e-12)*npx)));
IkReal x191=((1.90798225961538e-14)*r00);
IkReal x192=((4.33632331730769e-11)*r01);
IkReal x193=((2.5247475e-12)*r10);
IkReal x194=((0.000770223457451805)*r11);
IkReal x195=((0.0139090635)*rxp1_0);
IkReal x196=((-1.0)*x195);
IkReal x197=(npy*py);
IkReal x198=((0.091809)*x197);
IkReal x199=((-1.0)*x198);
IkReal x200=(pp*r11);
IkReal x201=((0.0459045)*x200);
IkReal x202=((1.5748425e-13)*r00);
IkReal x203=((4.80436414054096e-5)*r01);
IkReal x204=((0.0057267)*x100);
IkReal x205=((0.00286335)*x102);
IkReal x206=((-1.0)*(((2.5247475e-12)*r20)));
IkReal x207=((0.091809)*npy*pz);
IkReal x208=((-1.0)*(((0.0459045)*pp*r21)));
IkReal x209=(x208+x206+(((5.4117315e-5)*npy))+(((-1.0)*(0.000770223457451805)*r21))+x207);
IkReal x210=((-1.0)*x164);
IkReal x211=((-1.0)*x165);
IkReal x212=((-1.0)*x167);
IkReal x213=((6.764664375e-9)+(((-1.0)*x177))+x184+x176+(((-1.0)*x188))+x183+x178);
IkReal x214=((-1.0)*x180);
IkReal x215=((-1.0)*x189);
IkReal x216=((4.771772775e-11)*r12);
IkReal x217=((-1.0)*x216);
IkReal x218=((0.000433797525)*rxp0_1);
IkReal x219=((0.000389211115337153)*r20);
IkReal x220=(x219+x189+x187+x182+x176+x183);
IkReal x221=((0.000389211115337153)*r10);
IkReal x222=((4.771772775e-11)*r22);
IkReal x223=((0.000433797525)*rxp0_2);
IkReal x224=((-1.0)*x223);
IkReal x225=((0.00086759505)*rxp1_1);
IkReal x226=(x208+x206+x207+(((-1.0)*(0.000778422230674305)*r21)));
IkReal x227=((0.000778422230674305)*r11);
IkReal x228=((0.00086759505)*rxp1_2);
IkReal x229=((-1.0)*x193);
IkReal x230=((-1.0)*x201);
IkReal x231=((-1.0)*x218);
IkReal x232=(x181+x176+x183+x215+x186+(((-1.0)*x219)));
IkReal x233=(x222+x170+(((-1.0)*x221))+x211+x167+x164);
IkReal x234=((9.17740384615385e-6)*py);
IkReal x235=((0.000433797525)*r00);
IkReal x236=((2.29435096153846e-9)*r10);
IkReal x237=((1.00951442307692e-12)*r11);
IkReal x238=((((7.575e-5)*py))+(((-1.0)*(5.049495e-9)*r02))+(((3.333e-8)*rxp2_1)));
IkReal x239=((0.00254199160875183)*r10);
IkReal x240=((8.3325e-12)*r11);
IkReal x241=((0.0459045)*rxp0_0);
IkReal x242=((0.303)*x166);
IkReal x243=((0.1515)*x168);
IkReal x244=((((2.079792e-5)*r02))+(((0.312)*py))+(((0.00013728)*rxp2_1)));
IkReal x245=((10.4699852400076)*r10);
IkReal x246=((3.432e-8)*r11);
IkReal x247=((189.072)*rxp0_0);
IkReal x248=((1248.0)*x166);
IkReal x249=((624.0)*x168);
IkReal x250=((-1.0)*(((0.0378)*py)));
IkReal x251=((1.7867304)*r00);
IkReal x252=((9.45e-6)*r10);
IkReal x253=((4.158e-9)*r11);
IkReal x254=((2.295225e-5)*px);
IkReal x255=((-1.0)*(((1.529996985e-9)*r12)));
IkReal x256=((1.009899e-8)*rxp2_0);
IkReal x257=(x255+x256+(((1.73452932692308e-7)*py))+x254);
IkReal x258=((0.000770223457451805)*r00);
IkReal x259=((2.5247475e-12)*r01);
IkReal x260=((-1.0)*x259);
IkReal x261=((4.33632331730769e-11)*r10);
IkReal x262=((1.90798225961538e-14)*r11);
IkReal x263=((0.0139090635)*rxp0_1);
IkReal x264=((0.091809)*x87);
IkReal x265=((-1.0)*x264);
IkReal x266=((0.0459045)*x90);
IkReal x267=((((6.29937e-10)*rxp2_1))+(((1.431675e-6)*py)));
IkReal x268=((4.80436414054096e-5)*r10);
IkReal x269=((1.5748425e-13)*r11);
IkReal x270=((0.0057267)*x166);
IkReal x271=((0.00286335)*x168);
IkReal x272=((5.049495e-12)*r00);
IkReal x273=((-1.0)*(((0.027818127)*rxp1_1)));
IkReal x274=((0.183618)*x100);
IkReal x275=((0.091809)*x102);
IkReal x276=((-1.0)*x263);
IkReal x277=((-1.0)*x266);
IkReal x278=((9.54354555e-11)*r02);
IkReal x279=((0.00086759505)*rxp0_0);
IkReal x280=((-1.0)*x254);
IkReal x281=((0.000778422230674305)*r00);
IkReal x282=((-1.0)*x256);
IkReal x283=((-1.0)*x71);
IkReal x284=((-1.0)*x75);
IkReal x285=((-1.0)*x76);
IkReal x286=((-1.0)*x77);
IkReal x287=((-1.0)*x107);
IkReal x288=((-1.0)*x110);
IkReal x289=((-1.0)*x153);
IkReal x290=((-1.0)*x172);
IkReal x291=((-1.0)*x173);
op[0]=((-7.02798484975668e-6)+x72+x74+x67+x70+x71+x65+x64+x69+x62);
op[1]=((3.5791875e-7)+x80+x75+x89+x82+x79+x84+x77+x86+x76+x91);
op[2]=((((-1.0)*x95))+x94+(((-1.0)*x93))+x92);
op[3]=((((-1.0)*x103))+(((-1.0)*x97))+(((-1.0)*x98))+x99+x96+x101);
op[4]=(x71+x104+x63+x61+x105);
op[5]=(x83+x75+x78+x77+x106+x76);
op[6]=((0.0014742)+x120+x119+x113+x112+x110+x107+x115+x116+x109+x117);
op[7]=(x124+x125+x131+x123+x122);
op[8]=((((-1.0)*x134))+x132+(((-1.0)*x137))+(((-1.0)*x135))+(((-1.0)*x133))+x136);
op[9]=(x138+(((-1.0)*x140))+(((-1.0)*x141))+x139);
op[10]=(x142+x110+x111+x107+x143+x109);
op[11]=((0.0289469474999879)+x145+x144+x146+x128+x130+x122+x129+x148+x147);
op[12]=(x152+x171+x159+x150+x157+x153+x155);
op[13]=((6.764664375e-9)+x180+x189+x188+x187+x182+x177+x176+x175+x183+x173+x179+x172+x185);
op[14]=(x201+x194+x190+x193+(((-1.0)*x191))+x196+x192+x199);
op[15]=(x204+(((-1.0)*x205))+x209+(((-1.0)*x202))+(((-1.0)*x203)));
op[16]=((-1.32828913660401e-7)+x162+x149+x159+x211+x151+x212+x157+x161+x210+x160+x169+x163+x153+x155);
op[17]=(x181+x174+x215+x173+x214+x186+x213+x172);
op[18]=(x218+x217+x220);
op[19]=(x222+x165+x221+x224+x158+x212+x157+x154+x210+x169);
op[20]=(x226+(((-1.0)*x225)));
op[21]=((((-1.0)*x227))+x196+x198+x230+x229+x228);
op[22]=(x217+x232+x231);
op[23]=(x223+x158+x233+x157+x154);
op[24]=(x234+(((-1.0)*x236))+(((-1.0)*x237))+(((-1.0)*x235)));
op[25]=((((-1.0)*x242))+x239+x241+x238+x243+(((-1.0)*x240)));
op[26]=((((0.00086759505)*r01))+(((-1.0)*(2.01902884615385e-12)*r10))+(((4.58870192307692e-9)*r11)));
op[27]=((((-1.0)*(1.6665e-11)*r10))+(((-0.303)*x200))+(((-1.0)*(0.091809)*rxp1_0))+(((-1.0)*(0.00508398321750367)*r11))+(((0.606)*x197)));
op[28]=(x234+x236+x237+x235);
op[29]=(x242+(((-1.0)*x243))+(((-1.0)*x241))+(((-1.0)*x239))+x240+x238);
op[30]=(x245+(((-1.0)*x247))+x249+(((-1.0)*x246))+(((-1.0)*x248))+x244);
op[31]=((((-1.0)*x251))+x250+x253+x252);
op[32]=((((-1.0)*(20.9399704800151)*r11))+(((-1248.0)*x200))+(((-1.0)*(6.864e-8)*r10))+(((2496.0)*x197))+(((378.144)*rxp1_0)));
op[33]=((((8.316e-9)*r10))+(((-1.0)*(1.89e-5)*r11))+(((3.5734608)*r01)));
op[34]=(x246+(((-1.0)*x249))+x248+(((-1.0)*x245))+x244+x247);
op[35]=(x251+(((-1.0)*x252))+x250+(((-1.0)*x253)));
op[36]=(x265+(((-1.0)*x261))+(((-1.0)*x262))+x260+x263+x257+x258+x266);
op[37]=((((-1.0)*x270))+x271+(((-1.0)*x269))+x268+x267);
op[38]=((((-1.0)*x272))+(((-1.0)*(0.00154044691490361)*r01))+(((8.67264663461538e-11)*r11))+x273+(((-1.0)*(3.81596451923077e-14)*r10))+(((-1.0)*x275))+x274);
op[39]=((((-0.0057267)*x200))+(((-1.0)*(3.149685e-13)*r10))+(((0.0114534)*x197))+(((-1.0)*(9.60872828108193e-5)*r11)));
op[40]=(x261+x264+x277+x276+x257+(((-1.0)*x258))+x259+x262);
op[41]=(x269+(((-1.0)*x271))+x270+(((-1.0)*x268))+x267);
op[42]=((((-1.0)*x279))+x278);
op[43]=(x264+x255+x282+x280+x277+x263+x259+(((-1.0)*x281)));
op[44]=((0.0017351901)*rxp1_0);
op[45]=((((0.00155684446134861)*r01))+x275+x272+(((-1.0)*x274))+x273);
op[46]=(x278+x279);
op[47]=(x265+x255+x282+x280+x281+x276+x260+x266);
op[48]=((-7.02798484975668e-6)+x72+x74+x67+x70+x69+x104+x63+x61+x283);
op[49]=(x285+x79+x84+x286+x106+x284);
op[50]=(x93+x95+(((-1.0)*x94))+x92);
op[51]=(x98+x97+x103+(((-1.0)*x101))+x96+(((-1.0)*x99)));
op[52]=(x65+x64+x62+x283+x105);
op[53]=((3.5791875e-7)+x80+x83+x89+x82+x78+x285+x286+x86+x91+x284);
op[54]=(x288+x112+x108+x143+x116+x287);
op[55]=(x121+x131+x145+x144+x146);
op[56]=(x132+x135+x134+(((-1.0)*x136))+x137+x133);
op[57]=(x141+x138+(((-1.0)*x139))+x140);
op[58]=((0.0014742)+x142+x120+x119+x288+x113+x108+x111+x115+x117+x287);
op[59]=((0.0289469474999879)+x124+x121+x125+x128+x130+x123+x129+x148+x147);
op[60]=((-1.32828913660401e-7)+x156+x152+x162+x150+x158+x211+x212+x154+x161+x289+x210+x160+x169+x163);
op[61]=(x180+x189+x187+x182+x290+x175+x291+x213);
op[62]=((((-1.0)*x194))+x190+x195+(((-1.0)*x192))+x198+x230+x191+x229);
op[63]=(x209+x202+x203+(((-1.0)*x204))+x205);
op[64]=(x156+x171+x149+x158+x151+x154+x289);
op[65]=((6.764664375e-9)+x181+x174+x188+x290+x177+x176+x291+x183+x215+x214+x186+x179+x185);
op[66]=(x220+x216+x231);
op[67]=(x156+x224+x159+x233+x155);
op[68]=(x226+x225);
op[69]=(x201+x195+x193+x227+x199+x228);
op[70]=(x218+x216+x232);
op[71]=(x223+x222+x156+x165+x221+x159+x212+x210+x169+x155);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj5)||isnan(htj1)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x292=htj0*htj0;
CheckValue<IkReal> x293=IKPowWithIntegerCheck(((1.0)+x292),-1);
if(!x293.valid){
continue;
}
cj0array[numsolutions]=((x293.value)*(((1.0)+(((-1.0)*x292)))));
CheckValue<IkReal> x294=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x294.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x294.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x295=htj5*htj5;
CheckValue<IkReal> x296=IKPowWithIntegerCheck(((1.0)+x295),-1);
if(!x296.valid){
continue;
}
cj5array[numsolutions]=((x296.value)*(((1.0)+(((-1.0)*x295)))));
CheckValue<IkReal> x297=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x297.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x297.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x298=htj1*htj1;
CheckValue<IkReal> x299=IKPowWithIntegerCheck(((1.0)+x298),-1);
if(!x299.valid){
continue;
}
cj1array[numsolutions]=((x299.value)*(((1.0)+(((-1.0)*x298)))));
CheckValue<IkReal> x300=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x300.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x300.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j4eval[1];
IkReal x301=(cj1*r22);
IkReal x302=(cj0*r12*sj1);
IkReal x303=(r02*sj0*sj1);
IkReal x304=((4.0)*cj1);
IkReal x305=(cj5*r21*x304);
IkReal x306=(r20*sj5*x304);
IkReal x307=((4.0)*cj0*sj1);
IkReal x308=(cj5*r11*x307);
IkReal x309=(r10*sj5*x307);
IkReal x310=((4.0)*sj0*sj1);
IkReal x311=(cj5*r01*x310);
IkReal x312=(r00*sj5*x310);
j4eval[0]=((IKabs(((((-1.0)*x305))+(((-1.0)*x309))+x311+x312+(((-1.0)*x308))+(((-1.0)*x306)))))+(IKabs(((((8.0)*x303))+(((-8.0)*x301))+(((-8.0)*x302)))))+(((0.5)*(IKabs(((((-16.0)*x301))+(((-16.0)*x302))+(((16.0)*x303)))))))+(((0.5)*(IKabs((x305+x306+(((-1.0)*x311))+(((-1.0)*x312))+x308+x309))))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j2, j3, j4]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x313=((4.0)*cj1);
IkReal x314=(cj5*r21*x313);
IkReal x315=(r20*sj5*x313);
IkReal x316=((4.0)*cj0*sj1);
IkReal x317=(cj5*r11*x316);
IkReal x318=(r10*sj5*x316);
IkReal x319=((4.0)*sj0*sj1);
IkReal x320=(cj5*r01*x319);
IkReal x321=(r00*sj5*x319);
IkReal x322=((((-1.0)*x315))+(((-1.0)*x314))+(((-1.0)*x318))+(((-1.0)*x317))+x320+x321);
IkReal x323=(cj1*r22);
IkReal x324=(cj0*r12*sj1);
IkReal x325=(r02*sj0*sj1);
IkReal x326=((((-8.0)*x323))+(((8.0)*x325))+(((-8.0)*x324)));
IkReal x327=(x317+(((-1.0)*x320))+(((-1.0)*x321))+x314+x315+x318);
op[0]=x322;
op[1]=x326;
op[2]=x322;
op[3]=((((-16.0)*x324))+(((-16.0)*x323))+(((16.0)*x325)));
op[4]=x327;
op[5]=x326;
op[6]=x327;
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j2eval[1];
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
j2eval[0]=cj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x328=((1.0)*cj4);
IkReal x329=((1.0)*sj4);
IkReal x330=(cj0*cj4);
IkReal x331=(cj4*sj0);
if( IKabs((((r22*sj4))+(((-1.0)*cj5*r21*x328))+(((-1.0)*r20*sj5*x328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r11*x331))+((r10*sj5*x331))+(((-1.0)*cj0*r02*x329))+(((-1.0)*r12*sj0*x329))+((cj5*r01*x330))+((r00*sj5*x330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj4))+(((-1.0)*cj5*r21*x328))+(((-1.0)*r20*sj5*x328))))+IKsqr((((cj5*r11*x331))+((r10*sj5*x331))+(((-1.0)*cj0*r02*x329))+(((-1.0)*r12*sj0*x329))+((cj5*r01*x330))+((r00*sj5*x330))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*sj4))+(((-1.0)*cj5*r21*x328))+(((-1.0)*r20*sj5*x328))), (((cj5*r11*x331))+((r10*sj5*x331))+(((-1.0)*cj0*r02*x329))+(((-1.0)*r12*sj0*x329))+((cj5*r01*x330))+((r00*sj5*x330))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x332=((1.0)*cj4);
IkReal x333=((1.0)*sj4);
IkReal x334=(cj0*cj4);
IkReal x335=(cj4*sj0);
evalcond[0]=(((r22*sj4))+(((-1.0)*cj5*r21*x332))+(((-1.0)*(1.0)*(IKsin(j2))))+(((-1.0)*r20*sj5*x332)));
evalcond[1]=(((cj5*r11*x335))+((cj5*r01*x334))+(((-1.0)*(1.0)*(IKcos(j2))))+(((-1.0)*r12*sj0*x333))+((r00*sj5*x334))+(((-1.0)*cj0*r02*x333))+((r10*sj5*x335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
j3eval[2]=((IKabs(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))))+(IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x336=(cj0*sj5);
IkReal x337=(cj5*r00);
IkReal x338=(cj5*r10);
IkReal x339=((1.0)*r01);
IkReal x340=(sj0*sj5);
if( IKabs((((r11*x336))+(((-1.0)*cj0*x338))+((sj0*x337))+(((-1.0)*x339*x340)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x338))+(((-1.0)*x336*x339))+((cj0*x337))+(((-1.0)*r11*x340)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x336))+(((-1.0)*cj0*x338))+((sj0*x337))+(((-1.0)*x339*x340))))+IKsqr((((sj0*x338))+(((-1.0)*x336*x339))+((cj0*x337))+(((-1.0)*r11*x340))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r11*x336))+(((-1.0)*cj0*x338))+((sj0*x337))+(((-1.0)*x339*x340))), (((sj0*x338))+(((-1.0)*x336*x339))+((cj0*x337))+(((-1.0)*r11*x340))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x341=(cj5*r00);
IkReal x342=(cj0*x341);
IkReal x343=(cj5*r10);
IkReal x344=(sj0*x343);
IkReal x345=IKcos(j3);
IkReal x346=((1.0)*cj0);
IkReal x347=(r01*sj5);
IkReal x348=((1.0)*sj0);
IkReal x349=(cj0*r11);
IkReal x350=(sj5*x349);
IkReal x351=(sj0*x341);
IkReal x352=IKsin(j3);
IkReal x353=((-1.0)*x352);
IkReal x354=(cj4*r02);
IkReal x355=(cj4*r12);
IkReal x356=(cj0*r01);
IkReal x357=(cj5*sj4);
IkReal x358=(r00*sj4*sj5);
IkReal x359=(cj5*sj0*sj4);
IkReal x360=(r10*sj4*sj5);
IkReal x361=((1.1e-7)*cj5);
IkReal x362=((1.1e-7)*cj0*sj5);
IkReal x363=((1.1e-7)*cj5*sj0);
IkReal x364=((1.1e-7)*sj0*sj5);
IkReal x365=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x345))+(((-1.0)*r11*sj5*x348))+(((-1.0)*x346*x347))+x344+x342);
evalcond[1]=(x351+x353+(((-1.0)*x343*x346))+x350+(((-1.0)*x347*x348)));
evalcond[2]=(((r11*x359))+((cj0*x358))+x353+((cj0*x354))+((x356*x357))+((sj0*x355))+((sj0*x360)));
evalcond[3]=((((-1.0)*x346*x360))+((sj0*x354))+((sj0*x358))+(((-1.0)*x346*x355))+((r01*x359))+(((-1.0)*cj0*r11*x357))+x345);
evalcond[4]=((0.00945)+(((-0.00025)*x344))+((cj0*px))+((py*sj0))+(((0.00025)*sj5*x356))+(((-0.00025)*x342))+(((-1.0)*r11*x363))+(((-1.0)*r10*x364))+((r11*x365))+(((-1.0)*r00*x362))+(((-1.0)*x356*x361))+(((-0.078)*x352)));
evalcond[5]=((0.1515)+(((-0.00025)*x351))+(((-1.0)*r01*x363))+(((-1.0)*py*x346))+(((0.078)*x345))+((px*sj0))+((x349*x361))+((r10*x362))+(((-1.0)*r00*x364))+(((0.00025)*cj0*x343))+((r01*x365))+(((-0.00025)*x350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x366=(cj0*sj5);
IkReal x367=(cj5*r00);
IkReal x368=((1.0)*cj0);
IkReal x369=(cj5*r10);
IkReal x370=(sj0*sj5);
if( IKabs((((r11*x366))+((sj0*x367))+(((-1.0)*r01*x370))+(((-1.0)*x368*x369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x366))+(((-1.0)*sj0*x369))+(((-1.0)*x367*x368))+((r11*x370)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x366))+((sj0*x367))+(((-1.0)*r01*x370))+(((-1.0)*x368*x369))))+IKsqr((((r01*x366))+(((-1.0)*sj0*x369))+(((-1.0)*x367*x368))+((r11*x370))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r11*x366))+((sj0*x367))+(((-1.0)*r01*x370))+(((-1.0)*x368*x369))), (((r01*x366))+(((-1.0)*sj0*x369))+(((-1.0)*x367*x368))+((r11*x370))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x371=IKcos(j3);
IkReal x372=(cj5*r00);
IkReal x373=(cj0*x372);
IkReal x374=(cj5*r10);
IkReal x375=(sj0*x374);
IkReal x376=((1.0)*cj0);
IkReal x377=(r01*sj5);
IkReal x378=((1.0)*sj0);
IkReal x379=(cj0*r11);
IkReal x380=(sj5*x379);
IkReal x381=(sj0*x372);
IkReal x382=IKsin(j3);
IkReal x383=(cj4*r02);
IkReal x384=(cj4*r12);
IkReal x385=(cj0*r01);
IkReal x386=(cj5*sj4);
IkReal x387=(r00*sj4*sj5);
IkReal x388=(cj5*sj0*sj4);
IkReal x389=(r10*sj4*sj5);
IkReal x390=((1.1e-7)*cj5);
IkReal x391=((1.1e-7)*cj0*sj5);
IkReal x392=((1.1e-7)*cj5*sj0);
IkReal x393=((1.1e-7)*sj0*sj5);
IkReal x394=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x376*x377))+x375+x371+x373+(((-1.0)*r11*sj5*x378)));
evalcond[1]=(x380+(((-1.0)*x382))+(((-1.0)*x374*x376))+(((-1.0)*x377*x378))+x381);
evalcond[2]=(((sj0*x384))+((x385*x386))+((r11*x388))+((sj0*x389))+((cj0*x387))+x382+((cj0*x383)));
evalcond[3]=((((-1.0)*x376*x384))+((sj0*x387))+((r01*x388))+((sj0*x383))+(((-1.0)*cj0*r11*x386))+x371+(((-1.0)*x376*x389)));
evalcond[4]=((0.00945)+(((-1.0)*x385*x390))+(((-0.00025)*x373))+(((-0.00025)*x375))+((cj0*px))+((py*sj0))+((r11*x394))+(((0.078)*x382))+(((-1.0)*r10*x393))+(((-1.0)*r11*x392))+(((-1.0)*r00*x391))+(((0.00025)*sj5*x385)));
evalcond[5]=((0.1515)+(((-1.0)*r01*x392))+((r10*x391))+(((-1.0)*r00*x393))+((r01*x394))+((px*sj0))+(((-0.00025)*x380))+(((0.00025)*cj0*x374))+(((-0.00025)*x381))+(((-1.0)*py*x376))+((x379*x390))+(((0.078)*x371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))+IKsqr(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))), ((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x395=IKcos(j3);
IkReal x396=(r21*sj5);
IkReal x397=(cj5*r20);
IkReal x398=IKsin(j3);
IkReal x399=((1.0)*sj4);
IkReal x400=(cj0*r11);
IkReal x401=(sj5*x400);
IkReal x402=(cj5*r00*sj0);
IkReal x403=((1.0)*cj0);
IkReal x404=(cj5*r10);
IkReal x405=(r01*sj0*sj5);
IkReal x406=((1.1e-7)*cj5);
IkReal x407=((1.1e-7)*sj5);
IkReal x408=(cj5*sj4);
IkReal x409=(r01*sj0);
IkReal x410=(r00*sj0);
IkReal x411=(sj4*sj5);
evalcond[0]=((((-1.0)*x397))+x395+x396);
evalcond[1]=(x398+(((-1.0)*cj5*r21*x399))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x399)));
evalcond[2]=(x402+(((-1.0)*x398))+(((-1.0)*x403*x404))+(((-1.0)*x405))+x401);
evalcond[3]=((((0.00025)*x397))+(((-1.0)*(1.0)*pz))+((r20*x407))+(((-0.00025)*x396))+((r21*x406))+(((0.078)*x398)));
evalcond[4]=((((-1.0)*cj4*r12*x403))+((cj4*r02*sj0))+((x410*x411))+(((-1.0)*cj0*r10*x411))+((x408*x409))+x395+(((-1.0)*cj0*r11*x408)));
evalcond[5]=((0.1515)+(((-1.0)*x407*x410))+((px*sj0))+(((-0.00025)*x401))+(((0.078)*x395))+(((0.00025)*cj0*x404))+(((-1.0)*py*x403))+(((-0.00025)*x402))+(((-1.0)*x406*x409))+((x400*x406))+(((0.00025)*x405))+((cj0*r10*x407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x412=((1.0)*cj5);
if( IKabs(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x412))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x412))))+IKsqr(((((-1.0)*r20*x412))+((r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x412))), ((((-1.0)*r20*x412))+((r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x413=(r21*sj5);
IkReal x414=(cj5*r20);
IkReal x415=IKcos(j3);
IkReal x416=IKsin(j3);
IkReal x417=((-1.0)*x416);
IkReal x418=((1.0)*sj4);
IkReal x419=(cj0*r11);
IkReal x420=(sj5*x419);
IkReal x421=(cj5*r00*sj0);
IkReal x422=((1.0)*cj0);
IkReal x423=(cj5*r10);
IkReal x424=(r01*sj0*sj5);
IkReal x425=((1.1e-7)*cj5);
IkReal x426=((1.1e-7)*sj5);
IkReal x427=(cj5*sj4);
IkReal x428=(r01*sj0);
IkReal x429=(r00*sj0);
IkReal x430=(sj4*sj5);
evalcond[0]=((((-1.0)*x415))+(((-1.0)*x414))+x413);
evalcond[1]=(x417+(((-1.0)*cj5*r21*x418))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x418)));
evalcond[2]=((((-1.0)*x424))+x417+x421+(((-1.0)*x422*x423))+x420);
evalcond[3]=(((r21*x425))+(((-0.00025)*x413))+(((-1.0)*(1.0)*pz))+(((-0.078)*x416))+(((0.00025)*x414))+((r20*x426)));
evalcond[4]=(((cj4*r02*sj0))+x415+((x427*x428))+((x429*x430))+(((-1.0)*cj4*r12*x422))+(((-1.0)*cj0*r10*x430))+(((-1.0)*cj0*r11*x427)));
evalcond[5]=((0.1515)+(((-1.0)*x425*x428))+((px*sj0))+((x419*x425))+(((-0.00025)*x420))+(((-1.0)*py*x422))+(((0.00025)*x424))+(((0.00025)*cj0*x423))+(((-0.00025)*x421))+(((-1.0)*x426*x429))+((cj0*r10*x426))+(((0.078)*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x431=((1.0)*sj5);
CheckValue<IkReal> x432=IKPowWithIntegerCheck(cj2,-1);
if(!x432.valid){
continue;
}
CheckValue<IkReal> x433=IKPowWithIntegerCheck(sj2,-1);
if(!x433.valid){
continue;
}
if( IKabs(((x432.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x433.value)*((((cj5*r10*sj0))+(((-1.0)*cj0*r01*x431))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x431)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x432.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))))+IKsqr(((x433.value)*((((cj5*r10*sj0))+(((-1.0)*cj0*r01*x431))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x431))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x432.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))), ((x433.value)*((((cj5*r10*sj0))+(((-1.0)*cj0*r01*x431))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x431))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x434=(r21*sj5);
IkReal x435=IKcos(j3);
IkReal x436=(cj5*r20);
IkReal x437=IKsin(j3);
IkReal x438=(cj2*x437);
IkReal x439=((1.0)*sj4);
IkReal x440=(cj0*r11);
IkReal x441=(sj5*x440);
IkReal x442=(cj5*r00);
IkReal x443=(sj0*x442);
IkReal x444=((1.0)*x437);
IkReal x445=((1.0)*cj0);
IkReal x446=(cj5*r10);
IkReal x447=((1.0)*sj0);
IkReal x448=(r01*sj5);
IkReal x449=(cj0*x442);
IkReal x450=(sj0*x446);
IkReal x451=((1.1e-7)*cj5);
IkReal x452=(cj4*r02);
IkReal x453=(cj4*r12);
IkReal x454=(cj0*r01);
IkReal x455=(cj5*sj4);
IkReal x456=(r00*sj4*sj5);
IkReal x457=(cj5*sj0*sj4);
IkReal x458=(r10*sj4*sj5);
IkReal x459=((1.1e-7)*cj0*sj5);
IkReal x460=((1.1e-7)*cj5*sj0);
IkReal x461=((1.1e-7)*sj0*sj5);
IkReal x462=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x436))+((cj2*x435))+x434);
evalcond[1]=((((-1.0)*r20*sj5*x439))+x438+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x439)));
evalcond[2]=((((-1.0)*x447*x448))+(((-1.0)*x444))+x443+(((-1.0)*x445*x446))+x441);
evalcond[3]=(x450+(((-1.0)*sj2*x435))+x449+(((-1.0)*r11*sj5*x447))+(((-1.0)*x445*x448)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+((r21*x451))+(((-1.0)*(1.0)*pz))+(((0.00025)*x436))+(((-0.00025)*x434))+(((-1.0)*(0.00025)*sj2))+(((0.078)*x438)));
evalcond[5]=(((sj0*x458))+((sj0*x453))+((cj0*x456))+((cj0*x452))+((r11*x457))+(((-1.0)*sj2*x444))+((x454*x455)));
evalcond[6]=((((-1.0)*x445*x458))+(((-1.0)*cj0*r11*x455))+(((-1.0)*x445*x453))+((sj0*x452))+((sj0*x456))+x435+((r01*x457)));
evalcond[7]=((0.1515)+(((0.00025)*cj0*x446))+(((-0.00025)*x443))+(((-1.0)*py*x445))+((px*sj0))+(((-0.00025)*x441))+(((0.078)*x435))+((r01*x462))+(((-1.0)*r01*x460))+(((-1.0)*r00*x461))+((r10*x459))+((x440*x451)));
evalcond[8]=((0.00945)+(((0.00025)*sj5*x454))+((cj0*px))+(((-0.00025)*x450))+((py*sj0))+((r11*x462))+(((-0.00025)*x449))+(((-0.078)*sj2*x437))+(((-1.0)*r00*x459))+(((-1.0)*x451*x454))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*r10*x461))+(((-1.0)*r11*x460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x463=((1.0)*sj5);
CheckValue<IkReal> x464=IKPowWithIntegerCheck(cj2,-1);
if(!x464.valid){
continue;
}
if( IKabs((((cj5*r00*sj0))+(((-1.0)*r01*sj0*x463))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x464.value)*((((cj5*r20))+(((-1.0)*r21*x463)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj0))+(((-1.0)*r01*sj0*x463))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))))+IKsqr(((x464.value)*((((cj5*r20))+(((-1.0)*r21*x463))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r00*sj0))+(((-1.0)*r01*sj0*x463))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))), ((x464.value)*((((cj5*r20))+(((-1.0)*r21*x463))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x465=(r21*sj5);
IkReal x466=IKcos(j3);
IkReal x467=(cj5*r20);
IkReal x468=IKsin(j3);
IkReal x469=(cj2*x468);
IkReal x470=((1.0)*sj4);
IkReal x471=(cj0*r11);
IkReal x472=(sj5*x471);
IkReal x473=(cj5*r00);
IkReal x474=(sj0*x473);
IkReal x475=((1.0)*x468);
IkReal x476=((1.0)*cj0);
IkReal x477=(cj5*r10);
IkReal x478=((1.0)*sj0);
IkReal x479=(r01*sj5);
IkReal x480=(cj0*x473);
IkReal x481=(sj0*x477);
IkReal x482=((1.1e-7)*cj5);
IkReal x483=(cj4*r02);
IkReal x484=(cj4*r12);
IkReal x485=(cj0*r01);
IkReal x486=(cj5*sj4);
IkReal x487=(r00*sj4*sj5);
IkReal x488=(cj5*sj0*sj4);
IkReal x489=(r10*sj4*sj5);
IkReal x490=((1.1e-7)*cj0*sj5);
IkReal x491=((1.1e-7)*cj5*sj0);
IkReal x492=((1.1e-7)*sj0*sj5);
IkReal x493=((0.00025)*sj0*sj5);
evalcond[0]=(((cj2*x466))+(((-1.0)*x467))+x465);
evalcond[1]=((((-1.0)*r20*sj5*x470))+(((-1.0)*cj5*r21*x470))+(((-1.0)*(1.0)*cj4*r22))+x469);
evalcond[2]=((((-1.0)*x476*x477))+(((-1.0)*x475))+x472+x474+(((-1.0)*x478*x479)));
evalcond[3]=((((-1.0)*r11*sj5*x478))+(((-1.0)*x476*x479))+x481+x480+(((-1.0)*sj2*x466)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((-0.00025)*x465))+(((-1.0)*(1.0)*pz))+(((0.078)*x469))+((r21*x482))+(((-1.0)*(0.00025)*sj2))+(((0.00025)*x467)));
evalcond[5]=(((sj0*x484))+((cj0*x483))+((cj0*x487))+((r11*x488))+(((-1.0)*sj2*x475))+((x485*x486))+((sj0*x489)));
evalcond[6]=((((-1.0)*x476*x484))+(((-1.0)*x476*x489))+x466+((sj0*x483))+((sj0*x487))+((r01*x488))+(((-1.0)*cj0*r11*x486)));
evalcond[7]=((0.1515)+((x471*x482))+(((-1.0)*py*x476))+((r10*x490))+(((-0.00025)*x474))+(((0.078)*x466))+((px*sj0))+(((-1.0)*r00*x492))+(((-0.00025)*x472))+((r01*x493))+(((-1.0)*r01*x491))+(((0.00025)*cj0*x477)));
evalcond[8]=((0.00945)+((r11*x493))+(((-1.0)*r11*x491))+((cj0*px))+((py*sj0))+(((0.00025)*sj5*x485))+(((-0.00025)*x480))+(((-1.0)*r10*x492))+(((-1.0)*x482*x485))+(((-1.0)*(0.00025)*cj2))+(((-0.00025)*x481))+(((-0.078)*sj2*x468))+(((-1.0)*r00*x490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x494=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x494.valid){
continue;
}
CheckValue<IkReal> x495 = IKatan2WithCheck(IkReal((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))),IkReal(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x495.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x494.value)))+(x495.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x496=(r21*sj5);
IkReal x497=IKcos(j3);
IkReal x498=(cj5*r20);
IkReal x499=IKsin(j3);
IkReal x500=(cj2*x499);
IkReal x501=((1.0)*sj4);
IkReal x502=(cj0*r11);
IkReal x503=(sj5*x502);
IkReal x504=(cj5*r00);
IkReal x505=(sj0*x504);
IkReal x506=((1.0)*x499);
IkReal x507=((1.0)*cj0);
IkReal x508=(cj5*r10);
IkReal x509=((1.0)*sj0);
IkReal x510=(r01*sj5);
IkReal x511=(cj0*x504);
IkReal x512=(sj0*x508);
IkReal x513=((1.1e-7)*cj5);
IkReal x514=(cj4*r02);
IkReal x515=(cj4*r12);
IkReal x516=(cj0*r01);
IkReal x517=(cj5*sj4);
IkReal x518=(r00*sj4*sj5);
IkReal x519=(cj5*sj0*sj4);
IkReal x520=(r10*sj4*sj5);
IkReal x521=((1.1e-7)*cj0*sj5);
IkReal x522=((1.1e-7)*cj5*sj0);
IkReal x523=((1.1e-7)*sj0*sj5);
IkReal x524=((0.00025)*sj0*sj5);
evalcond[0]=(x496+(((-1.0)*x498))+((cj2*x497)));
evalcond[1]=(x500+(((-1.0)*r20*sj5*x501))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x501)));
evalcond[2]=(x505+x503+(((-1.0)*x506))+(((-1.0)*x507*x508))+(((-1.0)*x509*x510)));
evalcond[3]=(x512+(((-1.0)*x507*x510))+(((-1.0)*sj2*x497))+x511+(((-1.0)*r11*sj5*x509)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+((r21*x513))+(((0.078)*x500))+(((-1.0)*(1.0)*pz))+(((0.00025)*x498))+(((-1.0)*(0.00025)*sj2))+(((-0.00025)*x496)));
evalcond[5]=(((sj0*x515))+((cj0*x518))+((cj0*x514))+(((-1.0)*sj2*x506))+((x516*x517))+((sj0*x520))+((r11*x519)));
evalcond[6]=(((r01*x519))+(((-1.0)*x507*x515))+(((-1.0)*x507*x520))+((sj0*x518))+x497+((sj0*x514))+(((-1.0)*cj0*r11*x517)));
evalcond[7]=((0.1515)+(((-0.00025)*x505))+((x502*x513))+(((-1.0)*r00*x523))+(((-0.00025)*x503))+(((0.00025)*cj0*x508))+((r10*x521))+((px*sj0))+(((-1.0)*r01*x522))+((r01*x524))+(((-1.0)*py*x507))+(((0.078)*x497)));
evalcond[8]=((0.00945)+((r11*x524))+(((-1.0)*r00*x521))+((cj0*px))+((py*sj0))+(((-1.0)*r10*x523))+(((-0.00025)*x512))+(((-1.0)*x513*x516))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*r11*x522))+(((-0.078)*sj2*x499))+(((0.00025)*sj5*x516))+(((-0.00025)*x511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x525=((1.0)*sj4);
IkReal x526=(cj4*cj5);
IkReal x527=(cj4*sj5);
if( IKabs((((r21*x526))+((r20*x527))+(((-1.0)*r22*x525)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj0*x527))+(((-1.0)*cj0*r02*x525))+((r11*sj0*x526))+((cj0*r01*x526))+((cj0*r00*x527))+(((-1.0)*r12*sj0*x525)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x526))+((r20*x527))+(((-1.0)*r22*x525))))+IKsqr((((r10*sj0*x527))+(((-1.0)*cj0*r02*x525))+((r11*sj0*x526))+((cj0*r01*x526))+((cj0*r00*x527))+(((-1.0)*r12*sj0*x525))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x526))+((r20*x527))+(((-1.0)*r22*x525))), (((r10*sj0*x527))+(((-1.0)*cj0*r02*x525))+((r11*sj0*x526))+((cj0*r01*x526))+((cj0*r00*x527))+(((-1.0)*r12*sj0*x525))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x528=((1.0)*cj4);
IkReal x529=((1.0)*sj4);
IkReal x530=(cj0*cj4);
IkReal x531=(cj4*sj0);
evalcond[0]=((((-1.0)*r20*sj5*x528))+(IKsin(j2))+(((-1.0)*cj5*r21*x528))+((r22*sj4)));
evalcond[1]=(((cj5*r11*x531))+(((-1.0)*(1.0)*(IKcos(j2))))+((cj5*r01*x530))+((r00*sj5*x530))+(((-1.0)*cj0*r02*x529))+(((-1.0)*r12*sj0*x529))+((r10*sj5*x531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x532=((1.0)*cj5);
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
j3eval[2]=((IKabs(((((-1.0)*r21*sj4*x532))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22)))))+(IKabs(((((-1.0)*r20*x532))+((r21*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x533=(cj0*cj5);
IkReal x534=(r01*sj5);
IkReal x535=((1.0)*cj0);
IkReal x536=(r11*sj5);
IkReal x537=(cj5*sj0);
if( IKabs((((sj0*x534))+(((-1.0)*r00*x537))+((r10*x533))+(((-1.0)*x535*x536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x533))+(((-1.0)*sj0*x536))+(((-1.0)*x534*x535))+((r10*x537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x534))+(((-1.0)*r00*x537))+((r10*x533))+(((-1.0)*x535*x536))))+IKsqr((((r00*x533))+(((-1.0)*sj0*x536))+(((-1.0)*x534*x535))+((r10*x537))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj0*x534))+(((-1.0)*r00*x537))+((r10*x533))+(((-1.0)*x535*x536))), (((r00*x533))+(((-1.0)*sj0*x536))+(((-1.0)*x534*x535))+((r10*x537))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x538=IKsin(j3);
IkReal x539=(cj0*r11);
IkReal x540=(sj5*x539);
IkReal x541=(cj5*r00);
IkReal x542=(sj0*x541);
IkReal x543=((1.0)*cj0);
IkReal x544=(cj5*r10);
IkReal x545=((1.0)*sj0);
IkReal x546=(r01*sj5);
IkReal x547=(cj0*x541);
IkReal x548=(sj0*x544);
IkReal x549=IKcos(j3);
IkReal x550=((-1.0)*x549);
IkReal x551=(cj4*r02);
IkReal x552=(cj4*r12);
IkReal x553=(cj0*r01);
IkReal x554=(cj5*sj4);
IkReal x555=(r00*sj4*sj5);
IkReal x556=(cj5*sj0*sj4);
IkReal x557=(r10*sj4*sj5);
IkReal x558=((1.1e-7)*cj5);
IkReal x559=((1.1e-7)*cj0*sj5);
IkReal x560=((1.1e-7)*cj5*sj0);
IkReal x561=((1.1e-7)*sj0*sj5);
IkReal x562=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x543*x544))+x538+(((-1.0)*x545*x546))+x542+x540);
evalcond[1]=((((-1.0)*r11*sj5*x545))+x548+x547+(((-1.0)*x543*x546))+x550);
evalcond[2]=(((sj0*x557))+(((-1.0)*x538))+((cj0*x551))+((sj0*x552))+((r11*x556))+((cj0*x555))+((x553*x554)));
evalcond[3]=((((-1.0)*cj0*r11*x554))+(((-1.0)*x543*x552))+(((-1.0)*x543*x557))+((r01*x556))+((sj0*x551))+((sj0*x555))+x550);
evalcond[4]=((0.00945)+(((-1.0)*r10*x561))+(((-1.0)*r11*x560))+(((-1.0)*x553*x558))+((cj0*px))+((py*sj0))+(((-0.078)*x538))+(((-1.0)*r00*x559))+(((-0.00025)*x548))+((r11*x562))+(((-0.00025)*x547))+(((0.00025)*sj5*x553)));
evalcond[5]=((-0.1515)+(((-1.0)*py*x543))+(((-0.00025)*x542))+((r10*x559))+((px*sj0))+(((-1.0)*r00*x561))+(((-0.078)*x549))+(((-1.0)*r01*x560))+((x539*x558))+((r01*x562))+(((0.00025)*cj0*x544))+(((-0.00025)*x540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x563=(cj0*cj5);
IkReal x564=(r01*sj5);
IkReal x565=(r11*sj5);
IkReal x566=((1.0)*r00);
IkReal x567=(cj5*sj0);
if( IKabs(((((-1.0)*x566*x567))+((r10*x563))+(((-1.0)*cj0*x565))+((sj0*x564)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x565))+((cj0*x564))+(((-1.0)*x563*x566))+(((-1.0)*r10*x567)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x566*x567))+((r10*x563))+(((-1.0)*cj0*x565))+((sj0*x564))))+IKsqr((((sj0*x565))+((cj0*x564))+(((-1.0)*x563*x566))+(((-1.0)*r10*x567))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x566*x567))+((r10*x563))+(((-1.0)*cj0*x565))+((sj0*x564))), (((sj0*x565))+((cj0*x564))+(((-1.0)*x563*x566))+(((-1.0)*r10*x567))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x568=IKcos(j3);
IkReal x569=(cj5*r00);
IkReal x570=(cj0*x569);
IkReal x571=(cj5*r10);
IkReal x572=(sj0*x571);
IkReal x573=((1.0)*cj0);
IkReal x574=(r01*sj5);
IkReal x575=((1.0)*sj0);
IkReal x576=IKsin(j3);
IkReal x577=(cj0*r11);
IkReal x578=(sj5*x577);
IkReal x579=(sj0*x569);
IkReal x580=(cj4*r02);
IkReal x581=(cj4*r12);
IkReal x582=(cj0*r01);
IkReal x583=(cj5*sj4);
IkReal x584=(r00*sj4*sj5);
IkReal x585=(cj5*sj0*sj4);
IkReal x586=(r10*sj4*sj5);
IkReal x587=((1.1e-7)*cj5);
IkReal x588=((1.1e-7)*cj0*sj5);
IkReal x589=((1.1e-7)*cj5*sj0);
IkReal x590=((1.1e-7)*sj0*sj5);
IkReal x591=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x573*x574))+(((-1.0)*r11*sj5*x575))+x570+x572+x568);
evalcond[1]=((((-1.0)*x571*x573))+(((-1.0)*x574*x575))+x576+x579+x578);
evalcond[2]=(((x582*x583))+((cj0*x584))+((cj0*x580))+x576+((sj0*x581))+((r11*x585))+((sj0*x586)));
evalcond[3]=(((r01*x585))+(((-1.0)*x573*x581))+(((-1.0)*x573*x586))+(((-1.0)*cj0*r11*x583))+((sj0*x580))+((sj0*x584))+(((-1.0)*x568)));
evalcond[4]=((0.00945)+(((-1.0)*x582*x587))+(((-1.0)*r11*x589))+(((-1.0)*r10*x590))+((cj0*px))+((py*sj0))+(((-0.00025)*x570))+(((-0.00025)*x572))+((r11*x591))+(((0.078)*x576))+(((0.00025)*sj5*x582))+(((-1.0)*r00*x588)));
evalcond[5]=((-0.1515)+((x577*x587))+((r10*x588))+((r01*x591))+((px*sj0))+(((-1.0)*py*x573))+(((-0.00025)*x578))+(((0.00025)*cj0*x571))+(((-0.00025)*x579))+(((-0.078)*x568))+(((-1.0)*r01*x589))+(((-1.0)*r00*x590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x592=((1.0)*cj5);
if( IKabs(((((-1.0)*r21*sj4*x592))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x592))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj4*x592))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))))+IKsqr(((((-1.0)*r20*x592))+((r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r21*sj4*x592))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))), ((((-1.0)*r20*x592))+((r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x593=(r21*sj5);
IkReal x594=(cj5*r20);
IkReal x595=IKcos(j3);
IkReal x596=((-1.0)*x595);
IkReal x597=IKsin(j3);
IkReal x598=((1.0)*sj4);
IkReal x599=(cj0*r11);
IkReal x600=(sj5*x599);
IkReal x601=(cj5*r00*sj0);
IkReal x602=((1.0)*cj0);
IkReal x603=(cj5*r10);
IkReal x604=(r01*sj0*sj5);
IkReal x605=((1.1e-7)*cj5);
IkReal x606=((1.1e-7)*sj5);
IkReal x607=(cj5*sj4);
IkReal x608=(r01*sj0);
IkReal x609=(r00*sj0);
IkReal x610=(sj4*sj5);
evalcond[0]=(x596+x593+(((-1.0)*x594)));
evalcond[1]=((((-1.0)*x597))+(((-1.0)*cj5*r21*x598))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x598)));
evalcond[2]=((((-1.0)*x604))+x597+x601+x600+(((-1.0)*x602*x603)));
evalcond[3]=((((-0.00025)*x593))+(((-1.0)*(1.0)*pz))+(((0.00025)*x594))+((r21*x605))+(((-0.078)*x597))+((r20*x606)));
evalcond[4]=(((cj4*r02*sj0))+((x609*x610))+x596+(((-1.0)*cj0*r10*x610))+(((-1.0)*cj0*r11*x607))+(((-1.0)*cj4*r12*x602))+((x607*x608)));
evalcond[5]=((-0.1515)+(((-1.0)*x606*x609))+(((0.00025)*cj0*x603))+((px*sj0))+(((-1.0)*x605*x608))+((cj0*r10*x606))+(((-0.00025)*x600))+(((-0.00025)*x601))+((x599*x605))+(((-1.0)*py*x602))+(((-0.078)*x595))+(((0.00025)*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))+IKsqr(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))), ((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x611=IKcos(j3);
IkReal x612=(r21*sj5);
IkReal x613=(cj5*r20);
IkReal x614=IKsin(j3);
IkReal x615=((1.0)*sj4);
IkReal x616=(cj0*r11);
IkReal x617=(sj5*x616);
IkReal x618=(cj5*r00*sj0);
IkReal x619=((1.0)*cj0);
IkReal x620=(cj5*r10);
IkReal x621=(r01*sj0*sj5);
IkReal x622=((1.1e-7)*cj5);
IkReal x623=((1.1e-7)*sj5);
IkReal x624=(cj5*sj4);
IkReal x625=(r01*sj0);
IkReal x626=(r00*sj0);
IkReal x627=(sj4*sj5);
evalcond[0]=(x611+(((-1.0)*x613))+x612);
evalcond[1]=(x614+(((-1.0)*r20*sj5*x615))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x615)));
evalcond[2]=((((-1.0)*x621))+x614+(((-1.0)*x619*x620))+x617+x618);
evalcond[3]=((((0.078)*x614))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x612))+((r20*x623))+(((0.00025)*x613))+((r21*x622)));
evalcond[4]=(((cj4*r02*sj0))+(((-1.0)*cj0*r10*x627))+(((-1.0)*x611))+(((-1.0)*cj0*r11*x624))+(((-1.0)*cj4*r12*x619))+((x626*x627))+((x624*x625)));
evalcond[5]=((-0.1515)+(((-0.00025)*x617))+((x616*x622))+((px*sj0))+(((-0.00025)*x618))+(((-1.0)*x622*x625))+(((-0.078)*x611))+(((-1.0)*x623*x626))+(((-1.0)*py*x619))+(((0.00025)*x621))+((cj0*r10*x623))+(((0.00025)*cj0*x620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x628=((1.0)*sj5);
CheckValue<IkReal> x629=IKPowWithIntegerCheck(cj2,-1);
if(!x629.valid){
continue;
}
CheckValue<IkReal> x630=IKPowWithIntegerCheck(sj2,-1);
if(!x630.valid){
continue;
}
if( IKabs(((x629.value)*(((((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj4*x628))+(((-1.0)*(1.0)*cj5*r21*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x630.value)*(((((-1.0)*r11*sj0*x628))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x628))+((cj0*cj5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x629.value)*(((((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj4*x628))+(((-1.0)*(1.0)*cj5*r21*sj4))))))+IKsqr(((x630.value)*(((((-1.0)*r11*sj0*x628))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x628))+((cj0*cj5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x629.value)*(((((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj4*x628))+(((-1.0)*(1.0)*cj5*r21*sj4))))), ((x630.value)*(((((-1.0)*r11*sj0*x628))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x628))+((cj0*cj5*r00))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x631=(r21*sj5);
IkReal x632=(cj5*r20);
IkReal x633=IKcos(j3);
IkReal x634=((1.0)*x633);
IkReal x635=IKsin(j3);
IkReal x636=(cj2*x635);
IkReal x637=((1.0)*sj4);
IkReal x638=(cj0*r11);
IkReal x639=(sj5*x638);
IkReal x640=(cj5*r00);
IkReal x641=(sj0*x640);
IkReal x642=((1.0)*cj0);
IkReal x643=(cj5*r10);
IkReal x644=((1.0)*sj0);
IkReal x645=(r01*sj5);
IkReal x646=(cj0*x640);
IkReal x647=(sj0*x643);
IkReal x648=((1.1e-7)*cj5);
IkReal x649=(cj4*r02);
IkReal x650=(cj4*r12);
IkReal x651=(sj2*x635);
IkReal x652=(cj0*r01);
IkReal x653=(cj5*sj4);
IkReal x654=(r00*sj4*sj5);
IkReal x655=(cj5*sj0*sj4);
IkReal x656=(r10*sj4*sj5);
IkReal x657=((1.1e-7)*cj0*sj5);
IkReal x658=((1.1e-7)*cj5*sj0);
IkReal x659=((1.1e-7)*sj0*sj5);
IkReal x660=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*cj2*x634))+(((-1.0)*x632))+x631);
evalcond[1]=((((-1.0)*x636))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x637))+(((-1.0)*cj5*r21*x637)));
evalcond[2]=((((-1.0)*x644*x645))+x641+x635+(((-1.0)*x642*x643))+x639);
evalcond[3]=(x646+(((-1.0)*r11*sj5*x644))+(((-1.0)*sj2*x634))+(((-1.0)*x642*x645))+x647);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+((r21*x648))+(((-0.00025)*x631))+(((0.00025)*x632))+(((0.00025)*sj2))+(((-1.0)*(1.0)*pz))+(((-0.078)*x636)));
evalcond[5]=((((-1.0)*x651))+((cj0*x649))+((r11*x655))+((x652*x653))+((sj0*x656))+((sj0*x650))+((cj0*x654)));
evalcond[6]=((((-1.0)*x642*x650))+((sj0*x649))+((r01*x655))+((sj0*x654))+(((-1.0)*cj0*r11*x653))+(((-1.0)*x642*x656))+(((-1.0)*x634)));
evalcond[7]=((-0.1515)+(((-1.0)*py*x642))+(((-0.00025)*x639))+((px*sj0))+(((-1.0)*r00*x659))+((r01*x660))+(((-0.078)*x633))+(((-1.0)*r01*x658))+((x638*x648))+(((0.00025)*cj0*x643))+(((-0.00025)*x641))+((r10*x657)));
evalcond[8]=((0.00945)+(((0.00025)*sj5*x652))+((cj0*px))+((py*sj0))+(((-1.0)*r10*x659))+(((-0.00025)*x647))+(((-0.00025)*x646))+(((-1.0)*x648*x652))+(((-1.0)*(0.00025)*cj2))+(((-0.078)*x651))+(((-1.0)*r11*x658))+((r11*x660))+(((-1.0)*r00*x657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x661=((1.0)*cj5);
CheckValue<IkReal> x662=IKPowWithIntegerCheck(cj2,-1);
if(!x662.valid){
continue;
}
if( IKabs((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*r00*sj0*x661))+(((-1.0)*(1.0)*cj0*r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x662.value)*(((((-1.0)*r20*x661))+((r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*r00*sj0*x661))+(((-1.0)*(1.0)*cj0*r11*sj5))))+IKsqr(((x662.value)*(((((-1.0)*r20*x661))+((r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*r00*sj0*x661))+(((-1.0)*(1.0)*cj0*r11*sj5))), ((x662.value)*(((((-1.0)*r20*x661))+((r21*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x663=(r21*sj5);
IkReal x664=(cj5*r20);
IkReal x665=IKcos(j3);
IkReal x666=((1.0)*x665);
IkReal x667=IKsin(j3);
IkReal x668=(cj2*x667);
IkReal x669=((1.0)*sj4);
IkReal x670=(cj0*r11);
IkReal x671=(sj5*x670);
IkReal x672=(cj5*r00);
IkReal x673=(sj0*x672);
IkReal x674=((1.0)*cj0);
IkReal x675=(cj5*r10);
IkReal x676=((1.0)*sj0);
IkReal x677=(r01*sj5);
IkReal x678=(cj0*x672);
IkReal x679=(sj0*x675);
IkReal x680=((1.1e-7)*cj5);
IkReal x681=(cj4*r02);
IkReal x682=(cj4*r12);
IkReal x683=(sj2*x667);
IkReal x684=(cj0*r01);
IkReal x685=(cj5*sj4);
IkReal x686=(r00*sj4*sj5);
IkReal x687=(cj5*sj0*sj4);
IkReal x688=(r10*sj4*sj5);
IkReal x689=((1.1e-7)*cj0*sj5);
IkReal x690=((1.1e-7)*cj5*sj0);
IkReal x691=((1.1e-7)*sj0*sj5);
IkReal x692=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*cj2*x666))+x663+(((-1.0)*x664)));
evalcond[1]=((((-1.0)*cj5*r21*x669))+(((-1.0)*r20*sj5*x669))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*x668)));
evalcond[2]=(x673+(((-1.0)*x674*x675))+x671+(((-1.0)*x676*x677))+x667);
evalcond[3]=(x679+(((-1.0)*sj2*x666))+(((-1.0)*x674*x677))+x678+(((-1.0)*r11*sj5*x676)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((0.00025)*sj2))+(((-0.078)*x668))+(((-1.0)*(1.0)*pz))+(((0.00025)*x664))+(((-0.00025)*x663))+((r21*x680)));
evalcond[5]=(((sj0*x688))+((x684*x685))+(((-1.0)*x683))+((r11*x687))+((cj0*x686))+((cj0*x681))+((sj0*x682)));
evalcond[6]=((((-1.0)*x674*x688))+((sj0*x681))+(((-1.0)*x666))+(((-1.0)*cj0*r11*x685))+((sj0*x686))+(((-1.0)*x674*x682))+((r01*x687)));
evalcond[7]=((-0.1515)+(((-0.00025)*x671))+(((-0.00025)*x673))+((x670*x680))+((px*sj0))+(((-0.078)*x665))+((r10*x689))+(((-1.0)*r00*x691))+(((-1.0)*py*x674))+((r01*x692))+(((-1.0)*r01*x690))+(((0.00025)*cj0*x675)));
evalcond[8]=((0.00945)+(((-0.078)*x683))+((cj0*px))+((py*sj0))+((r11*x692))+(((0.00025)*sj5*x684))+(((-1.0)*r11*x690))+(((-1.0)*x680*x684))+(((-0.00025)*x679))+(((-1.0)*r00*x689))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*r10*x691))+(((-0.00025)*x678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x693=((1.0)*cj5);
CheckValue<IkReal> x694=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x694.valid){
continue;
}
CheckValue<IkReal> x695 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj4*x693))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22)))),IkReal(((((-1.0)*r20*x693))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x695.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x694.value)))+(x695.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x696=(r21*sj5);
IkReal x697=(cj5*r20);
IkReal x698=IKcos(j3);
IkReal x699=((1.0)*x698);
IkReal x700=IKsin(j3);
IkReal x701=(cj2*x700);
IkReal x702=((1.0)*sj4);
IkReal x703=(cj0*r11);
IkReal x704=(sj5*x703);
IkReal x705=(cj5*r00);
IkReal x706=(sj0*x705);
IkReal x707=((1.0)*cj0);
IkReal x708=(cj5*r10);
IkReal x709=((1.0)*sj0);
IkReal x710=(r01*sj5);
IkReal x711=(cj0*x705);
IkReal x712=(sj0*x708);
IkReal x713=((1.1e-7)*cj5);
IkReal x714=(cj4*r02);
IkReal x715=(cj4*r12);
IkReal x716=(sj2*x700);
IkReal x717=(cj0*r01);
IkReal x718=(cj5*sj4);
IkReal x719=(r00*sj4*sj5);
IkReal x720=(cj5*sj0*sj4);
IkReal x721=(r10*sj4*sj5);
IkReal x722=((1.1e-7)*cj0*sj5);
IkReal x723=((1.1e-7)*cj5*sj0);
IkReal x724=((1.1e-7)*sj0*sj5);
IkReal x725=((0.00025)*sj0*sj5);
evalcond[0]=(x696+(((-1.0)*cj2*x699))+(((-1.0)*x697)));
evalcond[1]=((((-1.0)*r20*sj5*x702))+(((-1.0)*x701))+(((-1.0)*cj5*r21*x702))+(((-1.0)*(1.0)*cj4*r22)));
evalcond[2]=(x700+x704+(((-1.0)*x707*x708))+x706+(((-1.0)*x709*x710)));
evalcond[3]=((((-1.0)*x707*x710))+x711+(((-1.0)*r11*sj5*x709))+x712+(((-1.0)*sj2*x699)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((0.00025)*sj2))+(((-1.0)*(1.0)*pz))+((r21*x713))+(((-0.00025)*x696))+(((0.00025)*x697))+(((-0.078)*x701)));
evalcond[5]=(((cj0*x719))+((r11*x720))+((sj0*x721))+((cj0*x714))+((sj0*x715))+(((-1.0)*x716))+((x717*x718)));
evalcond[6]=(((sj0*x714))+(((-1.0)*x707*x715))+((sj0*x719))+((r01*x720))+(((-1.0)*x707*x721))+(((-1.0)*x699))+(((-1.0)*cj0*r11*x718)));
evalcond[7]=((-0.1515)+((r10*x722))+((px*sj0))+(((-0.078)*x698))+((r01*x725))+(((-0.00025)*x704))+(((-1.0)*py*x707))+(((-1.0)*r00*x724))+(((0.00025)*cj0*x708))+(((-0.00025)*x706))+(((-1.0)*r01*x723))+((x703*x713)));
evalcond[8]=((0.00945)+((cj0*px))+(((-0.00025)*x711))+((py*sj0))+((r11*x725))+(((-1.0)*r10*x724))+(((-0.078)*x716))+(((-1.0)*x713*x717))+(((-1.0)*r00*x722))+(((-1.0)*r11*x723))+(((0.00025)*sj5*x717))+(((-0.00025)*x712))+(((-1.0)*(0.00025)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))))+IKsqr((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))), (((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x726=(r21*sj5);
IkReal x727=(cj5*r20);
IkReal x728=IKcos(j3);
IkReal x729=((1.0)*sj4);
IkReal x730=(cj5*r21);
IkReal x731=(r20*sj5);
evalcond[0]=((((-1.0)*x727))+(((-1.0)*(1.0)*(IKsin(j3))))+x726);
evalcond[1]=(x728+(((-1.0)*x729*x731))+(((-1.0)*x729*x730))+(((-1.0)*(1.0)*cj4*r22)));
evalcond[2]=((0.1515)+(((1.1e-7)*x730))+(((0.00025)*x727))+(((-1.0)*(1.0)*pz))+(((0.078)*x728))+(((1.1e-7)*x731))+(((-0.00025)*x726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x732=(cj5*r00);
IkReal x733=(cj5*r10);
IkReal x734=((1.0)*r01);
IkReal x735=(cj0*sj5);
IkReal x736=(sj0*sj5);
j2eval[0]=cj3;
j2eval[1]=((IKabs((((r11*x735))+((sj0*x732))+(((-1.0)*cj0*x733))+(((-1.0)*x734*x736)))))+(IKabs(((((-1.0)*x734*x735))+(((-1.0)*r11*x736))+((sj0*x733))+((cj0*x732))))));
j2eval[2]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=0;
cj1=1.0;
j1=0;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x737=(cj5*r00);
IkReal x738=(cj5*r10);
IkReal x739=((1.0)*r01);
IkReal x740=(cj0*sj5);
IkReal x741=(sj0*sj5);
if( IKabs((((sj0*x738))+((cj0*x737))+(((-1.0)*x739*x740))+(((-1.0)*r11*x741)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x740))+((sj0*x737))+(((-1.0)*x739*x741))+(((-1.0)*cj0*x738)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x738))+((cj0*x737))+(((-1.0)*x739*x740))+(((-1.0)*r11*x741))))+IKsqr((((r11*x740))+((sj0*x737))+(((-1.0)*x739*x741))+(((-1.0)*cj0*x738))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj0*x738))+((cj0*x737))+(((-1.0)*x739*x740))+(((-1.0)*r11*x741))), (((r11*x740))+((sj0*x737))+(((-1.0)*x739*x741))+(((-1.0)*cj0*x738))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x742=(cj5*r00);
IkReal x743=(cj0*x742);
IkReal x744=(cj5*r10);
IkReal x745=(sj0*x744);
IkReal x746=IKsin(j2);
IkReal x747=((1.0)*cj0);
IkReal x748=(r01*sj5);
IkReal x749=((1.0)*sj0);
IkReal x750=(cj0*r11);
IkReal x751=(sj5*x750);
IkReal x752=(sj0*x742);
IkReal x753=IKcos(j2);
IkReal x754=((-1.0)*x753);
IkReal x755=(r12*sj4);
IkReal x756=(r02*sj4);
IkReal x757=(cj4*cj5*sj0);
IkReal x758=(cj4*r00*sj5);
IkReal x759=(cj4*cj5);
IkReal x760=(cj4*r10*sj5);
IkReal x761=(cj0*r01);
IkReal x762=((1.1e-7)*cj5);
IkReal x763=((1.1e-7)*cj0*sj5);
IkReal x764=((1.1e-7)*cj5*sj0);
IkReal x765=((1.1e-7)*sj0*sj5);
IkReal x766=((0.00025)*sj0*sj5);
evalcond[0]=(x743+(((-1.0)*r11*sj5*x749))+(((-1.0)*x747*x748))+(((-1.0)*x746))+x745);
evalcond[1]=(x754+(((-1.0)*x748*x749))+x752+x751+(((-1.0)*x744*x747)));
evalcond[2]=(((r01*x757))+((sj0*x758))+x746+(((-1.0)*x749*x756))+(((-1.0)*cj0*r11*x759))+(((-1.0)*x747*x760))+((cj0*x755)));
evalcond[3]=(x754+((x759*x761))+((sj0*x760))+(((-1.0)*x749*x755))+((r11*x757))+((cj0*x758))+(((-1.0)*x747*x756)));
evalcond[4]=((0.00945)+(((-1.0)*r00*x763))+((cj0*px))+(((-1.0)*r11*x764))+((py*sj0))+(((-0.00025)*x753))+((r11*x766))+(((-0.00025)*x743))+(((-1.0)*r10*x765))+(((-1.0)*x761*x762))+(((0.00025)*sj5*x761))+(((-0.00025)*x745)));
evalcond[5]=((((0.00025)*cj0*x744))+((px*sj0))+(((0.00025)*x746))+(((-1.0)*r00*x765))+(((-0.00025)*x752))+(((-0.00025)*x751))+(((-1.0)*r01*x764))+((x750*x762))+((r10*x763))+(((-1.0)*py*x747))+((r01*x766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x767=(r01*sj5);
IkReal x768=(r11*sj5);
IkReal x769=((1.0)*r00);
IkReal x770=(cj0*cj5);
IkReal x771=(cj5*sj0);
if( IKabs(((((-1.0)*r10*x771))+((sj0*x768))+((cj0*x767))+(((-1.0)*x769*x770)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x770))+(((-1.0)*x769*x771))+((sj0*x767))+(((-1.0)*cj0*x768)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x771))+((sj0*x768))+((cj0*x767))+(((-1.0)*x769*x770))))+IKsqr((((r10*x770))+(((-1.0)*x769*x771))+((sj0*x767))+(((-1.0)*cj0*x768))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x771))+((sj0*x768))+((cj0*x767))+(((-1.0)*x769*x770))), (((r10*x770))+(((-1.0)*x769*x771))+((sj0*x767))+(((-1.0)*cj0*x768))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x772=IKsin(j2);
IkReal x773=(cj5*r00);
IkReal x774=(cj0*x773);
IkReal x775=(cj5*r10);
IkReal x776=(sj0*x775);
IkReal x777=((1.0)*cj0);
IkReal x778=(r01*sj5);
IkReal x779=((1.0)*sj0);
IkReal x780=IKcos(j2);
IkReal x781=(cj0*r11);
IkReal x782=(sj5*x781);
IkReal x783=(sj0*x773);
IkReal x784=(r12*sj4);
IkReal x785=(r02*sj4);
IkReal x786=(cj4*cj5*sj0);
IkReal x787=(cj4*r00*sj5);
IkReal x788=(cj4*cj5);
IkReal x789=(cj4*r10*sj5);
IkReal x790=(cj0*r01);
IkReal x791=((1.1e-7)*cj5);
IkReal x792=((1.1e-7)*cj0*sj5);
IkReal x793=((1.1e-7)*cj5*sj0);
IkReal x794=((1.1e-7)*sj0*sj5);
IkReal x795=((0.00025)*sj0*sj5);
evalcond[0]=(x774+(((-1.0)*r11*sj5*x779))+(((-1.0)*x777*x778))+x772+x776);
evalcond[1]=(x782+x783+(((-1.0)*x775*x777))+x780+(((-1.0)*x778*x779)));
evalcond[2]=((((-1.0)*x777*x789))+((cj0*x784))+((sj0*x787))+x772+(((-1.0)*x779*x785))+(((-1.0)*cj0*r11*x788))+((r01*x786)));
evalcond[3]=((((-1.0)*x779*x784))+(((-1.0)*x777*x785))+(((-1.0)*x780))+((cj0*x787))+((x788*x790))+((r11*x786))+((sj0*x789)));
evalcond[4]=((0.00945)+((cj0*px))+(((-1.0)*r11*x793))+((py*sj0))+(((-1.0)*x790*x791))+(((-1.0)*r10*x794))+(((0.00025)*sj5*x790))+(((-0.00025)*x776))+(((-1.0)*r00*x792))+(((-0.00025)*x774))+(((-0.00025)*x780))+((r11*x795)));
evalcond[5]=((((-0.00025)*x782))+((px*sj0))+(((0.00025)*x772))+((r10*x792))+(((-0.00025)*x783))+(((0.00025)*cj0*x775))+(((-1.0)*r00*x794))+(((-1.0)*py*x777))+((r01*x795))+(((-1.0)*r01*x793))+((x781*x791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x796=(cj0*r02);
IkReal x797=(r12*sj0);
IkReal x798=(cj0*sj4);
IkReal x799=(cj5*r01);
IkReal x800=(r00*sj5);
IkReal x801=(cj5*r11);
IkReal x802=(sj0*sj4);
IkReal x803=(r10*sj5);
IkReal x804=((1.0)*sj4);
IkReal x805=(cj0*cj4);
IkReal x806=(cj4*sj0);
if( IKabs((((x798*x800))+((cj4*x796))+((cj4*x797))+((x798*x799))+((x802*x803))+((x801*x802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x801*x806))+((x799*x805))+(((-1.0)*x796*x804))+((x800*x805))+((x803*x806))+(((-1.0)*x797*x804)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x798*x800))+((cj4*x796))+((cj4*x797))+((x798*x799))+((x802*x803))+((x801*x802))))+IKsqr((((x801*x806))+((x799*x805))+(((-1.0)*x796*x804))+((x800*x805))+((x803*x806))+(((-1.0)*x797*x804))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x798*x800))+((cj4*x796))+((cj4*x797))+((x798*x799))+((x802*x803))+((x801*x802))), (((x801*x806))+((x799*x805))+(((-1.0)*x796*x804))+((x800*x805))+((x803*x806))+(((-1.0)*x797*x804))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x807=(cj4*r02);
IkReal x808=(cj4*r12);
IkReal x809=IKsin(j2);
IkReal x810=(cj0*cj5*r01);
IkReal x811=(cj0*r00*sj5);
IkReal x812=(cj5*sj0*sj4);
IkReal x813=(sj0*sj4*sj5);
IkReal x814=(r12*sj4);
IkReal x815=((1.0)*sj0);
IkReal x816=(r02*sj4);
IkReal x817=(cj4*cj5*sj0);
IkReal x818=(cj4*sj0*sj5);
IkReal x819=(cj5*r11);
IkReal x820=((1.0)*cj0*cj4);
IkReal x821=(r10*sj5);
IkReal x822=IKcos(j2);
IkReal x823=((-1.0)*x822);
IkReal x824=((1.0)*cj0);
IkReal x825=((1.0)*cj0*sj4);
IkReal x826=((0.00025)*cj0*cj5);
IkReal x827=((1.1e-7)*cj0*cj5);
IkReal x828=((1.1e-7)*cj0*sj5);
IkReal x829=((0.00025)*cj0*sj5);
IkReal x830=((0.00025)*cj5*sj0);
IkReal x831=((1.1e-7)*cj5*sj0);
IkReal x832=((1.1e-7)*sj0*sj5);
IkReal x833=((0.00025)*sj0*sj5);
evalcond[0]=(((r11*x812))+(((-1.0)*x809))+((r10*x813))+((sj4*x811))+((sj4*x810))+((cj0*x807))+((sj0*x808)));
evalcond[1]=(((r00*x818))+((r01*x817))+(((-1.0)*x820*x821))+(((-1.0)*x819*x820))+(((-1.0)*x815*x816))+x809+((cj0*x814)));
evalcond[2]=(((r11*x817))+(((-1.0)*x814*x815))+((r10*x818))+x823+((cj4*x811))+(((-1.0)*x816*x824))+((cj4*x810)));
evalcond[3]=(((r01*x812))+x823+((sj0*x807))+(((-1.0)*x808*x824))+(((-1.0)*x819*x825))+((r00*x813))+(((-1.0)*x821*x825)));
evalcond[4]=((0.00945)+(((-0.078)*x809))+((r11*x833))+(((-1.0)*r10*x832))+((cj0*px))+((py*sj0))+(((-1.0)*r11*x831))+(((-1.0)*r01*x827))+((r01*x829))+(((-0.00025)*x822))+(((-1.0)*r00*x826))+(((-1.0)*r10*x830))+(((-1.0)*r00*x828)));
evalcond[5]=((((-1.0)*r11*x829))+((r10*x828))+(((-1.0)*r00*x832))+(((-1.0)*r00*x830))+((px*sj0))+((r10*x826))+((r11*x827))+(((-1.0)*r01*x831))+(((-0.078)*x822))+(((-1.0)*py*x824))+(((0.00025)*x809))+((r01*x833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x834=((1.0)*cj0*r02);
IkReal x835=((1.0)*r12*sj0);
IkReal x836=(cj5*r01);
IkReal x837=((1.0)*cj0*sj4);
IkReal x838=(r00*sj5);
IkReal x839=(cj5*r11);
IkReal x840=((1.0)*sj0*sj4);
IkReal x841=(r10*sj5);
IkReal x842=(cj0*cj4);
IkReal x843=(cj4*sj0);
if( IKabs(((((-1.0)*x839*x840))+(((-1.0)*x836*x837))+(((-1.0)*cj4*x834))+(((-1.0)*x840*x841))+(((-1.0)*cj4*x835))+(((-1.0)*x837*x838)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x834))+(((-1.0)*sj4*x835))+((x841*x843))+((x836*x842))+((x838*x842))+((x839*x843)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x839*x840))+(((-1.0)*x836*x837))+(((-1.0)*cj4*x834))+(((-1.0)*x840*x841))+(((-1.0)*cj4*x835))+(((-1.0)*x837*x838))))+IKsqr(((((-1.0)*sj4*x834))+(((-1.0)*sj4*x835))+((x841*x843))+((x836*x842))+((x838*x842))+((x839*x843))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x839*x840))+(((-1.0)*x836*x837))+(((-1.0)*cj4*x834))+(((-1.0)*x840*x841))+(((-1.0)*cj4*x835))+(((-1.0)*x837*x838))), ((((-1.0)*sj4*x834))+(((-1.0)*sj4*x835))+((x841*x843))+((x836*x842))+((x838*x842))+((x839*x843))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x844=IKsin(j2);
IkReal x845=(cj4*r02);
IkReal x846=(cj4*r12);
IkReal x847=(cj0*cj5*r01);
IkReal x848=(cj0*r00*sj5);
IkReal x849=(cj5*sj0*sj4);
IkReal x850=(sj0*sj4*sj5);
IkReal x851=(r12*sj4);
IkReal x852=((1.0)*sj0);
IkReal x853=(r02*sj4);
IkReal x854=(cj4*cj5*sj0);
IkReal x855=(cj4*sj0*sj5);
IkReal x856=(cj5*r11);
IkReal x857=((1.0)*cj0*cj4);
IkReal x858=(r10*sj5);
IkReal x859=IKcos(j2);
IkReal x860=((1.0)*cj0);
IkReal x861=((1.0)*cj0*sj4);
IkReal x862=((0.00025)*cj0*cj5);
IkReal x863=((1.1e-7)*cj0*cj5);
IkReal x864=((1.1e-7)*cj0*sj5);
IkReal x865=((0.00025)*cj0*sj5);
IkReal x866=((0.00025)*cj5*sj0);
IkReal x867=((1.1e-7)*cj5*sj0);
IkReal x868=((1.1e-7)*sj0*sj5);
IkReal x869=((0.00025)*sj0*sj5);
evalcond[0]=(((sj4*x847))+((sj4*x848))+((r11*x849))+((r10*x850))+((sj0*x846))+((cj0*x845))+x844);
evalcond[1]=((((-1.0)*x857*x858))+((r00*x855))+(((-1.0)*x852*x853))+((r01*x854))+((cj0*x851))+x844+(((-1.0)*x856*x857)));
evalcond[2]=(((r00*x850))+x859+(((-1.0)*x856*x861))+(((-1.0)*x846*x860))+(((-1.0)*x858*x861))+((r01*x849))+((sj0*x845)));
evalcond[3]=((((-1.0)*x851*x852))+((r10*x855))+((r11*x854))+(((-1.0)*x853*x860))+((cj4*x848))+((cj4*x847))+(((-1.0)*x859)));
evalcond[4]=((0.00945)+(((-1.0)*r00*x862))+(((-1.0)*r01*x863))+((cj0*px))+(((-1.0)*r10*x866))+((py*sj0))+((r01*x865))+(((0.078)*x844))+(((-1.0)*r10*x868))+((r11*x869))+(((-1.0)*r00*x864))+(((-0.00025)*x859))+(((-1.0)*r11*x867)));
evalcond[5]=(((r10*x864))+(((-1.0)*py*x860))+(((-1.0)*r00*x868))+((r01*x869))+(((-1.0)*r00*x866))+((px*sj0))+((r10*x862))+(((0.078)*x859))+(((-1.0)*r11*x865))+(((-1.0)*r01*x867))+((r11*x863))+(((0.00025)*x844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x870=(cj0*cj5);
IkReal x871=(cj0*sj5);
IkReal x872=(cj5*sj0);
IkReal x873=(sj0*sj5);
CheckValue<IkReal> x874=IKPowWithIntegerCheck(sj3,-1);
if(!x874.valid){
continue;
}
CheckValue<IkReal> x875=IKPowWithIntegerCheck(cj3,-1);
if(!x875.valid){
continue;
}
if( IKabs(((x874.value)*((((r10*sj4*x873))+((r01*sj4*x870))+((r11*sj4*x872))+((r00*sj4*x871))+((cj4*r12*sj0))+((cj0*cj4*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x875.value)*((((r11*x871))+(((-1.0)*r01*x873))+(((-1.0)*r10*x870))+((r00*x872)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x874.value)*((((r10*sj4*x873))+((r01*sj4*x870))+((r11*sj4*x872))+((r00*sj4*x871))+((cj4*r12*sj0))+((cj0*cj4*r02))))))+IKsqr(((x875.value)*((((r11*x871))+(((-1.0)*r01*x873))+(((-1.0)*r10*x870))+((r00*x872))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x874.value)*((((r10*sj4*x873))+((r01*sj4*x870))+((r11*sj4*x872))+((r00*sj4*x871))+((cj4*r12*sj0))+((cj0*cj4*r02))))), ((x875.value)*((((r11*x871))+(((-1.0)*r01*x873))+(((-1.0)*r10*x870))+((r00*x872))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x876=(cj5*r00);
IkReal x877=(cj0*x876);
IkReal x878=(cj5*r10);
IkReal x879=(sj0*x878);
IkReal x880=IKsin(j2);
IkReal x881=((1.0)*x880);
IkReal x882=((1.0)*cj0);
IkReal x883=(r01*sj5);
IkReal x884=((1.0)*sj0);
IkReal x885=(cj0*r11);
IkReal x886=(sj5*x885);
IkReal x887=(sj0*x876);
IkReal x888=IKcos(j2);
IkReal x889=((1.0)*x888);
IkReal x890=(cj4*r02);
IkReal x891=(cj4*r12);
IkReal x892=(cj0*cj5*r01);
IkReal x893=(cj0*r00*sj5);
IkReal x894=(cj5*sj0*sj4);
IkReal x895=(sj0*sj4*sj5);
IkReal x896=(r12*sj4);
IkReal x897=(r02*sj4);
IkReal x898=(cj4*cj5*sj0);
IkReal x899=(cj4*sj0*sj5);
IkReal x900=(cj5*r11);
IkReal x901=((1.0)*cj0*cj4);
IkReal x902=(r10*sj5);
IkReal x903=((1.0)*cj0*sj4);
IkReal x904=((0.078)*sj3);
IkReal x905=((1.1e-7)*cj5);
IkReal x906=(cj0*r01);
IkReal x907=((1.1e-7)*cj0*sj5);
IkReal x908=((1.1e-7)*cj5*sj0);
IkReal x909=((1.1e-7)*sj0*sj5);
IkReal x910=((0.00025)*sj0*sj5);
evalcond[0]=(x877+x879+(((-1.0)*cj3*x881))+(((-1.0)*r11*sj5*x884))+(((-1.0)*x882*x883)));
evalcond[1]=((((-1.0)*x883*x884))+x886+(((-1.0)*cj3*x889))+x887+(((-1.0)*x878*x882)));
evalcond[2]=(((sj4*x893))+((r11*x894))+(((-1.0)*sj3*x881))+((sj0*x891))+((r10*x895))+((cj0*x890))+((sj4*x892)));
evalcond[3]=(((cj0*x896))+(((-1.0)*x900*x901))+(((-1.0)*x884*x897))+((r00*x899))+((r01*x898))+(((-1.0)*x901*x902))+x880);
evalcond[4]=(((r10*x899))+((cj4*x892))+(((-1.0)*x882*x897))+((cj4*x893))+(((-1.0)*x884*x896))+((r11*x898))+(((-1.0)*x889)));
evalcond[5]=(((sj0*x890))+((r01*x894))+(((-1.0)*sj3*x889))+((r00*x895))+(((-1.0)*x902*x903))+(((-1.0)*x900*x903))+(((-1.0)*x882*x891)));
evalcond[6]=((0.00945)+((r11*x910))+(((-1.0)*x905*x906))+(((-1.0)*r00*x907))+((cj0*px))+(((0.00025)*sj5*x906))+((py*sj0))+(((-0.00025)*x879))+(((-1.0)*x880*x904))+(((-0.00025)*x888))+(((-0.00025)*x877))+(((-1.0)*r11*x908))+(((-1.0)*r10*x909)));
evalcond[7]=((((-1.0)*r00*x909))+((px*sj0))+(((0.00025)*cj0*x878))+(((0.00025)*x880))+(((-1.0)*py*x882))+(((-0.00025)*x887))+(((-1.0)*x888*x904))+((r01*x910))+((x885*x905))+((r10*x907))+(((-1.0)*r01*x908))+(((-0.00025)*x886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x911=(cj0*cj5);
IkReal x912=(cj5*sj0);
IkReal x913=((1.0)*cj0);
IkReal x914=((1.0)*sj0);
IkReal x915=(cj4*sj5);
CheckValue<IkReal> x916=IKPowWithIntegerCheck(cj3,-1);
if(!x916.valid){
continue;
}
if( IKabs(((x916.value)*((((r10*x912))+(((-1.0)*r11*sj5*x914))+((r00*x911))+(((-1.0)*r01*sj5*x913)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r01*x911))+(((-1.0)*r02*sj4*x913))+((cj0*r00*x915))+(((-1.0)*r12*sj4*x914))+((r10*sj0*x915))+((cj4*r11*x912)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x916.value)*((((r10*x912))+(((-1.0)*r11*sj5*x914))+((r00*x911))+(((-1.0)*r01*sj5*x913))))))+IKsqr((((cj4*r01*x911))+(((-1.0)*r02*sj4*x913))+((cj0*r00*x915))+(((-1.0)*r12*sj4*x914))+((r10*sj0*x915))+((cj4*r11*x912))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x916.value)*((((r10*x912))+(((-1.0)*r11*sj5*x914))+((r00*x911))+(((-1.0)*r01*sj5*x913))))), (((cj4*r01*x911))+(((-1.0)*r02*sj4*x913))+((cj0*r00*x915))+(((-1.0)*r12*sj4*x914))+((r10*sj0*x915))+((cj4*r11*x912))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x917=(cj5*r00);
IkReal x918=(cj0*x917);
IkReal x919=(cj5*r10);
IkReal x920=(sj0*x919);
IkReal x921=IKsin(j2);
IkReal x922=((1.0)*x921);
IkReal x923=((1.0)*cj0);
IkReal x924=(r01*sj5);
IkReal x925=((1.0)*sj0);
IkReal x926=(cj0*r11);
IkReal x927=(sj5*x926);
IkReal x928=(sj0*x917);
IkReal x929=IKcos(j2);
IkReal x930=((1.0)*x929);
IkReal x931=(cj4*r02);
IkReal x932=(cj4*r12);
IkReal x933=(cj0*cj5*r01);
IkReal x934=(cj0*r00*sj5);
IkReal x935=(cj5*sj0*sj4);
IkReal x936=(sj0*sj4*sj5);
IkReal x937=(r12*sj4);
IkReal x938=(r02*sj4);
IkReal x939=(cj4*cj5*sj0);
IkReal x940=(cj4*sj0*sj5);
IkReal x941=(cj5*r11);
IkReal x942=((1.0)*cj0*cj4);
IkReal x943=(r10*sj5);
IkReal x944=((1.0)*cj0*sj4);
IkReal x945=((0.078)*sj3);
IkReal x946=((1.1e-7)*cj5);
IkReal x947=(cj0*r01);
IkReal x948=((1.1e-7)*cj0*sj5);
IkReal x949=((1.1e-7)*cj5*sj0);
IkReal x950=((1.1e-7)*sj0*sj5);
IkReal x951=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*cj3*x922))+(((-1.0)*x923*x924))+x920+(((-1.0)*r11*sj5*x925))+x918);
evalcond[1]=((((-1.0)*cj3*x930))+(((-1.0)*x924*x925))+x928+x927+(((-1.0)*x919*x923)));
evalcond[2]=(((sj4*x933))+((cj0*x931))+(((-1.0)*sj3*x922))+((r11*x935))+((sj4*x934))+((sj0*x932))+((r10*x936)));
evalcond[3]=(x921+(((-1.0)*x942*x943))+(((-1.0)*x941*x942))+((r01*x939))+(((-1.0)*x925*x938))+((cj0*x937))+((r00*x940)));
evalcond[4]=(((cj4*x933))+(((-1.0)*x925*x937))+((r10*x940))+((r11*x939))+(((-1.0)*x930))+(((-1.0)*x923*x938))+((cj4*x934)));
evalcond[5]=((((-1.0)*x941*x944))+(((-1.0)*x943*x944))+((r00*x936))+(((-1.0)*x923*x932))+(((-1.0)*sj3*x930))+((sj0*x931))+((r01*x935)));
evalcond[6]=((0.00945)+(((-1.0)*x921*x945))+(((-1.0)*r10*x950))+((cj0*px))+((py*sj0))+(((-0.00025)*x920))+(((-1.0)*x946*x947))+(((-1.0)*r00*x948))+(((0.00025)*sj5*x947))+(((-0.00025)*x918))+((r11*x951))+(((-1.0)*r11*x949))+(((-0.00025)*x929)));
evalcond[7]=(((x926*x946))+(((-1.0)*r00*x950))+(((0.00025)*cj0*x919))+((r10*x948))+(((-1.0)*x929*x945))+((px*sj0))+(((-0.00025)*x927))+(((0.00025)*x921))+(((-1.0)*py*x923))+(((-0.00025)*x928))+(((-1.0)*r01*x949))+((r01*x951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x952=(cj5*r00);
IkReal x953=(cj5*r10);
IkReal x954=((1.0)*r01);
IkReal x955=(cj0*sj5);
IkReal x956=(sj0*sj5);
CheckValue<IkReal> x957=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x957.valid){
continue;
}
CheckValue<IkReal> x958 = IKatan2WithCheck(IkReal(((((-1.0)*x954*x955))+(((-1.0)*r11*x956))+((cj0*x952))+((sj0*x953)))),IkReal(((((-1.0)*x954*x956))+((sj0*x952))+(((-1.0)*cj0*x953))+((r11*x955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x958.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x957.value)))+(x958.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x959=(cj5*r00);
IkReal x960=(cj0*x959);
IkReal x961=(cj5*r10);
IkReal x962=(sj0*x961);
IkReal x963=IKsin(j2);
IkReal x964=((1.0)*x963);
IkReal x965=((1.0)*cj0);
IkReal x966=(r01*sj5);
IkReal x967=((1.0)*sj0);
IkReal x968=(cj0*r11);
IkReal x969=(sj5*x968);
IkReal x970=(sj0*x959);
IkReal x971=IKcos(j2);
IkReal x972=((1.0)*x971);
IkReal x973=(cj4*r02);
IkReal x974=(cj4*r12);
IkReal x975=(cj0*cj5*r01);
IkReal x976=(cj0*r00*sj5);
IkReal x977=(cj5*sj0*sj4);
IkReal x978=(sj0*sj4*sj5);
IkReal x979=(r12*sj4);
IkReal x980=(r02*sj4);
IkReal x981=(cj4*cj5*sj0);
IkReal x982=(cj4*sj0*sj5);
IkReal x983=(cj5*r11);
IkReal x984=((1.0)*cj0*cj4);
IkReal x985=(r10*sj5);
IkReal x986=((1.0)*cj0*sj4);
IkReal x987=((0.078)*sj3);
IkReal x988=((1.1e-7)*cj5);
IkReal x989=(cj0*r01);
IkReal x990=((1.1e-7)*cj0*sj5);
IkReal x991=((1.1e-7)*cj5*sj0);
IkReal x992=((1.1e-7)*sj0*sj5);
IkReal x993=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*cj3*x964))+x960+x962+(((-1.0)*x965*x966))+(((-1.0)*r11*sj5*x967)));
evalcond[1]=(x970+x969+(((-1.0)*x961*x965))+(((-1.0)*x966*x967))+(((-1.0)*cj3*x972)));
evalcond[2]=(((sj0*x974))+(((-1.0)*sj3*x964))+((r11*x977))+((sj4*x975))+((r10*x978))+((cj0*x973))+((sj4*x976)));
evalcond[3]=(x963+((r01*x981))+(((-1.0)*x983*x984))+((cj0*x979))+(((-1.0)*x984*x985))+((r00*x982))+(((-1.0)*x967*x980)));
evalcond[4]=((((-1.0)*x965*x980))+((r10*x982))+((cj4*x976))+(((-1.0)*x972))+((cj4*x975))+(((-1.0)*x967*x979))+((r11*x981)));
evalcond[5]=((((-1.0)*x983*x986))+((r01*x977))+((sj0*x973))+(((-1.0)*x985*x986))+((r00*x978))+(((-1.0)*sj3*x972))+(((-1.0)*x965*x974)));
evalcond[6]=((0.00945)+(((-1.0)*r10*x992))+(((-1.0)*r11*x991))+((cj0*px))+(((-1.0)*r00*x990))+((py*sj0))+(((-1.0)*x988*x989))+(((-0.00025)*x971))+((r11*x993))+(((-0.00025)*x962))+(((0.00025)*sj5*x989))+(((-1.0)*x963*x987))+(((-0.00025)*x960)));
evalcond[7]=((((-1.0)*r01*x991))+(((-1.0)*r00*x992))+(((-1.0)*py*x965))+((px*sj0))+((x968*x988))+(((-0.00025)*x970))+(((-1.0)*x971*x987))+(((-0.00025)*x969))+(((0.00025)*x963))+(((0.00025)*cj0*x961))+((r01*x993))+((r10*x990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x994=((1.0)*r21);
if( IKabs(((((-1.0)*sj5*x994))+((cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*sj4*x994))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x994))+((cj5*r20))))+IKsqr(((((-1.0)*cj5*sj4*x994))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj5*x994))+((cj5*r20))), ((((-1.0)*cj5*sj4*x994))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x995=(r21*sj5);
IkReal x996=(cj5*r20);
IkReal x997=IKcos(j3);
IkReal x998=((1.0)*sj4);
IkReal x999=(cj5*r21);
IkReal x1000=(r20*sj5);
evalcond[0]=((((-1.0)*x996))+x995+(IKsin(j3)));
evalcond[1]=((((-1.0)*(1.0)*cj4*r22))+(((-1.0)*x1000*x998))+(((-1.0)*x998*x999))+(((-1.0)*x997)));
evalcond[2]=((-0.1515)+(((-0.00025)*x995))+(((-0.078)*x997))+(((0.00025)*x996))+(((-1.0)*(1.0)*pz))+(((1.1e-7)*x1000))+(((1.1e-7)*x999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1001=(cj0*cj5);
IkReal x1002=(cj5*sj0);
IkReal x1003=((1.0)*cj0);
IkReal x1004=(r01*sj5);
IkReal x1005=(r11*sj5);
j2eval[0]=cj3;
j2eval[1]=((IKabs(((((-1.0)*r00*x1002))+((sj0*x1004))+((r10*x1001))+(((-1.0)*x1003*x1005)))))+(IKabs((((r00*x1001))+(((-1.0)*sj0*x1005))+(((-1.0)*x1003*x1004))+((r10*x1002))))));
j2eval[2]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2eval[0]=sj3;
j2eval[1]=cj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1006=(cj0*cj5);
IkReal x1007=(cj5*sj0);
IkReal x1008=((1.0)*cj0);
IkReal x1009=(r01*sj5);
IkReal x1010=(r11*sj5);
if( IKabs((((r10*x1007))+(((-1.0)*sj0*x1010))+((r00*x1006))+(((-1.0)*x1008*x1009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1006))+((sj0*x1009))+(((-1.0)*r00*x1007))+(((-1.0)*x1008*x1010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1007))+(((-1.0)*sj0*x1010))+((r00*x1006))+(((-1.0)*x1008*x1009))))+IKsqr((((r10*x1006))+((sj0*x1009))+(((-1.0)*r00*x1007))+(((-1.0)*x1008*x1010))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*x1007))+(((-1.0)*sj0*x1010))+((r00*x1006))+(((-1.0)*x1008*x1009))), (((r10*x1006))+((sj0*x1009))+(((-1.0)*r00*x1007))+(((-1.0)*x1008*x1010))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1011=IKcos(j2);
IkReal x1012=(cj0*r11);
IkReal x1013=(sj5*x1012);
IkReal x1014=(cj5*r00);
IkReal x1015=(sj0*x1014);
IkReal x1016=((1.0)*cj0);
IkReal x1017=(cj5*r10);
IkReal x1018=((1.0)*sj0);
IkReal x1019=(r01*sj5);
IkReal x1020=(cj0*x1014);
IkReal x1021=(sj0*x1017);
IkReal x1022=IKsin(j2);
IkReal x1023=((-1.0)*x1022);
IkReal x1024=(r02*sj4);
IkReal x1025=(r12*sj4);
IkReal x1026=(cj0*r01);
IkReal x1027=(cj4*cj5);
IkReal x1028=(cj4*r00*sj5);
IkReal x1029=(cj4*cj5*sj0);
IkReal x1030=(cj4*r10*sj5);
IkReal x1031=((1.1e-7)*cj5);
IkReal x1032=((1.1e-7)*cj0*sj5);
IkReal x1033=((1.1e-7)*cj5*sj0);
IkReal x1034=((1.1e-7)*sj0*sj5);
IkReal x1035=((0.00025)*sj0*sj5);
evalcond[0]=(x1013+x1015+(((-1.0)*x1016*x1017))+x1011+(((-1.0)*x1018*x1019)));
evalcond[1]=(x1023+x1021+(((-1.0)*x1016*x1019))+(((-1.0)*r11*sj5*x1018))+x1020);
evalcond[2]=((((-1.0)*x1016*x1024))+(((-1.0)*x1018*x1025))+((sj0*x1030))+((r11*x1029))+((cj0*x1028))+(((-1.0)*x1011))+((x1026*x1027)));
evalcond[3]=(x1023+(((-1.0)*x1018*x1024))+((sj0*x1028))+(((-1.0)*x1016*x1030))+((cj0*x1025))+((r01*x1029))+(((-1.0)*cj0*r11*x1027)));
evalcond[4]=((0.00945)+((cj0*px))+((py*sj0))+(((-0.00025)*x1021))+(((-1.0)*r10*x1034))+(((-1.0)*x1026*x1031))+(((-0.00025)*x1020))+(((0.00025)*sj5*x1026))+(((-0.00025)*x1011))+((r11*x1035))+(((-1.0)*r00*x1032))+(((-1.0)*r11*x1033)));
evalcond[5]=((((-1.0)*r01*x1033))+(((-0.00025)*x1013))+((r01*x1035))+(((-1.0)*py*x1016))+((px*sj0))+(((-0.00025)*x1022))+((x1012*x1031))+(((0.00025)*cj0*x1017))+(((-1.0)*r00*x1034))+((r10*x1032))+(((-0.00025)*x1015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1036=(cj0*sj5);
IkReal x1037=(sj0*sj5);
IkReal x1038=((1.0)*cj0);
IkReal x1039=(cj5*r00);
IkReal x1040=(cj5*r10);
if( IKabs(((((-1.0)*x1038*x1039))+((r01*x1036))+(((-1.0)*sj0*x1040))+((r11*x1037)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1037))+((sj0*x1039))+(((-1.0)*x1038*x1040))+((r11*x1036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1038*x1039))+((r01*x1036))+(((-1.0)*sj0*x1040))+((r11*x1037))))+IKsqr(((((-1.0)*r01*x1037))+((sj0*x1039))+(((-1.0)*x1038*x1040))+((r11*x1036))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1038*x1039))+((r01*x1036))+(((-1.0)*sj0*x1040))+((r11*x1037))), ((((-1.0)*r01*x1037))+((sj0*x1039))+(((-1.0)*x1038*x1040))+((r11*x1036))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1041=IKsin(j2);
IkReal x1042=(cj5*r00);
IkReal x1043=(cj0*x1042);
IkReal x1044=(cj5*r10);
IkReal x1045=(sj0*x1044);
IkReal x1046=((1.0)*cj0);
IkReal x1047=(r01*sj5);
IkReal x1048=((1.0)*sj0);
IkReal x1049=(cj0*r11);
IkReal x1050=(sj5*x1049);
IkReal x1051=(sj0*x1042);
IkReal x1052=IKcos(j2);
IkReal x1053=((-1.0)*x1052);
IkReal x1054=(r02*sj4);
IkReal x1055=(r12*sj4);
IkReal x1056=(cj0*r01);
IkReal x1057=(cj4*cj5);
IkReal x1058=(cj4*r00*sj5);
IkReal x1059=(cj4*cj5*sj0);
IkReal x1060=(cj4*r10*sj5);
IkReal x1061=((1.1e-7)*cj5);
IkReal x1062=((1.1e-7)*cj0*sj5);
IkReal x1063=((1.1e-7)*cj5*sj0);
IkReal x1064=((1.1e-7)*sj0*sj5);
IkReal x1065=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x1046*x1047))+(((-1.0)*r11*sj5*x1048))+x1041+x1045+x1043);
evalcond[1]=((((-1.0)*x1044*x1046))+(((-1.0)*x1047*x1048))+x1050+x1053+x1051);
evalcond[2]=((((-1.0)*x1046*x1054))+((sj0*x1060))+(((-1.0)*x1048*x1055))+x1053+((x1056*x1057))+((cj0*x1058))+((r11*x1059)));
evalcond[3]=((((-1.0)*cj0*r11*x1057))+(((-1.0)*x1046*x1060))+(((-1.0)*x1041))+((cj0*x1055))+((r01*x1059))+(((-1.0)*x1048*x1054))+((sj0*x1058)));
evalcond[4]=((0.00945)+(((-1.0)*r11*x1063))+((cj0*px))+(((0.00025)*sj5*x1056))+((py*sj0))+((r11*x1065))+(((-1.0)*x1056*x1061))+(((-0.00025)*x1043))+(((-0.00025)*x1045))+(((-1.0)*r00*x1062))+(((-1.0)*r10*x1064))+(((-0.00025)*x1052)));
evalcond[5]=((((-0.00025)*x1041))+(((-1.0)*r01*x1063))+(((-0.00025)*x1050))+(((-1.0)*r00*x1064))+((px*sj0))+((r10*x1062))+(((-1.0)*py*x1046))+(((0.00025)*cj0*x1044))+((x1049*x1061))+(((-0.00025)*x1051))+((r01*x1065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1066=(cj0*r02);
IkReal x1067=(r12*sj0);
IkReal x1068=(cj0*sj4);
IkReal x1069=(cj5*r01);
IkReal x1070=(r00*sj5);
IkReal x1071=(cj5*r11);
IkReal x1072=(sj0*sj4);
IkReal x1073=(r10*sj5);
IkReal x1074=((1.0)*sj4);
IkReal x1075=(cj0*cj4);
IkReal x1076=(cj4*sj0);
if( IKabs((((x1068*x1070))+((x1072*x1073))+((cj4*x1067))+((cj4*x1066))+((x1068*x1069))+((x1071*x1072)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1071*x1076))+((x1070*x1075))+((x1073*x1076))+(((-1.0)*x1067*x1074))+(((-1.0)*x1066*x1074))+((x1069*x1075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1068*x1070))+((x1072*x1073))+((cj4*x1067))+((cj4*x1066))+((x1068*x1069))+((x1071*x1072))))+IKsqr((((x1071*x1076))+((x1070*x1075))+((x1073*x1076))+(((-1.0)*x1067*x1074))+(((-1.0)*x1066*x1074))+((x1069*x1075))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1068*x1070))+((x1072*x1073))+((cj4*x1067))+((cj4*x1066))+((x1068*x1069))+((x1071*x1072))), (((x1071*x1076))+((x1070*x1075))+((x1073*x1076))+(((-1.0)*x1067*x1074))+(((-1.0)*x1066*x1074))+((x1069*x1075))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1077=(cj4*r02);
IkReal x1078=(cj4*r12);
IkReal x1079=IKsin(j2);
IkReal x1080=((-1.0)*x1079);
IkReal x1081=(cj0*cj5*r01);
IkReal x1082=(cj0*r00*sj5);
IkReal x1083=(cj5*sj0*sj4);
IkReal x1084=(sj0*sj4*sj5);
IkReal x1085=IKcos(j2);
IkReal x1086=((1.0)*cj0);
IkReal x1087=(cj5*r11);
IkReal x1088=((1.0)*cj0*sj4);
IkReal x1089=(r10*sj5);
IkReal x1090=(r02*sj4);
IkReal x1091=((1.0)*sj0);
IkReal x1092=(r12*sj4);
IkReal x1093=(cj4*cj5*sj0);
IkReal x1094=(cj4*sj0*sj5);
IkReal x1095=((1.0)*cj0*cj4);
IkReal x1096=((0.00025)*cj0*cj5);
IkReal x1097=((1.1e-7)*cj0*cj5);
IkReal x1098=((1.1e-7)*cj0*sj5);
IkReal x1099=((0.00025)*cj0*sj5);
IkReal x1100=((0.00025)*cj5*sj0);
IkReal x1101=((1.1e-7)*cj5*sj0);
IkReal x1102=((1.1e-7)*sj0*sj5);
IkReal x1103=((0.00025)*sj0*sj5);
evalcond[0]=(((r10*x1084))+x1080+((sj4*x1081))+((sj4*x1082))+((sj0*x1078))+((cj0*x1077))+((r11*x1083)));
evalcond[1]=((((-1.0)*x1078*x1086))+(((-1.0)*x1088*x1089))+((r01*x1083))+((sj0*x1077))+((r00*x1084))+(((-1.0)*x1087*x1088))+x1085);
evalcond[2]=((((-1.0)*x1086*x1090))+(((-1.0)*x1091*x1092))+(((-1.0)*x1085))+((r11*x1093))+((cj4*x1081))+((r10*x1094))+((cj4*x1082)));
evalcond[3]=(((r00*x1094))+x1080+(((-1.0)*x1090*x1091))+(((-1.0)*x1089*x1095))+((r01*x1093))+((cj0*x1092))+(((-1.0)*x1087*x1095)));
evalcond[4]=((0.00945)+(((-1.0)*r00*x1098))+(((-1.0)*r01*x1097))+((cj0*px))+((py*sj0))+((r01*x1099))+(((-1.0)*r11*x1101))+(((-0.00025)*x1085))+((r11*x1103))+(((-1.0)*r10*x1100))+(((-1.0)*r10*x1102))+(((-1.0)*r00*x1096))+(((-0.078)*x1079)));
evalcond[5]=((((-1.0)*r00*x1102))+((px*sj0))+(((-1.0)*r00*x1100))+((r01*x1103))+(((-1.0)*r01*x1101))+(((-1.0)*py*x1086))+(((-1.0)*r11*x1099))+(((0.078)*x1085))+((r11*x1097))+(((-0.00025)*x1079))+((r10*x1096))+((r10*x1098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1104=((1.0)*cj0*r02);
IkReal x1105=((1.0)*r12*sj0);
IkReal x1106=(cj5*r01);
IkReal x1107=((1.0)*cj0*sj4);
IkReal x1108=(r00*sj5);
IkReal x1109=(cj5*r11);
IkReal x1110=((1.0)*sj0*sj4);
IkReal x1111=(r10*sj5);
IkReal x1112=(cj0*cj4);
IkReal x1113=(cj4*sj0);
if( IKabs(((((-1.0)*x1107*x1108))+(((-1.0)*x1106*x1107))+(((-1.0)*x1110*x1111))+(((-1.0)*cj4*x1105))+(((-1.0)*cj4*x1104))+(((-1.0)*x1109*x1110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1106*x1112))+((x1108*x1112))+((x1111*x1113))+(((-1.0)*sj4*x1104))+(((-1.0)*sj4*x1105))+((x1109*x1113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1107*x1108))+(((-1.0)*x1106*x1107))+(((-1.0)*x1110*x1111))+(((-1.0)*cj4*x1105))+(((-1.0)*cj4*x1104))+(((-1.0)*x1109*x1110))))+IKsqr((((x1106*x1112))+((x1108*x1112))+((x1111*x1113))+(((-1.0)*sj4*x1104))+(((-1.0)*sj4*x1105))+((x1109*x1113))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1107*x1108))+(((-1.0)*x1106*x1107))+(((-1.0)*x1110*x1111))+(((-1.0)*cj4*x1105))+(((-1.0)*cj4*x1104))+(((-1.0)*x1109*x1110))), (((x1106*x1112))+((x1108*x1112))+((x1111*x1113))+(((-1.0)*sj4*x1104))+(((-1.0)*sj4*x1105))+((x1109*x1113))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1114=IKsin(j2);
IkReal x1115=(cj4*r02);
IkReal x1116=(cj4*r12);
IkReal x1117=(cj0*cj5*r01);
IkReal x1118=(cj0*r00*sj5);
IkReal x1119=(cj5*sj0*sj4);
IkReal x1120=(sj0*sj4*sj5);
IkReal x1121=IKcos(j2);
IkReal x1122=((-1.0)*x1121);
IkReal x1123=((1.0)*cj0);
IkReal x1124=(r02*sj4);
IkReal x1125=((1.0)*sj0);
IkReal x1126=(r12*sj4);
IkReal x1127=(cj4*cj5*sj0);
IkReal x1128=(cj4*sj0*sj5);
IkReal x1129=(cj5*r11);
IkReal x1130=((1.0)*cj0*cj4);
IkReal x1131=(r10*sj5);
IkReal x1132=((1.0)*cj0*sj4);
IkReal x1133=((0.00025)*cj0*cj5);
IkReal x1134=((1.1e-7)*cj0*cj5);
IkReal x1135=((1.1e-7)*cj0*sj5);
IkReal x1136=((0.00025)*cj0*sj5);
IkReal x1137=((0.00025)*cj5*sj0);
IkReal x1138=((1.1e-7)*cj5*sj0);
IkReal x1139=((1.1e-7)*sj0*sj5);
IkReal x1140=((0.00025)*sj0*sj5);
evalcond[0]=(((r11*x1119))+((sj4*x1118))+x1114+((sj4*x1117))+((r10*x1120))+((sj0*x1116))+((cj0*x1115)));
evalcond[1]=(((r11*x1127))+(((-1.0)*x1125*x1126))+(((-1.0)*x1123*x1124))+((cj4*x1117))+x1122+((cj4*x1118))+((r10*x1128)));
evalcond[2]=(((r01*x1127))+(((-1.0)*x1114))+((cj0*x1126))+(((-1.0)*x1130*x1131))+(((-1.0)*x1124*x1125))+((r00*x1128))+(((-1.0)*x1129*x1130)));
evalcond[3]=((((-1.0)*x1129*x1132))+(((-1.0)*x1116*x1123))+x1122+(((-1.0)*x1131*x1132))+((sj0*x1115))+((r01*x1119))+((r00*x1120)));
evalcond[4]=((0.00945)+(((-1.0)*r01*x1134))+((r01*x1136))+(((0.078)*x1114))+((cj0*px))+((py*sj0))+(((-1.0)*r10*x1139))+(((-1.0)*r11*x1138))+(((-1.0)*r10*x1137))+(((-0.00025)*x1121))+(((-1.0)*r00*x1133))+((r11*x1140))+(((-1.0)*r00*x1135)));
evalcond[5]=(((r10*x1133))+((r01*x1140))+(((-0.078)*x1121))+((px*sj0))+((r10*x1135))+(((-1.0)*py*x1123))+(((-1.0)*r01*x1138))+((r11*x1134))+(((-0.00025)*x1114))+(((-1.0)*r00*x1137))+(((-1.0)*r00*x1139))+(((-1.0)*r11*x1136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1141=(cj0*cj5);
IkReal x1142=(cj0*sj5);
IkReal x1143=(cj5*sj0);
IkReal x1144=(sj0*sj5);
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(sj3,-1);
if(!x1145.valid){
continue;
}
CheckValue<IkReal> x1146=IKPowWithIntegerCheck(cj3,-1);
if(!x1146.valid){
continue;
}
if( IKabs(((x1145.value)*((((r10*sj4*x1144))+((r01*sj4*x1141))+((r11*sj4*x1143))+((cj4*r12*sj0))+((cj0*cj4*r02))+((r00*sj4*x1142)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1146.value)*(((((-1.0)*r00*x1143))+(((-1.0)*r11*x1142))+((r01*x1144))+((r10*x1141)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1145.value)*((((r10*sj4*x1144))+((r01*sj4*x1141))+((r11*sj4*x1143))+((cj4*r12*sj0))+((cj0*cj4*r02))+((r00*sj4*x1142))))))+IKsqr(((x1146.value)*(((((-1.0)*r00*x1143))+(((-1.0)*r11*x1142))+((r01*x1144))+((r10*x1141))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1145.value)*((((r10*sj4*x1144))+((r01*sj4*x1141))+((r11*sj4*x1143))+((cj4*r12*sj0))+((cj0*cj4*r02))+((r00*sj4*x1142))))), ((x1146.value)*(((((-1.0)*r00*x1143))+(((-1.0)*r11*x1142))+((r01*x1144))+((r10*x1141))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1147=IKcos(j2);
IkReal x1148=(cj0*r11);
IkReal x1149=(sj5*x1148);
IkReal x1150=(cj5*r00);
IkReal x1151=(sj0*x1150);
IkReal x1152=((1.0)*cj0);
IkReal x1153=(cj5*r10);
IkReal x1154=((1.0)*sj0);
IkReal x1155=(r01*sj5);
IkReal x1156=(cj0*x1150);
IkReal x1157=(sj0*x1153);
IkReal x1158=IKsin(j2);
IkReal x1159=((1.0)*x1158);
IkReal x1160=(cj4*r02);
IkReal x1161=(cj4*r12);
IkReal x1162=(cj0*cj5*r01);
IkReal x1163=(cj0*r00*sj5);
IkReal x1164=(cj5*sj0*sj4);
IkReal x1165=(sj0*sj4*sj5);
IkReal x1166=(r02*sj4);
IkReal x1167=(r12*sj4);
IkReal x1168=(cj4*cj5*sj0);
IkReal x1169=(cj4*sj0*sj5);
IkReal x1170=(cj5*r11);
IkReal x1171=((1.0)*cj0*cj4);
IkReal x1172=(r10*sj5);
IkReal x1173=(sj3*x1147);
IkReal x1174=((1.0)*cj0*sj4);
IkReal x1175=((1.1e-7)*cj5);
IkReal x1176=(cj0*r01);
IkReal x1177=((1.1e-7)*cj0*sj5);
IkReal x1178=((1.1e-7)*cj5*sj0);
IkReal x1179=((1.1e-7)*sj0*sj5);
IkReal x1180=((0.00025)*sj0*sj5);
evalcond[0]=(x1149+(((-1.0)*x1152*x1153))+x1151+((cj3*x1147))+(((-1.0)*x1154*x1155)));
evalcond[1]=((((-1.0)*r11*sj5*x1154))+x1156+(((-1.0)*cj3*x1159))+x1157+(((-1.0)*x1152*x1155)));
evalcond[2]=(((sj4*x1162))+((r10*x1165))+((sj0*x1161))+((r11*x1164))+(((-1.0)*sj3*x1159))+((cj0*x1160))+((sj4*x1163)));
evalcond[3]=(((r11*x1168))+(((-1.0)*x1152*x1166))+(((-1.0)*x1147))+((cj4*x1162))+((r10*x1169))+((cj4*x1163))+(((-1.0)*x1154*x1167)));
evalcond[4]=(((cj0*x1167))+(((-1.0)*x1154*x1166))+(((-1.0)*x1171*x1172))+((r00*x1169))+((r01*x1168))+(((-1.0)*x1170*x1171))+(((-1.0)*x1159)));
evalcond[5]=((((-1.0)*x1152*x1161))+((sj0*x1160))+(((-1.0)*x1172*x1174))+x1173+(((-1.0)*x1170*x1174))+((r01*x1164))+((r00*x1165)));
evalcond[6]=((0.00945)+(((-0.00025)*x1147))+((cj0*px))+((py*sj0))+(((-1.0)*x1175*x1176))+(((-1.0)*r10*x1179))+(((-0.00025)*x1157))+(((0.00025)*sj5*x1176))+(((-1.0)*r11*x1178))+(((-0.078)*sj3*x1158))+(((-0.00025)*x1156))+(((-1.0)*r00*x1177))+((r11*x1180)));
evalcond[7]=((((-1.0)*r01*x1178))+(((-1.0)*r00*x1179))+((px*sj0))+((r10*x1177))+(((-0.00025)*x1158))+(((-0.00025)*x1149))+((r01*x1180))+(((-0.00025)*x1151))+(((-1.0)*py*x1152))+((x1148*x1175))+(((0.078)*x1173))+(((0.00025)*cj0*x1153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1181=(cj0*cj5);
IkReal x1182=(cj5*sj0);
IkReal x1183=((1.0)*cj0);
IkReal x1184=((1.0)*sj0);
IkReal x1185=(cj4*sj5);
CheckValue<IkReal> x1186=IKPowWithIntegerCheck(cj3,-1);
if(!x1186.valid){
continue;
}
if( IKabs(((x1186.value)*(((((-1.0)*r11*sj5*x1184))+(((-1.0)*r01*sj5*x1183))+((r00*x1181))+((r10*x1182)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj0*x1185))+(((-1.0)*r02*sj4*x1183))+(((-1.0)*r12*sj4*x1184))+((cj4*r11*x1182))+((cj0*r00*x1185))+((cj4*r01*x1181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1186.value)*(((((-1.0)*r11*sj5*x1184))+(((-1.0)*r01*sj5*x1183))+((r00*x1181))+((r10*x1182))))))+IKsqr((((r10*sj0*x1185))+(((-1.0)*r02*sj4*x1183))+(((-1.0)*r12*sj4*x1184))+((cj4*r11*x1182))+((cj0*r00*x1185))+((cj4*r01*x1181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1186.value)*(((((-1.0)*r11*sj5*x1184))+(((-1.0)*r01*sj5*x1183))+((r00*x1181))+((r10*x1182))))), (((r10*sj0*x1185))+(((-1.0)*r02*sj4*x1183))+(((-1.0)*r12*sj4*x1184))+((cj4*r11*x1182))+((cj0*r00*x1185))+((cj4*r01*x1181))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1187=IKcos(j2);
IkReal x1188=(cj0*r11);
IkReal x1189=(sj5*x1188);
IkReal x1190=(cj5*r00);
IkReal x1191=(sj0*x1190);
IkReal x1192=((1.0)*cj0);
IkReal x1193=(cj5*r10);
IkReal x1194=((1.0)*sj0);
IkReal x1195=(r01*sj5);
IkReal x1196=(cj0*x1190);
IkReal x1197=(sj0*x1193);
IkReal x1198=IKsin(j2);
IkReal x1199=((1.0)*x1198);
IkReal x1200=(cj4*r02);
IkReal x1201=(cj4*r12);
IkReal x1202=(cj0*cj5*r01);
IkReal x1203=(cj0*r00*sj5);
IkReal x1204=(cj5*sj0*sj4);
IkReal x1205=(sj0*sj4*sj5);
IkReal x1206=(r02*sj4);
IkReal x1207=(r12*sj4);
IkReal x1208=(cj4*cj5*sj0);
IkReal x1209=(cj4*sj0*sj5);
IkReal x1210=(cj5*r11);
IkReal x1211=((1.0)*cj0*cj4);
IkReal x1212=(r10*sj5);
IkReal x1213=(sj3*x1187);
IkReal x1214=((1.0)*cj0*sj4);
IkReal x1215=((1.1e-7)*cj5);
IkReal x1216=(cj0*r01);
IkReal x1217=((1.1e-7)*cj0*sj5);
IkReal x1218=((1.1e-7)*cj5*sj0);
IkReal x1219=((1.1e-7)*sj0*sj5);
IkReal x1220=((0.00025)*sj0*sj5);
evalcond[0]=(((cj3*x1187))+x1191+(((-1.0)*x1192*x1193))+(((-1.0)*x1194*x1195))+x1189);
evalcond[1]=(x1196+(((-1.0)*cj3*x1199))+(((-1.0)*x1192*x1195))+x1197+(((-1.0)*r11*sj5*x1194)));
evalcond[2]=(((sj4*x1202))+((r10*x1205))+((cj0*x1200))+((sj0*x1201))+((r11*x1204))+((sj4*x1203))+(((-1.0)*sj3*x1199)));
evalcond[3]=(((cj4*x1203))+((cj4*x1202))+(((-1.0)*x1192*x1206))+((r10*x1209))+(((-1.0)*x1187))+(((-1.0)*x1194*x1207))+((r11*x1208)));
evalcond[4]=(((cj0*x1207))+(((-1.0)*x1194*x1206))+((r00*x1209))+(((-1.0)*x1211*x1212))+(((-1.0)*x1199))+(((-1.0)*x1210*x1211))+((r01*x1208)));
evalcond[5]=((((-1.0)*x1212*x1214))+(((-1.0)*x1192*x1201))+((r01*x1204))+(((-1.0)*x1210*x1214))+((sj0*x1200))+((r00*x1205))+x1213);
evalcond[6]=((0.00945)+(((-1.0)*r10*x1219))+((r11*x1220))+((cj0*px))+(((-0.00025)*x1187))+((py*sj0))+(((-1.0)*r00*x1217))+(((-1.0)*r11*x1218))+(((-1.0)*x1215*x1216))+(((-0.078)*sj3*x1198))+(((0.00025)*sj5*x1216))+(((-0.00025)*x1197))+(((-0.00025)*x1196)));
evalcond[7]=(((r01*x1220))+(((-1.0)*r00*x1219))+(((-1.0)*r01*x1218))+(((-0.00025)*x1198))+(((-0.00025)*x1191))+(((0.078)*x1213))+((px*sj0))+((r10*x1217))+((x1188*x1215))+(((-1.0)*py*x1192))+(((0.00025)*cj0*x1193))+(((-0.00025)*x1189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1221=(cj0*cj5);
IkReal x1222=(cj5*sj0);
IkReal x1223=((1.0)*cj0);
IkReal x1224=(r01*sj5);
IkReal x1225=(r11*sj5);
CheckValue<IkReal> x1226=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1226.valid){
continue;
}
CheckValue<IkReal> x1227 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x1225))+((r10*x1222))+((r00*x1221))+(((-1.0)*x1223*x1224)))),IkReal((((r10*x1221))+((sj0*x1224))+(((-1.0)*x1223*x1225))+(((-1.0)*r00*x1222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1227.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1226.value)))+(x1227.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1228=IKcos(j2);
IkReal x1229=(cj0*r11);
IkReal x1230=(sj5*x1229);
IkReal x1231=(cj5*r00);
IkReal x1232=(sj0*x1231);
IkReal x1233=((1.0)*cj0);
IkReal x1234=(cj5*r10);
IkReal x1235=((1.0)*sj0);
IkReal x1236=(r01*sj5);
IkReal x1237=(cj0*x1231);
IkReal x1238=(sj0*x1234);
IkReal x1239=IKsin(j2);
IkReal x1240=((1.0)*x1239);
IkReal x1241=(cj4*r02);
IkReal x1242=(cj4*r12);
IkReal x1243=(cj0*cj5*r01);
IkReal x1244=(cj0*r00*sj5);
IkReal x1245=(cj5*sj0*sj4);
IkReal x1246=(sj0*sj4*sj5);
IkReal x1247=(r02*sj4);
IkReal x1248=(r12*sj4);
IkReal x1249=(cj4*cj5*sj0);
IkReal x1250=(cj4*sj0*sj5);
IkReal x1251=(cj5*r11);
IkReal x1252=((1.0)*cj0*cj4);
IkReal x1253=(r10*sj5);
IkReal x1254=(sj3*x1228);
IkReal x1255=((1.0)*cj0*sj4);
IkReal x1256=((1.1e-7)*cj5);
IkReal x1257=(cj0*r01);
IkReal x1258=((1.1e-7)*cj0*sj5);
IkReal x1259=((1.1e-7)*cj5*sj0);
IkReal x1260=((1.1e-7)*sj0*sj5);
IkReal x1261=((0.00025)*sj0*sj5);
evalcond[0]=(((cj3*x1228))+x1232+(((-1.0)*x1233*x1234))+x1230+(((-1.0)*x1235*x1236)));
evalcond[1]=(x1238+(((-1.0)*x1233*x1236))+(((-1.0)*r11*sj5*x1235))+(((-1.0)*cj3*x1240))+x1237);
evalcond[2]=(((r11*x1245))+(((-1.0)*sj3*x1240))+((sj4*x1243))+((sj0*x1242))+((r10*x1246))+((cj0*x1241))+((sj4*x1244)));
evalcond[3]=(((cj4*x1244))+(((-1.0)*x1235*x1248))+(((-1.0)*x1228))+((r11*x1249))+((cj4*x1243))+((r10*x1250))+(((-1.0)*x1233*x1247)));
evalcond[4]=(((r01*x1249))+((cj0*x1248))+(((-1.0)*x1240))+((r00*x1250))+(((-1.0)*x1252*x1253))+(((-1.0)*x1251*x1252))+(((-1.0)*x1235*x1247)));
evalcond[5]=(((r00*x1246))+(((-1.0)*x1251*x1255))+x1254+((r01*x1245))+((sj0*x1241))+(((-1.0)*x1233*x1242))+(((-1.0)*x1253*x1255)));
evalcond[6]=((0.00945)+(((-1.0)*r11*x1259))+(((-1.0)*r00*x1258))+(((0.00025)*sj5*x1257))+((cj0*px))+((py*sj0))+(((-0.00025)*x1238))+(((-0.078)*sj3*x1239))+(((-1.0)*r10*x1260))+(((-0.00025)*x1237))+(((-1.0)*x1256*x1257))+((r11*x1261))+(((-0.00025)*x1228)));
evalcond[7]=((((0.00025)*cj0*x1234))+((x1229*x1256))+(((-0.00025)*x1230))+(((0.078)*x1254))+(((-1.0)*r01*x1259))+((px*sj0))+(((-0.00025)*x1232))+(((-1.0)*r00*x1260))+((r10*x1258))+(((-0.00025)*x1239))+((r01*x1261))+(((-1.0)*py*x1233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1262=(r02*sj4);
IkReal x1263=((1.0)*cj0);
IkReal x1264=(r12*sj4);
IkReal x1265=(cj0*cj4*cj5);
IkReal x1266=(cj0*cj4*sj5);
IkReal x1267=((1.0)*cj4*sj0);
IkReal x1268=(cj4*sj0);
CheckValue<IkReal> x1269=IKPowWithIntegerCheck(cj1,-1);
if(!x1269.valid){
continue;
}
if( IKabs(((x1269.value)*((((r11*x1265))+(((-1.0)*cj5*r01*x1267))+((r10*x1266))+(((-1.0)*x1263*x1264))+((sj0*x1262))+(((-1.0)*r00*sj5*x1267)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1262*x1263))+((r00*x1266))+((r01*x1265))+(((-1.0)*sj0*x1264))+((cj5*r11*x1268))+((r10*sj5*x1268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1269.value)*((((r11*x1265))+(((-1.0)*cj5*r01*x1267))+((r10*x1266))+(((-1.0)*x1263*x1264))+((sj0*x1262))+(((-1.0)*r00*sj5*x1267))))))+IKsqr(((((-1.0)*x1262*x1263))+((r00*x1266))+((r01*x1265))+(((-1.0)*sj0*x1264))+((cj5*r11*x1268))+((r10*sj5*x1268))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x1269.value)*((((r11*x1265))+(((-1.0)*cj5*r01*x1267))+((r10*x1266))+(((-1.0)*x1263*x1264))+((sj0*x1262))+(((-1.0)*r00*sj5*x1267))))), ((((-1.0)*x1262*x1263))+((r00*x1266))+((r01*x1265))+(((-1.0)*sj0*x1264))+((cj5*r11*x1268))+((r10*sj5*x1268))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x1270=IKsin(j2);
IkReal x1271=((1.0)*cj4*cj5);
IkReal x1272=((1.0)*cj4*sj5);
IkReal x1273=((1.0)*r02);
IkReal x1274=(cj0*sj4);
IkReal x1275=(sj0*sj4);
IkReal x1276=(cj0*cj4);
IkReal x1277=(cj5*r01);
IkReal x1278=(r00*sj5);
IkReal x1279=(cj4*sj0);
evalcond[0]=((((-1.0)*r20*x1272))+((r22*sj4))+(((-1.0)*r21*x1271))+(((-1.0)*sj1*x1270)));
evalcond[1]=((((-1.0)*(1.0)*(IKcos(j2))))+((cj5*r11*x1279))+(((-1.0)*r12*x1275))+((x1276*x1277))+(((-1.0)*x1273*x1274))+((r10*sj5*x1279))+((x1276*x1278)));
evalcond[2]=(((x1278*x1279))+((r12*x1274))+(((-1.0)*x1273*x1275))+(((-1.0)*cj0*r11*x1271))+((cj1*x1270))+((x1277*x1279))+(((-1.0)*cj0*r10*x1272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
IkReal x1280=cj1*cj1;
IkReal x1281=cj2*cj2;
IkReal x1282=(x1281+x1280+(((-1.0)*x1280*x1281)));
IkReal x1283=(cj4*r22);
IkReal x1284=(cj1*r21);
IkReal x1285=(cj5*sj4);
IkReal x1286=(cj1*r20);
IkReal x1287=(sj4*sj5);
IkReal x1288=(cj2*r20*sj1);
IkReal x1289=(cj2*r21*sj1);
j3eval[0]=x1282;
j3eval[1]=((IKabs(((((-1.0)*cj5*x1286))+((sj5*x1284))+((x1285*x1289))+((cj2*sj1*x1283))+((x1287*x1288)))))+(IKabs((((x1286*x1287))+((cj5*x1288))+(((-1.0)*sj5*x1289))+((cj1*x1283))+((x1284*x1285))))));
j3eval[2]=IKsign(x1282);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj1;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
j3eval[2]=((IKabs(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))))+(IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1290=(cj0*sj5);
IkReal x1291=(cj5*r00);
IkReal x1292=(cj5*r10);
IkReal x1293=((1.0)*r01);
IkReal x1294=(sj0*sj5);
if( IKabs((((sj0*x1291))+((r11*x1290))+(((-1.0)*x1293*x1294))+(((-1.0)*cj0*x1292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1294))+((sj0*x1292))+(((-1.0)*x1290*x1293))+((cj0*x1291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj0*x1291))+((r11*x1290))+(((-1.0)*x1293*x1294))+(((-1.0)*cj0*x1292))))+IKsqr(((((-1.0)*r11*x1294))+((sj0*x1292))+(((-1.0)*x1290*x1293))+((cj0*x1291))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj0*x1291))+((r11*x1290))+(((-1.0)*x1293*x1294))+(((-1.0)*cj0*x1292))), ((((-1.0)*r11*x1294))+((sj0*x1292))+(((-1.0)*x1290*x1293))+((cj0*x1291))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1295=(cj5*r00);
IkReal x1296=(cj0*x1295);
IkReal x1297=(cj5*r10);
IkReal x1298=(sj0*x1297);
IkReal x1299=IKcos(j3);
IkReal x1300=((1.0)*cj0);
IkReal x1301=(r01*sj5);
IkReal x1302=((1.0)*sj0);
IkReal x1303=(cj0*r11);
IkReal x1304=(sj5*x1303);
IkReal x1305=(sj0*x1295);
IkReal x1306=IKsin(j3);
IkReal x1307=((-1.0)*x1306);
IkReal x1308=(cj4*r02);
IkReal x1309=(cj4*r12);
IkReal x1310=(cj0*r01);
IkReal x1311=(cj5*sj4);
IkReal x1312=(r00*sj4*sj5);
IkReal x1313=(cj5*sj0*sj4);
IkReal x1314=(r10*sj4*sj5);
IkReal x1315=((1.1e-7)*cj5);
IkReal x1316=((1.1e-7)*cj0*sj5);
IkReal x1317=((1.1e-7)*cj5*sj0);
IkReal x1318=((1.1e-7)*sj0*sj5);
IkReal x1319=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x1300*x1301))+x1298+(((-1.0)*r11*sj5*x1302))+(((-1.0)*x1299))+x1296);
evalcond[1]=(x1307+(((-1.0)*x1301*x1302))+x1305+x1304+(((-1.0)*x1297*x1300)));
evalcond[2]=(x1307+((sj0*x1314))+((cj0*x1312))+((r11*x1313))+((cj0*x1308))+((sj0*x1309))+((x1310*x1311)));
evalcond[3]=(((sj0*x1312))+x1299+(((-1.0)*x1300*x1309))+(((-1.0)*x1300*x1314))+((r01*x1313))+(((-1.0)*cj0*r11*x1311))+((sj0*x1308)));
evalcond[4]=((0.00945)+(((-1.0)*r00*x1316))+(((-1.0)*x1310*x1315))+(((-0.00025)*x1298))+((r11*x1319))+(((-1.0)*r10*x1318))+(((-0.00025)*x1296))+((cj0*px))+((py*sj0))+(((-1.0)*r11*x1317))+(((0.00025)*sj5*x1310))+(((-0.078)*x1306)));
evalcond[5]=((0.1515)+(((-1.0)*r01*x1317))+((r01*x1319))+((x1303*x1315))+(((-1.0)*r00*x1318))+((r10*x1316))+(((0.00025)*cj0*x1297))+(((-0.00025)*x1304))+((px*sj0))+(((-0.00025)*x1305))+(((-1.0)*py*x1300))+(((0.078)*x1299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1320=(cj0*sj5);
IkReal x1321=(cj5*r00);
IkReal x1322=((1.0)*cj0);
IkReal x1323=(cj5*r10);
IkReal x1324=(sj0*sj5);
if( IKabs(((((-1.0)*r01*x1324))+((sj0*x1321))+((r11*x1320))+(((-1.0)*x1322*x1323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1320))+(((-1.0)*sj0*x1323))+(((-1.0)*x1321*x1322))+((r11*x1324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1324))+((sj0*x1321))+((r11*x1320))+(((-1.0)*x1322*x1323))))+IKsqr((((r01*x1320))+(((-1.0)*sj0*x1323))+(((-1.0)*x1321*x1322))+((r11*x1324))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r01*x1324))+((sj0*x1321))+((r11*x1320))+(((-1.0)*x1322*x1323))), (((r01*x1320))+(((-1.0)*sj0*x1323))+(((-1.0)*x1321*x1322))+((r11*x1324))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1325=IKcos(j3);
IkReal x1326=(cj5*r00);
IkReal x1327=(cj0*x1326);
IkReal x1328=(cj5*r10);
IkReal x1329=(sj0*x1328);
IkReal x1330=((1.0)*cj0);
IkReal x1331=(r01*sj5);
IkReal x1332=((1.0)*sj0);
IkReal x1333=(cj0*r11);
IkReal x1334=(sj5*x1333);
IkReal x1335=(sj0*x1326);
IkReal x1336=IKsin(j3);
IkReal x1337=(cj4*r02);
IkReal x1338=(cj4*r12);
IkReal x1339=(cj0*r01);
IkReal x1340=(cj5*sj4);
IkReal x1341=(r00*sj4*sj5);
IkReal x1342=(cj5*sj0*sj4);
IkReal x1343=(r10*sj4*sj5);
IkReal x1344=((1.1e-7)*cj5);
IkReal x1345=((1.1e-7)*cj0*sj5);
IkReal x1346=((1.1e-7)*cj5*sj0);
IkReal x1347=((1.1e-7)*sj0*sj5);
IkReal x1348=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*r11*sj5*x1332))+x1327+x1329+(((-1.0)*x1330*x1331))+x1325);
evalcond[1]=((((-1.0)*x1328*x1330))+x1335+x1334+(((-1.0)*x1336))+(((-1.0)*x1331*x1332)));
evalcond[2]=(((cj0*x1341))+((sj0*x1338))+((sj0*x1343))+((cj0*x1337))+((r11*x1342))+((x1339*x1340))+x1336);
evalcond[3]=((((-1.0)*x1330*x1338))+((sj0*x1337))+(((-1.0)*cj0*r11*x1340))+((sj0*x1341))+(((-1.0)*x1330*x1343))+x1325+((r01*x1342)));
evalcond[4]=((0.00945)+(((0.00025)*sj5*x1339))+((r11*x1348))+(((-0.00025)*x1327))+(((-1.0)*r10*x1347))+((cj0*px))+((py*sj0))+(((0.078)*x1336))+(((-1.0)*r11*x1346))+(((-1.0)*r00*x1345))+(((-0.00025)*x1329))+(((-1.0)*x1339*x1344)));
evalcond[5]=((0.1515)+(((-1.0)*py*x1330))+(((-0.00025)*x1334))+(((0.00025)*cj0*x1328))+((px*sj0))+((x1333*x1344))+(((0.078)*x1325))+((r01*x1348))+(((-1.0)*r01*x1346))+(((-1.0)*r00*x1347))+((r10*x1345))+(((-0.00025)*x1335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))+IKsqr(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))), ((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1349=IKcos(j3);
IkReal x1350=(r21*sj5);
IkReal x1351=(cj5*r20);
IkReal x1352=IKsin(j3);
IkReal x1353=((1.0)*sj4);
IkReal x1354=(cj0*r11);
IkReal x1355=(sj5*x1354);
IkReal x1356=(cj5*r00*sj0);
IkReal x1357=((1.0)*cj0);
IkReal x1358=(cj5*r10);
IkReal x1359=(r01*sj0*sj5);
IkReal x1360=((1.1e-7)*cj5);
IkReal x1361=((1.1e-7)*sj5);
IkReal x1362=(cj5*sj4);
IkReal x1363=(r01*sj0);
IkReal x1364=(r00*sj0);
IkReal x1365=(sj4*sj5);
evalcond[0]=(x1350+(((-1.0)*x1351))+x1349);
evalcond[1]=((((-1.0)*cj5*r21*x1353))+(((-1.0)*(1.0)*cj4*r22))+x1352+(((-1.0)*r20*sj5*x1353)));
evalcond[2]=((((-1.0)*x1359))+x1356+x1355+(((-1.0)*x1357*x1358))+(((-1.0)*x1352)));
evalcond[3]=((((0.00025)*x1351))+((r20*x1361))+(((-0.00025)*x1350))+(((-1.0)*(1.0)*pz))+(((0.078)*x1352))+((r21*x1360)));
evalcond[4]=(((x1364*x1365))+((cj4*r02*sj0))+(((-1.0)*cj0*r10*x1365))+(((-1.0)*cj0*r11*x1362))+x1349+((x1362*x1363))+(((-1.0)*cj4*r12*x1357)));
evalcond[5]=((0.1515)+(((0.078)*x1349))+(((-1.0)*x1360*x1363))+((px*sj0))+(((-1.0)*py*x1357))+(((-0.00025)*x1356))+(((0.00025)*x1359))+((cj0*r10*x1361))+(((0.00025)*cj0*x1358))+(((-1.0)*x1361*x1364))+((x1354*x1360))+(((-0.00025)*x1355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1366=((1.0)*cj5);
if( IKabs(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x1366)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1366))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x1366))))+IKsqr(((((-1.0)*r20*x1366))+((r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x1366))), ((((-1.0)*r20*x1366))+((r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1367=(r21*sj5);
IkReal x1368=(cj5*r20);
IkReal x1369=IKcos(j3);
IkReal x1370=IKsin(j3);
IkReal x1371=((-1.0)*x1370);
IkReal x1372=((1.0)*sj4);
IkReal x1373=(cj0*r11);
IkReal x1374=(sj5*x1373);
IkReal x1375=(cj5*r00*sj0);
IkReal x1376=((1.0)*cj0);
IkReal x1377=(cj5*r10);
IkReal x1378=(r01*sj0*sj5);
IkReal x1379=((1.1e-7)*cj5);
IkReal x1380=((1.1e-7)*sj5);
IkReal x1381=(cj5*sj4);
IkReal x1382=(r01*sj0);
IkReal x1383=(r00*sj0);
IkReal x1384=(sj4*sj5);
evalcond[0]=((((-1.0)*x1369))+(((-1.0)*x1368))+x1367);
evalcond[1]=((((-1.0)*r20*sj5*x1372))+(((-1.0)*cj5*r21*x1372))+x1371+(((-1.0)*(1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*x1378))+x1375+x1374+x1371+(((-1.0)*x1376*x1377)));
evalcond[3]=((((0.00025)*x1368))+(((-0.078)*x1370))+((r21*x1379))+((r20*x1380))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x1367)));
evalcond[4]=(((cj4*r02*sj0))+((x1381*x1382))+((x1383*x1384))+(((-1.0)*cj0*r11*x1381))+x1369+(((-1.0)*cj0*r10*x1384))+(((-1.0)*cj4*r12*x1376)));
evalcond[5]=((0.1515)+(((-1.0)*x1380*x1383))+((px*sj0))+(((-1.0)*x1379*x1382))+((x1373*x1379))+(((0.00025)*x1378))+(((-0.00025)*x1375))+(((0.078)*x1369))+((cj0*r10*x1380))+(((-1.0)*py*x1376))+(((0.00025)*cj0*x1377))+(((-0.00025)*x1374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1385=((1.0)*sj5);
CheckValue<IkReal> x1386=IKPowWithIntegerCheck(cj2,-1);
if(!x1386.valid){
continue;
}
CheckValue<IkReal> x1387=IKPowWithIntegerCheck(sj2,-1);
if(!x1387.valid){
continue;
}
if( IKabs(((x1386.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1387.value)*(((((-1.0)*cj0*r01*x1385))+((cj5*r10*sj0))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x1385)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1386.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))))+IKsqr(((x1387.value)*(((((-1.0)*cj0*r01*x1385))+((cj5*r10*sj0))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x1385))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1386.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))), ((x1387.value)*(((((-1.0)*cj0*r01*x1385))+((cj5*r10*sj0))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x1385))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1388=(r21*sj5);
IkReal x1389=IKcos(j3);
IkReal x1390=(cj5*r20);
IkReal x1391=IKsin(j3);
IkReal x1392=(cj2*x1391);
IkReal x1393=((1.0)*sj4);
IkReal x1394=(cj0*r11);
IkReal x1395=(sj5*x1394);
IkReal x1396=(cj5*r00);
IkReal x1397=(sj0*x1396);
IkReal x1398=((1.0)*x1391);
IkReal x1399=((1.0)*cj0);
IkReal x1400=(cj5*r10);
IkReal x1401=((1.0)*sj0);
IkReal x1402=(r01*sj5);
IkReal x1403=(cj0*x1396);
IkReal x1404=(sj0*x1400);
IkReal x1405=((1.1e-7)*cj5);
IkReal x1406=(cj4*r02);
IkReal x1407=(cj4*r12);
IkReal x1408=(cj0*r01);
IkReal x1409=(cj5*sj4);
IkReal x1410=(r00*sj4*sj5);
IkReal x1411=(cj5*sj0*sj4);
IkReal x1412=(r10*sj4*sj5);
IkReal x1413=((1.1e-7)*cj0*sj5);
IkReal x1414=((1.1e-7)*cj5*sj0);
IkReal x1415=((1.1e-7)*sj0*sj5);
IkReal x1416=((0.00025)*sj0*sj5);
evalcond[0]=(((cj2*x1389))+(((-1.0)*x1390))+x1388);
evalcond[1]=(x1392+(((-1.0)*r20*sj5*x1393))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x1393)));
evalcond[2]=((((-1.0)*x1401*x1402))+(((-1.0)*x1398))+(((-1.0)*x1399*x1400))+x1395+x1397);
evalcond[3]=((((-1.0)*x1399*x1402))+x1403+(((-1.0)*sj2*x1389))+x1404+(((-1.0)*r11*sj5*x1401)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+((r21*x1405))+(((0.078)*x1392))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x1388))+(((0.00025)*x1390))+(((-1.0)*(0.00025)*sj2)));
evalcond[5]=(((cj0*x1406))+(((-1.0)*sj2*x1398))+((sj0*x1407))+((sj0*x1412))+((r11*x1411))+((cj0*x1410))+((x1408*x1409)));
evalcond[6]=(((r01*x1411))+((sj0*x1406))+(((-1.0)*x1399*x1412))+x1389+(((-1.0)*cj0*r11*x1409))+(((-1.0)*x1399*x1407))+((sj0*x1410)));
evalcond[7]=((0.1515)+(((0.078)*x1389))+(((-0.00025)*x1397))+((px*sj0))+(((-1.0)*r01*x1414))+((r10*x1413))+((x1394*x1405))+(((-0.00025)*x1395))+(((-1.0)*r00*x1415))+(((-1.0)*py*x1399))+((r01*x1416))+(((0.00025)*cj0*x1400)));
evalcond[8]=((0.00945)+(((-0.078)*sj2*x1391))+(((-0.00025)*x1403))+(((-1.0)*r10*x1415))+((cj0*px))+((py*sj0))+(((-0.00025)*x1404))+(((-1.0)*x1405*x1408))+((r11*x1416))+(((0.00025)*sj5*x1408))+(((-1.0)*r11*x1414))+(((-1.0)*r00*x1413))+(((-1.0)*(0.00025)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1417=((1.0)*sj5);
CheckValue<IkReal> x1418=IKPowWithIntegerCheck(cj2,-1);
if(!x1418.valid){
continue;
}
if( IKabs(((((-1.0)*r01*sj0*x1417))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1418.value)*((((cj5*r20))+(((-1.0)*r21*x1417)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0*x1417))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))))+IKsqr(((x1418.value)*((((cj5*r20))+(((-1.0)*r21*x1417))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r01*sj0*x1417))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))), ((x1418.value)*((((cj5*r20))+(((-1.0)*r21*x1417))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1419=(r21*sj5);
IkReal x1420=IKcos(j3);
IkReal x1421=(cj5*r20);
IkReal x1422=IKsin(j3);
IkReal x1423=(cj2*x1422);
IkReal x1424=((1.0)*sj4);
IkReal x1425=(cj0*r11);
IkReal x1426=(sj5*x1425);
IkReal x1427=(cj5*r00);
IkReal x1428=(sj0*x1427);
IkReal x1429=((1.0)*x1422);
IkReal x1430=((1.0)*cj0);
IkReal x1431=(cj5*r10);
IkReal x1432=((1.0)*sj0);
IkReal x1433=(r01*sj5);
IkReal x1434=(cj0*x1427);
IkReal x1435=(sj0*x1431);
IkReal x1436=((1.1e-7)*cj5);
IkReal x1437=(cj4*r02);
IkReal x1438=(cj4*r12);
IkReal x1439=(cj0*r01);
IkReal x1440=(cj5*sj4);
IkReal x1441=(r00*sj4*sj5);
IkReal x1442=(cj5*sj0*sj4);
IkReal x1443=(r10*sj4*sj5);
IkReal x1444=((1.1e-7)*cj0*sj5);
IkReal x1445=((1.1e-7)*cj5*sj0);
IkReal x1446=((1.1e-7)*sj0*sj5);
IkReal x1447=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x1421))+((cj2*x1420))+x1419);
evalcond[1]=((((-1.0)*r20*sj5*x1424))+(((-1.0)*cj5*r21*x1424))+x1423+(((-1.0)*(1.0)*cj4*r22)));
evalcond[2]=(x1426+(((-1.0)*x1430*x1431))+(((-1.0)*x1432*x1433))+(((-1.0)*x1429))+x1428);
evalcond[3]=((((-1.0)*r11*sj5*x1432))+x1435+(((-1.0)*sj2*x1420))+(((-1.0)*x1430*x1433))+x1434);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((0.00025)*x1421))+((r21*x1436))+(((-1.0)*(1.0)*pz))+(((0.078)*x1423))+(((-1.0)*(0.00025)*sj2))+(((-0.00025)*x1419)));
evalcond[5]=(((sj0*x1443))+(((-1.0)*sj2*x1429))+((cj0*x1437))+((cj0*x1441))+((x1439*x1440))+((r11*x1442))+((sj0*x1438)));
evalcond[6]=((((-1.0)*x1430*x1438))+((sj0*x1441))+x1420+(((-1.0)*cj0*r11*x1440))+((sj0*x1437))+(((-1.0)*x1430*x1443))+((r01*x1442)));
evalcond[7]=((0.1515)+(((-1.0)*r00*x1446))+((px*sj0))+(((0.078)*x1420))+(((-0.00025)*x1426))+(((-1.0)*py*x1430))+((r10*x1444))+((x1425*x1436))+(((-0.00025)*x1428))+((r01*x1447))+(((0.00025)*cj0*x1431))+(((-1.0)*r01*x1445)));
evalcond[8]=((0.00945)+(((-0.00025)*x1434))+(((-1.0)*r10*x1446))+(((0.00025)*sj5*x1439))+((r11*x1447))+(((-1.0)*r11*x1445))+(((-0.00025)*x1435))+((cj0*px))+((py*sj0))+(((-1.0)*x1436*x1439))+(((-0.078)*sj2*x1422))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*r00*x1444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1448=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1448.valid){
continue;
}
CheckValue<IkReal> x1449 = IKatan2WithCheck(IkReal((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))),IkReal(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1449.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1448.value)))+(x1449.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1450=(r21*sj5);
IkReal x1451=IKcos(j3);
IkReal x1452=(cj5*r20);
IkReal x1453=IKsin(j3);
IkReal x1454=(cj2*x1453);
IkReal x1455=((1.0)*sj4);
IkReal x1456=(cj0*r11);
IkReal x1457=(sj5*x1456);
IkReal x1458=(cj5*r00);
IkReal x1459=(sj0*x1458);
IkReal x1460=((1.0)*x1453);
IkReal x1461=((1.0)*cj0);
IkReal x1462=(cj5*r10);
IkReal x1463=((1.0)*sj0);
IkReal x1464=(r01*sj5);
IkReal x1465=(cj0*x1458);
IkReal x1466=(sj0*x1462);
IkReal x1467=((1.1e-7)*cj5);
IkReal x1468=(cj4*r02);
IkReal x1469=(cj4*r12);
IkReal x1470=(cj0*r01);
IkReal x1471=(cj5*sj4);
IkReal x1472=(r00*sj4*sj5);
IkReal x1473=(cj5*sj0*sj4);
IkReal x1474=(r10*sj4*sj5);
IkReal x1475=((1.1e-7)*cj0*sj5);
IkReal x1476=((1.1e-7)*cj5*sj0);
IkReal x1477=((1.1e-7)*sj0*sj5);
IkReal x1478=((0.00025)*sj0*sj5);
evalcond[0]=(x1450+(((-1.0)*x1452))+((cj2*x1451)));
evalcond[1]=(x1454+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x1455))+(((-1.0)*cj5*r21*x1455)));
evalcond[2]=((((-1.0)*x1460))+(((-1.0)*x1463*x1464))+(((-1.0)*x1461*x1462))+x1457+x1459);
evalcond[3]=(x1466+(((-1.0)*x1461*x1464))+(((-1.0)*r11*sj5*x1463))+(((-1.0)*sj2*x1451))+x1465);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((0.078)*x1454))+(((-0.00025)*x1450))+(((-1.0)*(1.0)*pz))+((r21*x1467))+(((-1.0)*(0.00025)*sj2))+(((0.00025)*x1452)));
evalcond[5]=(((cj0*x1472))+((x1470*x1471))+((sj0*x1474))+(((-1.0)*sj2*x1460))+((cj0*x1468))+((sj0*x1469))+((r11*x1473)));
evalcond[6]=(((sj0*x1468))+((r01*x1473))+(((-1.0)*x1461*x1469))+(((-1.0)*cj0*r11*x1471))+(((-1.0)*x1461*x1474))+x1451+((sj0*x1472)));
evalcond[7]=((0.1515)+(((-1.0)*py*x1461))+((px*sj0))+(((-0.00025)*x1459))+(((-1.0)*r00*x1477))+(((-1.0)*r01*x1476))+((r10*x1475))+(((-0.00025)*x1457))+(((0.00025)*cj0*x1462))+((x1456*x1467))+(((0.078)*x1451))+((r01*x1478)));
evalcond[8]=((0.00945)+(((-0.00025)*x1465))+(((-1.0)*r11*x1476))+((cj0*px))+((py*sj0))+((r11*x1478))+(((-0.078)*sj2*x1453))+(((-1.0)*r10*x1477))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*x1467*x1470))+(((0.00025)*sj5*x1470))+(((-1.0)*r00*x1475))+(((-0.00025)*x1466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1479=((1.0)*cj5);
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
j3eval[2]=((IKabs(((((-1.0)*r20*x1479))+((r21*sj5)))))+(IKabs(((((-1.0)*r21*sj4*x1479))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1480=(cj0*cj5);
IkReal x1481=(r01*sj5);
IkReal x1482=((1.0)*cj0);
IkReal x1483=(r11*sj5);
IkReal x1484=(cj5*sj0);
if( IKabs(((((-1.0)*x1482*x1483))+((r10*x1480))+((sj0*x1481))+(((-1.0)*r00*x1484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1480))+(((-1.0)*x1481*x1482))+(((-1.0)*sj0*x1483))+((r10*x1484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1482*x1483))+((r10*x1480))+((sj0*x1481))+(((-1.0)*r00*x1484))))+IKsqr((((r00*x1480))+(((-1.0)*x1481*x1482))+(((-1.0)*sj0*x1483))+((r10*x1484))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x1482*x1483))+((r10*x1480))+((sj0*x1481))+(((-1.0)*r00*x1484))), (((r00*x1480))+(((-1.0)*x1481*x1482))+(((-1.0)*sj0*x1483))+((r10*x1484))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1485=IKsin(j3);
IkReal x1486=(cj0*r11);
IkReal x1487=(sj5*x1486);
IkReal x1488=(cj5*r00);
IkReal x1489=(sj0*x1488);
IkReal x1490=((1.0)*cj0);
IkReal x1491=(cj5*r10);
IkReal x1492=((1.0)*sj0);
IkReal x1493=(r01*sj5);
IkReal x1494=(cj0*x1488);
IkReal x1495=(sj0*x1491);
IkReal x1496=IKcos(j3);
IkReal x1497=((-1.0)*x1496);
IkReal x1498=(cj4*r02);
IkReal x1499=(cj4*r12);
IkReal x1500=(cj0*r01);
IkReal x1501=(cj5*sj4);
IkReal x1502=(r00*sj4*sj5);
IkReal x1503=(cj5*sj0*sj4);
IkReal x1504=(r10*sj4*sj5);
IkReal x1505=((1.1e-7)*cj5);
IkReal x1506=((1.1e-7)*cj0*sj5);
IkReal x1507=((1.1e-7)*cj5*sj0);
IkReal x1508=((1.1e-7)*sj0*sj5);
IkReal x1509=((0.00025)*sj0*sj5);
evalcond[0]=(x1489+(((-1.0)*x1490*x1491))+(((-1.0)*x1492*x1493))+x1485+x1487);
evalcond[1]=((((-1.0)*r11*sj5*x1492))+(((-1.0)*x1490*x1493))+x1494+x1497+x1495);
evalcond[2]=(((cj0*x1498))+((sj0*x1499))+(((-1.0)*x1485))+((r11*x1503))+((cj0*x1502))+((x1500*x1501))+((sj0*x1504)));
evalcond[3]=((((-1.0)*cj0*r11*x1501))+((sj0*x1498))+(((-1.0)*x1490*x1504))+x1497+(((-1.0)*x1490*x1499))+((sj0*x1502))+((r01*x1503)));
evalcond[4]=((0.00945)+(((-0.078)*x1485))+(((-1.0)*r10*x1508))+(((-0.00025)*x1495))+(((-1.0)*r11*x1507))+(((-1.0)*r00*x1506))+(((0.00025)*sj5*x1500))+(((-1.0)*x1500*x1505))+((cj0*px))+((py*sj0))+(((-0.00025)*x1494))+((r11*x1509)));
evalcond[5]=((-0.1515)+(((-1.0)*py*x1490))+((px*sj0))+(((-0.00025)*x1487))+(((-1.0)*r01*x1507))+((r01*x1509))+(((-1.0)*r00*x1508))+(((-0.078)*x1496))+((x1486*x1505))+(((-0.00025)*x1489))+(((0.00025)*cj0*x1491))+((r10*x1506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1510=(cj0*cj5);
IkReal x1511=(r01*sj5);
IkReal x1512=(r11*sj5);
IkReal x1513=((1.0)*r00);
IkReal x1514=(cj5*sj0);
if( IKabs(((((-1.0)*cj0*x1512))+(((-1.0)*x1513*x1514))+((sj0*x1511))+((r10*x1510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1510*x1513))+((sj0*x1512))+((cj0*x1511))+(((-1.0)*r10*x1514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x1512))+(((-1.0)*x1513*x1514))+((sj0*x1511))+((r10*x1510))))+IKsqr(((((-1.0)*x1510*x1513))+((sj0*x1512))+((cj0*x1511))+(((-1.0)*r10*x1514))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*x1512))+(((-1.0)*x1513*x1514))+((sj0*x1511))+((r10*x1510))), ((((-1.0)*x1510*x1513))+((sj0*x1512))+((cj0*x1511))+(((-1.0)*r10*x1514))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1515=IKcos(j3);
IkReal x1516=(cj5*r00);
IkReal x1517=(cj0*x1516);
IkReal x1518=(cj5*r10);
IkReal x1519=(sj0*x1518);
IkReal x1520=((1.0)*cj0);
IkReal x1521=(r01*sj5);
IkReal x1522=((1.0)*sj0);
IkReal x1523=IKsin(j3);
IkReal x1524=(cj0*r11);
IkReal x1525=(sj5*x1524);
IkReal x1526=(sj0*x1516);
IkReal x1527=(cj4*r02);
IkReal x1528=(cj4*r12);
IkReal x1529=(cj0*r01);
IkReal x1530=(cj5*sj4);
IkReal x1531=(r00*sj4*sj5);
IkReal x1532=(cj5*sj0*sj4);
IkReal x1533=(r10*sj4*sj5);
IkReal x1534=((1.1e-7)*cj5);
IkReal x1535=((1.1e-7)*cj0*sj5);
IkReal x1536=((1.1e-7)*cj5*sj0);
IkReal x1537=((1.1e-7)*sj0*sj5);
IkReal x1538=((0.00025)*sj0*sj5);
evalcond[0]=(x1517+x1519+x1515+(((-1.0)*x1520*x1521))+(((-1.0)*r11*sj5*x1522)));
evalcond[1]=(x1523+x1526+x1525+(((-1.0)*x1521*x1522))+(((-1.0)*x1518*x1520)));
evalcond[2]=(x1523+((sj0*x1533))+((r11*x1532))+((cj0*x1531))+((sj0*x1528))+((cj0*x1527))+((x1529*x1530)));
evalcond[3]=((((-1.0)*x1515))+(((-1.0)*cj0*r11*x1530))+(((-1.0)*x1520*x1528))+(((-1.0)*x1520*x1533))+((sj0*x1527))+((sj0*x1531))+((r01*x1532)));
evalcond[4]=((0.00945)+(((-1.0)*r11*x1536))+(((-1.0)*r10*x1537))+(((0.078)*x1523))+((cj0*px))+((py*sj0))+(((-0.00025)*x1519))+(((-1.0)*r00*x1535))+(((0.00025)*sj5*x1529))+((r11*x1538))+(((-1.0)*x1529*x1534))+(((-0.00025)*x1517)));
evalcond[5]=((-0.1515)+(((0.00025)*cj0*x1518))+(((-0.078)*x1515))+((r10*x1535))+((x1524*x1534))+((px*sj0))+(((-0.00025)*x1525))+(((-1.0)*py*x1520))+(((-0.00025)*x1526))+(((-1.0)*r00*x1537))+(((-1.0)*r01*x1536))+((r01*x1538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1539=((1.0)*cj5);
if( IKabs(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x1539)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1539))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x1539))))+IKsqr(((((-1.0)*r20*x1539))+((r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x1539))), ((((-1.0)*r20*x1539))+((r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1540=(r21*sj5);
IkReal x1541=(cj5*r20);
IkReal x1542=IKcos(j3);
IkReal x1543=((-1.0)*x1542);
IkReal x1544=IKsin(j3);
IkReal x1545=((1.0)*sj4);
IkReal x1546=(cj0*r11);
IkReal x1547=(sj5*x1546);
IkReal x1548=(cj5*r00*sj0);
IkReal x1549=((1.0)*cj0);
IkReal x1550=(cj5*r10);
IkReal x1551=(r01*sj0*sj5);
IkReal x1552=((1.1e-7)*cj5);
IkReal x1553=((1.1e-7)*sj5);
IkReal x1554=(cj5*sj4);
IkReal x1555=(r01*sj0);
IkReal x1556=(r00*sj0);
IkReal x1557=(sj4*sj5);
evalcond[0]=((((-1.0)*x1541))+x1540+x1543);
evalcond[1]=((((-1.0)*r20*sj5*x1545))+(((-1.0)*cj5*r21*x1545))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*x1544)));
evalcond[2]=((((-1.0)*x1549*x1550))+x1544+x1547+x1548+(((-1.0)*x1551)));
evalcond[3]=((((-0.00025)*x1540))+(((-0.078)*x1544))+(((-1.0)*(1.0)*pz))+(((0.00025)*x1541))+((r21*x1552))+((r20*x1553)));
evalcond[4]=(((x1554*x1555))+((cj4*r02*sj0))+(((-1.0)*cj4*r12*x1549))+((x1556*x1557))+(((-1.0)*cj0*r11*x1554))+(((-1.0)*cj0*r10*x1557))+x1543);
evalcond[5]=((-0.1515)+(((-1.0)*py*x1549))+((x1546*x1552))+(((-0.00025)*x1547))+(((0.00025)*x1551))+((px*sj0))+(((-0.00025)*x1548))+(((-0.078)*x1542))+(((-1.0)*x1552*x1555))+(((0.00025)*cj0*x1550))+((cj0*r10*x1553))+(((-1.0)*x1553*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))+IKsqr(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))), ((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1558=IKcos(j3);
IkReal x1559=(r21*sj5);
IkReal x1560=(cj5*r20);
IkReal x1561=IKsin(j3);
IkReal x1562=((1.0)*sj4);
IkReal x1563=(cj0*r11);
IkReal x1564=(sj5*x1563);
IkReal x1565=(cj5*r00*sj0);
IkReal x1566=((1.0)*cj0);
IkReal x1567=(cj5*r10);
IkReal x1568=(r01*sj0*sj5);
IkReal x1569=((1.1e-7)*cj5);
IkReal x1570=((1.1e-7)*sj5);
IkReal x1571=(cj5*sj4);
IkReal x1572=(r01*sj0);
IkReal x1573=(r00*sj0);
IkReal x1574=(sj4*sj5);
evalcond[0]=(x1558+x1559+(((-1.0)*x1560)));
evalcond[1]=((((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x1562))+x1561+(((-1.0)*cj5*r21*x1562)));
evalcond[2]=((((-1.0)*x1568))+(((-1.0)*x1566*x1567))+x1564+x1565+x1561);
evalcond[3]=((((0.078)*x1561))+(((0.00025)*x1560))+((r20*x1570))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x1559))+((r21*x1569)));
evalcond[4]=(((cj4*r02*sj0))+((x1573*x1574))+(((-1.0)*cj4*r12*x1566))+(((-1.0)*x1558))+(((-1.0)*cj0*r10*x1574))+(((-1.0)*cj0*r11*x1571))+((x1571*x1572)));
evalcond[5]=((-0.1515)+((x1563*x1569))+((px*sj0))+((cj0*r10*x1570))+(((-0.00025)*x1565))+(((0.00025)*cj0*x1567))+(((0.00025)*x1568))+(((-0.00025)*x1564))+(((-0.078)*x1558))+(((-1.0)*x1570*x1573))+(((-1.0)*py*x1566))+(((-1.0)*x1569*x1572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1575=((1.0)*sj5);
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(cj2,-1);
if(!x1576.valid){
continue;
}
CheckValue<IkReal> x1577=IKPowWithIntegerCheck(sj2,-1);
if(!x1577.valid){
continue;
}
if( IKabs(((x1576.value)*(((((-1.0)*r20*sj4*x1575))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*(1.0)*cj5*r21*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1577.value)*(((((-1.0)*r11*sj0*x1575))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x1575))+((cj0*cj5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1576.value)*(((((-1.0)*r20*sj4*x1575))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*(1.0)*cj5*r21*sj4))))))+IKsqr(((x1577.value)*(((((-1.0)*r11*sj0*x1575))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x1575))+((cj0*cj5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1576.value)*(((((-1.0)*r20*sj4*x1575))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*(1.0)*cj5*r21*sj4))))), ((x1577.value)*(((((-1.0)*r11*sj0*x1575))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x1575))+((cj0*cj5*r00))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1578=(r21*sj5);
IkReal x1579=(cj5*r20);
IkReal x1580=IKcos(j3);
IkReal x1581=((1.0)*x1580);
IkReal x1582=IKsin(j3);
IkReal x1583=(cj2*x1582);
IkReal x1584=((1.0)*sj4);
IkReal x1585=(cj0*r11);
IkReal x1586=(sj5*x1585);
IkReal x1587=(cj5*r00);
IkReal x1588=(sj0*x1587);
IkReal x1589=((1.0)*cj0);
IkReal x1590=(cj5*r10);
IkReal x1591=((1.0)*sj0);
IkReal x1592=(r01*sj5);
IkReal x1593=(cj0*x1587);
IkReal x1594=(sj0*x1590);
IkReal x1595=((1.1e-7)*cj5);
IkReal x1596=(cj4*r02);
IkReal x1597=(cj4*r12);
IkReal x1598=(sj2*x1582);
IkReal x1599=(cj0*r01);
IkReal x1600=(cj5*sj4);
IkReal x1601=(r00*sj4*sj5);
IkReal x1602=(cj5*sj0*sj4);
IkReal x1603=(r10*sj4*sj5);
IkReal x1604=((1.1e-7)*cj0*sj5);
IkReal x1605=((1.1e-7)*cj5*sj0);
IkReal x1606=((1.1e-7)*sj0*sj5);
IkReal x1607=((0.00025)*sj0*sj5);
evalcond[0]=(x1578+(((-1.0)*cj2*x1581))+(((-1.0)*x1579)));
evalcond[1]=((((-1.0)*cj5*r21*x1584))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x1584))+(((-1.0)*x1583)));
evalcond[2]=(x1586+(((-1.0)*x1589*x1590))+x1582+(((-1.0)*x1591*x1592))+x1588);
evalcond[3]=(x1594+(((-1.0)*sj2*x1581))+(((-1.0)*x1589*x1592))+x1593+(((-1.0)*r11*sj5*x1591)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((-0.078)*x1583))+((r21*x1595))+(((0.00025)*sj2))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x1578))+(((0.00025)*x1579)));
evalcond[5]=(((sj0*x1603))+((r11*x1602))+((x1599*x1600))+((cj0*x1601))+((sj0*x1597))+((cj0*x1596))+(((-1.0)*x1598)));
evalcond[6]=(((sj0*x1596))+((sj0*x1601))+((r01*x1602))+(((-1.0)*x1589*x1597))+(((-1.0)*cj0*r11*x1600))+(((-1.0)*x1581))+(((-1.0)*x1589*x1603)));
evalcond[7]=((-0.1515)+((x1585*x1595))+(((-1.0)*r01*x1605))+((px*sj0))+(((-0.078)*x1580))+(((-0.00025)*x1588))+(((0.00025)*cj0*x1590))+((r10*x1604))+(((-1.0)*py*x1589))+(((-1.0)*r00*x1606))+((r01*x1607))+(((-0.00025)*x1586)));
evalcond[8]=((0.00945)+(((-0.00025)*x1594))+(((-1.0)*r00*x1604))+(((-1.0)*r10*x1606))+(((-1.0)*x1595*x1599))+(((-0.00025)*x1593))+(((-1.0)*r11*x1605))+((cj0*px))+((py*sj0))+(((0.00025)*sj5*x1599))+(((-0.078)*x1598))+(((-1.0)*(0.00025)*cj2))+((r11*x1607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1608=((1.0)*cj5);
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(cj2,-1);
if(!x1609.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj0*x1608))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(1.0)*cj0*r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1609.value)*(((((-1.0)*r20*x1608))+((r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0*x1608))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(1.0)*cj0*r11*sj5))))+IKsqr(((x1609.value)*(((((-1.0)*r20*x1608))+((r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*sj0*x1608))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*(1.0)*cj0*r11*sj5))), ((x1609.value)*(((((-1.0)*r20*x1608))+((r21*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1610=(r21*sj5);
IkReal x1611=(cj5*r20);
IkReal x1612=IKcos(j3);
IkReal x1613=((1.0)*x1612);
IkReal x1614=IKsin(j3);
IkReal x1615=(cj2*x1614);
IkReal x1616=((1.0)*sj4);
IkReal x1617=(cj0*r11);
IkReal x1618=(sj5*x1617);
IkReal x1619=(cj5*r00);
IkReal x1620=(sj0*x1619);
IkReal x1621=((1.0)*cj0);
IkReal x1622=(cj5*r10);
IkReal x1623=((1.0)*sj0);
IkReal x1624=(r01*sj5);
IkReal x1625=(cj0*x1619);
IkReal x1626=(sj0*x1622);
IkReal x1627=((1.1e-7)*cj5);
IkReal x1628=(cj4*r02);
IkReal x1629=(cj4*r12);
IkReal x1630=(sj2*x1614);
IkReal x1631=(cj0*r01);
IkReal x1632=(cj5*sj4);
IkReal x1633=(r00*sj4*sj5);
IkReal x1634=(cj5*sj0*sj4);
IkReal x1635=(r10*sj4*sj5);
IkReal x1636=((1.1e-7)*cj0*sj5);
IkReal x1637=((1.1e-7)*cj5*sj0);
IkReal x1638=((1.1e-7)*sj0*sj5);
IkReal x1639=((0.00025)*sj0*sj5);
evalcond[0]=(x1610+(((-1.0)*cj2*x1613))+(((-1.0)*x1611)));
evalcond[1]=((((-1.0)*x1615))+(((-1.0)*r20*sj5*x1616))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x1616)));
evalcond[2]=(x1618+(((-1.0)*x1623*x1624))+x1614+(((-1.0)*x1621*x1622))+x1620);
evalcond[3]=(x1625+(((-1.0)*sj2*x1613))+(((-1.0)*x1621*x1624))+x1626+(((-1.0)*r11*sj5*x1623)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((-0.078)*x1615))+(((0.00025)*sj2))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x1610))+((r21*x1627))+(((0.00025)*x1611)));
evalcond[5]=(((r11*x1634))+(((-1.0)*x1630))+((cj0*x1628))+((cj0*x1633))+((sj0*x1635))+((x1631*x1632))+((sj0*x1629)));
evalcond[6]=((((-1.0)*x1621*x1635))+((r01*x1634))+(((-1.0)*x1613))+((sj0*x1633))+(((-1.0)*cj0*r11*x1632))+((sj0*x1628))+(((-1.0)*x1621*x1629)));
evalcond[7]=((-0.1515)+((r10*x1636))+((px*sj0))+(((-1.0)*r01*x1637))+(((-0.00025)*x1618))+(((-1.0)*r00*x1638))+(((-1.0)*py*x1621))+(((-0.00025)*x1620))+((r01*x1639))+(((0.00025)*cj0*x1622))+(((-0.078)*x1612))+((x1617*x1627)));
evalcond[8]=((0.00945)+(((-1.0)*r10*x1638))+(((-0.078)*x1630))+(((-1.0)*r11*x1637))+((cj0*px))+((py*sj0))+((r11*x1639))+(((-1.0)*x1627*x1631))+(((-1.0)*r00*x1636))+(((0.00025)*sj5*x1631))+(((-1.0)*(0.00025)*cj2))+(((-0.00025)*x1626))+(((-0.00025)*x1625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1640=((1.0)*cj5);
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj4*x1640))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22)))),IkReal(((((-1.0)*r20*x1640))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
CheckValue<IkReal> x1642=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1642.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1641.value)+(((1.5707963267949)*(x1642.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1643=(r21*sj5);
IkReal x1644=(cj5*r20);
IkReal x1645=IKcos(j3);
IkReal x1646=((1.0)*x1645);
IkReal x1647=IKsin(j3);
IkReal x1648=(cj2*x1647);
IkReal x1649=((1.0)*sj4);
IkReal x1650=(cj0*r11);
IkReal x1651=(sj5*x1650);
IkReal x1652=(cj5*r00);
IkReal x1653=(sj0*x1652);
IkReal x1654=((1.0)*cj0);
IkReal x1655=(cj5*r10);
IkReal x1656=((1.0)*sj0);
IkReal x1657=(r01*sj5);
IkReal x1658=(cj0*x1652);
IkReal x1659=(sj0*x1655);
IkReal x1660=((1.1e-7)*cj5);
IkReal x1661=(cj4*r02);
IkReal x1662=(cj4*r12);
IkReal x1663=(sj2*x1647);
IkReal x1664=(cj0*r01);
IkReal x1665=(cj5*sj4);
IkReal x1666=(r00*sj4*sj5);
IkReal x1667=(cj5*sj0*sj4);
IkReal x1668=(r10*sj4*sj5);
IkReal x1669=((1.1e-7)*cj0*sj5);
IkReal x1670=((1.1e-7)*cj5*sj0);
IkReal x1671=((1.1e-7)*sj0*sj5);
IkReal x1672=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x1644))+(((-1.0)*cj2*x1646))+x1643);
evalcond[1]=((((-1.0)*cj5*r21*x1649))+(((-1.0)*r20*sj5*x1649))+(((-1.0)*x1648))+(((-1.0)*(1.0)*cj4*r22)));
evalcond[2]=(x1651+(((-1.0)*x1656*x1657))+x1653+(((-1.0)*x1654*x1655))+x1647);
evalcond[3]=(x1658+x1659+(((-1.0)*r11*sj5*x1656))+(((-1.0)*x1654*x1657))+(((-1.0)*sj2*x1646)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((-0.00025)*x1643))+(((0.00025)*sj2))+(((-1.0)*(1.0)*pz))+(((0.00025)*x1644))+((r21*x1660))+(((-0.078)*x1648)));
evalcond[5]=(((cj0*x1666))+((sj0*x1668))+((r11*x1667))+(((-1.0)*x1663))+((x1664*x1665))+((sj0*x1662))+((cj0*x1661)));
evalcond[6]=((((-1.0)*x1654*x1662))+(((-1.0)*cj0*r11*x1665))+((r01*x1667))+(((-1.0)*x1646))+((sj0*x1666))+(((-1.0)*x1654*x1668))+((sj0*x1661)));
evalcond[7]=((-0.1515)+(((-1.0)*py*x1654))+((x1650*x1660))+((px*sj0))+((r01*x1672))+(((-1.0)*r00*x1671))+(((-1.0)*r01*x1670))+(((0.00025)*cj0*x1655))+(((-0.078)*x1645))+(((-0.00025)*x1653))+((r10*x1669))+(((-0.00025)*x1651)));
evalcond[8]=((0.00945)+(((-0.00025)*x1658))+(((-1.0)*r10*x1671))+((r11*x1672))+(((-1.0)*r11*x1670))+((cj0*px))+(((0.00025)*sj5*x1664))+((py*sj0))+(((-0.00025)*x1659))+(((-1.0)*(0.00025)*cj2))+(((-0.078)*x1663))+(((-1.0)*r00*x1669))+(((-1.0)*x1660*x1664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1673=(r21*sj5);
IkReal x1674=(cj4*r22);
IkReal x1675=(cj5*r20);
IkReal x1676=(cj5*r21);
IkReal x1677=(sj1*sj4);
IkReal x1678=(r20*sj5);
IkReal x1679=(cj1*sj4);
if( IKabs(((((-1.0)*cj1*x1675))+((cj1*x1673))+((x1676*x1677))+((sj1*x1674))+((x1677*x1678)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1678*x1679))+((cj1*x1674))+((sj1*x1675))+(((-1.0)*sj1*x1673))+((x1676*x1679)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1675))+((cj1*x1673))+((x1676*x1677))+((sj1*x1674))+((x1677*x1678))))+IKsqr((((x1678*x1679))+((cj1*x1674))+((sj1*x1675))+(((-1.0)*sj1*x1673))+((x1676*x1679))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj1*x1675))+((cj1*x1673))+((x1676*x1677))+((sj1*x1674))+((x1677*x1678))), (((x1678*x1679))+((cj1*x1674))+((sj1*x1675))+(((-1.0)*sj1*x1673))+((x1676*x1679))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1680=(r21*sj5);
IkReal x1681=(cj5*r20);
IkReal x1682=IKcos(j3);
IkReal x1683=(sj1*x1682);
IkReal x1684=IKsin(j3);
IkReal x1685=(cj1*x1684);
IkReal x1686=(x1683+(((-1.0)*x1685)));
IkReal x1687=(cj1*x1682);
IkReal x1688=(sj1*x1684);
IkReal x1689=((1.0)*sj4);
IkReal x1690=(cj0*r11);
IkReal x1691=(sj5*x1690);
IkReal x1692=(cj5*r00*sj0);
IkReal x1693=((1.0)*cj0);
IkReal x1694=(cj5*r10);
IkReal x1695=(r01*sj0*sj5);
IkReal x1696=((1.1e-7)*cj5);
IkReal x1697=((1.1e-7)*sj5);
IkReal x1698=(cj5*sj4);
IkReal x1699=(r01*sj0);
IkReal x1700=(r00*sj0);
IkReal x1701=(sj4*sj5);
evalcond[0]=(x1680+(((-1.0)*x1681))+x1686);
evalcond[1]=(x1688+(((-1.0)*cj5*r21*x1689))+(((-1.0)*(1.0)*cj4*r22))+x1687+(((-1.0)*r20*sj5*x1689)));
evalcond[2]=((((-1.0)*x1693*x1694))+x1692+(((-1.0)*x1695))+x1691+(((-1.0)*x1687))+(((-1.0)*x1688)));
evalcond[3]=((((-0.00025)*x1680))+((r20*x1697))+((r21*x1696))+(((0.078)*x1687))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((0.00025)*x1681))+(((0.078)*x1688)));
evalcond[4]=(((cj4*r02*sj0))+(((-1.0)*cj0*r11*x1698))+(((-1.0)*cj4*r12*x1693))+(((-1.0)*cj0*r10*x1701))+x1686+((x1700*x1701))+((x1698*x1699)));
evalcond[5]=((((-1.0)*x1696*x1699))+(((-0.078)*x1685))+((px*sj0))+(((-1.0)*x1697*x1700))+(((-0.00025)*x1692))+((cj0*r10*x1697))+(((0.1515)*sj1))+(((-0.00025)*x1691))+(((0.00025)*x1695))+((x1690*x1696))+(((-1.0)*py*x1693))+(((0.00025)*cj0*x1694))+(((0.078)*x1683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1702=(r21*sj5);
IkReal x1703=((1.0)*cj5*r20);
IkReal x1704=(cj4*r22);
IkReal x1705=(cj5*r21);
IkReal x1706=((1.0)*sj1*sj4);
IkReal x1707=(r20*sj5);
IkReal x1708=(cj1*sj4);
if( IKabs(((((-1.0)*sj1*x1704))+((cj1*x1702))+(((-1.0)*x1705*x1706))+(((-1.0)*cj1*x1703))+(((-1.0)*x1706*x1707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1704))+((x1707*x1708))+(((-1.0)*sj1*x1703))+((sj1*x1702))+((x1705*x1708)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x1704))+((cj1*x1702))+(((-1.0)*x1705*x1706))+(((-1.0)*cj1*x1703))+(((-1.0)*x1706*x1707))))+IKsqr((((cj1*x1704))+((x1707*x1708))+(((-1.0)*sj1*x1703))+((sj1*x1702))+((x1705*x1708))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj1*x1704))+((cj1*x1702))+(((-1.0)*x1705*x1706))+(((-1.0)*cj1*x1703))+(((-1.0)*x1706*x1707))), (((cj1*x1704))+((x1707*x1708))+(((-1.0)*sj1*x1703))+((sj1*x1702))+((x1705*x1708))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1709=(r21*sj5);
IkReal x1710=(cj5*r20);
IkReal x1711=IKsin(j3);
IkReal x1712=(cj1*x1711);
IkReal x1713=IKcos(j3);
IkReal x1714=(sj1*x1713);
IkReal x1715=(cj1*x1713);
IkReal x1716=(sj1*x1711);
IkReal x1717=((((-1.0)*x1716))+x1715);
IkReal x1718=((1.0)*sj4);
IkReal x1719=(cj0*r11);
IkReal x1720=(sj5*x1719);
IkReal x1721=(cj5*r00*sj0);
IkReal x1722=((1.0)*cj0);
IkReal x1723=(cj5*r10);
IkReal x1724=(r01*sj0*sj5);
IkReal x1725=((1.1e-7)*cj5);
IkReal x1726=((1.1e-7)*sj5);
IkReal x1727=(cj5*sj4);
IkReal x1728=(r01*sj0);
IkReal x1729=(r00*sj0);
IkReal x1730=(sj4*sj5);
evalcond[0]=((((-1.0)*x1714))+(((-1.0)*x1712))+(((-1.0)*x1710))+x1709);
evalcond[1]=((((-1.0)*cj5*r21*x1718))+(((-1.0)*r20*sj5*x1718))+(((-1.0)*(1.0)*cj4*r22))+x1717);
evalcond[2]=((((-1.0)*x1724))+x1721+(((-1.0)*x1722*x1723))+x1720+x1717);
evalcond[3]=((((0.00025)*x1710))+((r20*x1726))+(((-0.078)*x1716))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+((r21*x1725))+(((0.078)*x1715))+(((-0.00025)*x1709)));
evalcond[4]=((((-1.0)*cj0*r10*x1730))+((cj4*r02*sj0))+((x1729*x1730))+(((-1.0)*cj4*r12*x1722))+((x1727*x1728))+(((-1.0)*cj0*r11*x1727))+x1712+x1714);
evalcond[5]=((((0.00025)*cj0*x1723))+(((-0.00025)*x1720))+((cj0*r10*x1726))+((x1719*x1725))+(((0.00025)*x1724))+((px*sj0))+(((-1.0)*py*x1722))+(((-0.00025)*x1721))+(((0.1515)*sj1))+(((0.078)*x1712))+(((-1.0)*x1725*x1728))+(((0.078)*x1714))+(((-1.0)*x1726*x1729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=cj1;
j3eval[1]=IKsign(cj1);
j3eval[2]=((IKabs(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))))+(IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj1;
j3eval[1]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))))+IKsqr((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))), (((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1731=(r21*sj5);
IkReal x1732=(cj5*r20);
IkReal x1733=IKsin(j3);
IkReal x1734=((-1.0)*x1733);
IkReal x1735=IKcos(j3);
IkReal x1736=((1.0)*sj4);
IkReal x1737=(cj0*cj5*r00);
IkReal x1738=(cj5*r10*sj0);
IkReal x1739=(cj0*r01*sj5);
IkReal x1740=(r11*sj0*sj5);
IkReal x1741=((1.1e-7)*cj5);
IkReal x1742=((1.1e-7)*sj5);
IkReal x1743=(cj0*r01);
IkReal x1744=(cj5*sj4);
IkReal x1745=(cj0*r00);
IkReal x1746=(sj4*sj5);
IkReal x1747=(r11*sj0);
IkReal x1748=(r10*sj0);
evalcond[0]=((((-1.0)*x1732))+x1734+x1731);
evalcond[1]=((((-1.0)*cj5*r21*x1736))+x1735+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x1736)));
evalcond[2]=(x1737+x1738+(((-1.0)*x1739))+(((-1.0)*x1735))+(((-1.0)*x1740)));
evalcond[3]=((0.1515)+(((0.078)*x1735))+((r20*x1742))+(((0.00025)*x1732))+((r21*x1741))+(((-0.00025)*x1731))+(((-1.0)*(1.0)*pz)));
evalcond[4]=(((x1744*x1747))+x1734+((x1743*x1744))+((x1746*x1748))+((cj4*r12*sj0))+((x1745*x1746))+((cj0*cj4*r02)));
evalcond[5]=((0.00945)+(((-0.078)*x1733))+((cj0*px))+((py*sj0))+(((-1.0)*x1741*x1743))+(((-0.00025)*x1737))+(((-1.0)*x1741*x1747))+(((0.00025)*x1740))+(((-0.00025)*x1738))+(((-1.0)*x1742*x1745))+(((-1.0)*x1742*x1748))+(((0.00025)*x1739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1749=((1.0)*r21);
if( IKabs((((cj5*r20))+(((-1.0)*sj5*x1749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*cj5*sj4*x1749))+(((-1.0)*(1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((-1.0)*sj5*x1749))))+IKsqr(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*cj5*sj4*x1749))+(((-1.0)*(1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((-1.0)*sj5*x1749))), ((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*cj5*sj4*x1749))+(((-1.0)*(1.0)*cj4*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1750=IKsin(j3);
IkReal x1751=(r21*sj5);
IkReal x1752=(cj5*r20);
IkReal x1753=IKcos(j3);
IkReal x1754=((-1.0)*x1753);
IkReal x1755=((1.0)*sj4);
IkReal x1756=(cj0*cj5*r00);
IkReal x1757=(cj5*r10*sj0);
IkReal x1758=(cj0*r01*sj5);
IkReal x1759=(r11*sj0*sj5);
IkReal x1760=((1.1e-7)*cj5);
IkReal x1761=((1.1e-7)*sj5);
IkReal x1762=(cj0*r01);
IkReal x1763=(cj5*sj4);
IkReal x1764=(cj0*r00);
IkReal x1765=(sj4*sj5);
IkReal x1766=(r11*sj0);
IkReal x1767=(r10*sj0);
evalcond[0]=(x1750+x1751+(((-1.0)*x1752)));
evalcond[1]=((((-1.0)*r20*sj5*x1755))+(((-1.0)*(1.0)*cj4*r22))+x1754+(((-1.0)*cj5*r21*x1755)));
evalcond[2]=(x1756+x1757+(((-1.0)*x1758))+x1754+(((-1.0)*x1759)));
evalcond[3]=((-0.1515)+((r21*x1760))+(((0.00025)*x1752))+((r20*x1761))+(((-0.078)*x1753))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x1751)));
evalcond[4]=(((x1762*x1763))+(((-1.0)*x1750))+((x1765*x1767))+((x1764*x1765))+((cj4*r12*sj0))+((x1763*x1766))+((cj0*cj4*r02)));
evalcond[5]=((0.00945)+(((-1.0)*x1760*x1762))+((cj0*px))+((py*sj0))+(((-0.00025)*x1757))+(((0.00025)*x1759))+(((0.00025)*x1758))+(((-0.00025)*x1756))+(((-0.078)*x1750))+(((-1.0)*x1761*x1764))+(((-1.0)*x1760*x1766))+(((-1.0)*x1761*x1767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1768=IKPowWithIntegerCheck(sj1,-1);
if(!x1768.valid){
continue;
}
CheckValue<IkReal> x1769=IKPowWithIntegerCheck(cj1,-1);
if(!x1769.valid){
continue;
}
if( IKabs(((x1768.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1769.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1768.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))))))+IKsqr(((x1769.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1768.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))))), ((x1769.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1770=(r21*sj5);
IkReal x1771=(cj5*r20);
IkReal x1772=IKsin(j3);
IkReal x1773=((1.0)*x1772);
IkReal x1774=IKcos(j3);
IkReal x1775=(cj1*x1774);
IkReal x1776=((1.0)*sj4);
IkReal x1777=(cj5*r00);
IkReal x1778=(cj0*x1777);
IkReal x1779=(cj5*r10);
IkReal x1780=(sj0*x1779);
IkReal x1781=((1.0)*cj0);
IkReal x1782=(r01*sj5);
IkReal x1783=((1.0)*sj0);
IkReal x1784=(cj0*r11);
IkReal x1785=(sj5*x1784);
IkReal x1786=(sj0*x1777);
IkReal x1787=((1.1e-7)*cj5);
IkReal x1788=(cj4*r02);
IkReal x1789=(cj4*r12);
IkReal x1790=(cj0*r01);
IkReal x1791=(cj5*sj4);
IkReal x1792=(r00*sj4*sj5);
IkReal x1793=(cj5*sj0*sj4);
IkReal x1794=(r10*sj4*sj5);
IkReal x1795=(sj1*x1774);
IkReal x1796=((1.1e-7)*cj0*sj5);
IkReal x1797=((1.1e-7)*cj5*sj0);
IkReal x1798=((1.1e-7)*sj0*sj5);
IkReal x1799=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*cj1*x1773))+(((-1.0)*x1771))+x1770);
evalcond[1]=(x1775+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x1776))+(((-1.0)*cj5*r21*x1776)));
evalcond[2]=((((-1.0)*x1774))+(((-1.0)*r11*sj5*x1783))+x1780+(((-1.0)*x1781*x1782))+x1778);
evalcond[3]=((((-1.0)*x1782*x1783))+(((-1.0)*x1779*x1781))+x1786+(((-1.0)*sj1*x1773))+x1785);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((0.00025)*x1771))+((r21*x1787))+(((-0.00025)*x1770))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((0.078)*x1775))+(((-1.0)*(0.00025)*sj1)));
evalcond[5]=(((cj0*x1788))+((sj0*x1789))+(((-1.0)*x1773))+((cj0*x1792))+((x1790*x1791))+((r11*x1793))+((sj0*x1794)));
evalcond[6]=((((-1.0)*x1781*x1789))+((sj0*x1792))+((sj0*x1788))+(((-1.0)*x1781*x1794))+((r01*x1793))+(((-1.0)*cj0*r11*x1791))+x1795);
evalcond[7]=((0.00945)+(((-1.0)*r00*x1796))+(((-1.0)*x1787*x1790))+(((-0.00025)*x1780))+((cj0*px))+((py*sj0))+(((-0.078)*x1772))+(((-1.0)*r10*x1798))+(((-0.00025)*x1778))+(((0.00025)*sj5*x1790))+(((-1.0)*r11*x1797))+((r11*x1799)));
evalcond[8]=((((0.00025)*cj0*x1779))+(((0.078)*x1795))+((r01*x1799))+(((-1.0)*r00*x1798))+((px*sj0))+(((0.00025)*cj1))+((r10*x1796))+(((-1.0)*py*x1781))+(((0.1515)*sj1))+(((-0.00025)*x1786))+(((-1.0)*r01*x1797))+((x1784*x1787))+(((-0.00025)*x1785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1800=((1.0)*sj5);
CheckValue<IkReal> x1801=IKPowWithIntegerCheck(cj1,-1);
if(!x1801.valid){
continue;
}
if( IKabs(((x1801.value)*(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj0*x1800))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x1800))+((cj0*cj5*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1801.value)*(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))))))+IKsqr(((((-1.0)*r11*sj0*x1800))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x1800))+((cj0*cj5*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1801.value)*(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))))), ((((-1.0)*r11*sj0*x1800))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x1800))+((cj0*cj5*r00))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1802=(r21*sj5);
IkReal x1803=(cj5*r20);
IkReal x1804=IKsin(j3);
IkReal x1805=((1.0)*x1804);
IkReal x1806=IKcos(j3);
IkReal x1807=(cj1*x1806);
IkReal x1808=((1.0)*sj4);
IkReal x1809=(cj5*r00);
IkReal x1810=(cj0*x1809);
IkReal x1811=(cj5*r10);
IkReal x1812=(sj0*x1811);
IkReal x1813=((1.0)*cj0);
IkReal x1814=(r01*sj5);
IkReal x1815=((1.0)*sj0);
IkReal x1816=(cj0*r11);
IkReal x1817=(sj5*x1816);
IkReal x1818=(sj0*x1809);
IkReal x1819=((1.1e-7)*cj5);
IkReal x1820=(cj4*r02);
IkReal x1821=(cj4*r12);
IkReal x1822=(cj0*r01);
IkReal x1823=(cj5*sj4);
IkReal x1824=(r00*sj4*sj5);
IkReal x1825=(cj5*sj0*sj4);
IkReal x1826=(r10*sj4*sj5);
IkReal x1827=(sj1*x1806);
IkReal x1828=((1.1e-7)*cj0*sj5);
IkReal x1829=((1.1e-7)*cj5*sj0);
IkReal x1830=((1.1e-7)*sj0*sj5);
IkReal x1831=((0.00025)*sj0*sj5);
evalcond[0]=(x1802+(((-1.0)*x1803))+(((-1.0)*cj1*x1805)));
evalcond[1]=(x1807+(((-1.0)*cj5*r21*x1808))+(((-1.0)*r20*sj5*x1808))+(((-1.0)*(1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*x1806))+x1810+x1812+(((-1.0)*r11*sj5*x1815))+(((-1.0)*x1813*x1814)));
evalcond[3]=((((-1.0)*x1814*x1815))+(((-1.0)*x1811*x1813))+x1818+x1817+(((-1.0)*sj1*x1805)));
evalcond[4]=((((0.078)*x1807))+((r20*(((1.1e-7)*sj5))))+(((-0.00025)*x1802))+(((0.00025)*x1803))+((r21*x1819))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.00025)*sj1)));
evalcond[5]=((((-1.0)*x1805))+((sj0*x1821))+((r11*x1825))+((sj0*x1826))+((cj0*x1824))+((x1822*x1823))+((cj0*x1820)));
evalcond[6]=((((-1.0)*cj0*r11*x1823))+((r01*x1825))+(((-1.0)*x1813*x1821))+(((-1.0)*x1813*x1826))+((sj0*x1820))+x1827+((sj0*x1824)));
evalcond[7]=((0.00945)+(((-0.00025)*x1812))+(((-1.0)*x1819*x1822))+((cj0*px))+(((-1.0)*r11*x1829))+((r11*x1831))+((py*sj0))+(((-0.00025)*x1810))+(((-0.078)*x1804))+(((-1.0)*r00*x1828))+(((0.00025)*sj5*x1822))+(((-1.0)*r10*x1830)));
evalcond[8]=((((-1.0)*py*x1813))+(((-0.00025)*x1818))+(((-1.0)*r01*x1829))+((px*sj0))+(((0.00025)*cj1))+(((-0.00025)*x1817))+((x1816*x1819))+(((0.1515)*sj1))+(((-1.0)*r00*x1830))+(((0.078)*x1827))+(((0.00025)*cj0*x1811))+((r01*x1831))+((r10*x1828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1832 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))),IkReal((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1832.valid){
continue;
}
CheckValue<IkReal> x1833=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x1833.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1832.value)+(((1.5707963267949)*(x1833.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1834=(r21*sj5);
IkReal x1835=(cj5*r20);
IkReal x1836=IKsin(j3);
IkReal x1837=((1.0)*x1836);
IkReal x1838=IKcos(j3);
IkReal x1839=(cj1*x1838);
IkReal x1840=((1.0)*sj4);
IkReal x1841=(cj5*r00);
IkReal x1842=(cj0*x1841);
IkReal x1843=(cj5*r10);
IkReal x1844=(sj0*x1843);
IkReal x1845=((1.0)*cj0);
IkReal x1846=(r01*sj5);
IkReal x1847=((1.0)*sj0);
IkReal x1848=(cj0*r11);
IkReal x1849=(sj5*x1848);
IkReal x1850=(sj0*x1841);
IkReal x1851=((1.1e-7)*cj5);
IkReal x1852=(cj4*r02);
IkReal x1853=(cj4*r12);
IkReal x1854=(cj0*r01);
IkReal x1855=(cj5*sj4);
IkReal x1856=(r00*sj4*sj5);
IkReal x1857=(cj5*sj0*sj4);
IkReal x1858=(r10*sj4*sj5);
IkReal x1859=(sj1*x1838);
IkReal x1860=((1.1e-7)*cj0*sj5);
IkReal x1861=((1.1e-7)*cj5*sj0);
IkReal x1862=((1.1e-7)*sj0*sj5);
IkReal x1863=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*cj1*x1837))+(((-1.0)*x1835))+x1834);
evalcond[1]=((((-1.0)*r20*sj5*x1840))+x1839+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x1840)));
evalcond[2]=((((-1.0)*r11*sj5*x1847))+(((-1.0)*x1838))+(((-1.0)*x1845*x1846))+x1842+x1844);
evalcond[3]=(x1849+(((-1.0)*x1846*x1847))+(((-1.0)*sj1*x1837))+(((-1.0)*x1843*x1845))+x1850);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((-0.00025)*x1834))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((0.00025)*x1835))+(((-1.0)*(0.00025)*sj1))+(((0.078)*x1839))+((r21*x1851)));
evalcond[5]=(((x1854*x1855))+((cj0*x1852))+((sj0*x1853))+((cj0*x1856))+((sj0*x1858))+((r11*x1857))+(((-1.0)*x1837)));
evalcond[6]=(((sj0*x1856))+(((-1.0)*x1845*x1853))+((sj0*x1852))+(((-1.0)*x1845*x1858))+(((-1.0)*cj0*r11*x1855))+((r01*x1857))+x1859);
evalcond[7]=((0.00945)+(((-0.00025)*x1844))+(((0.00025)*sj5*x1854))+((cj0*px))+(((-1.0)*r00*x1860))+((py*sj0))+(((-1.0)*r10*x1862))+((r11*x1863))+(((-0.00025)*x1842))+(((-0.078)*x1836))+(((-1.0)*x1851*x1854))+(((-1.0)*r11*x1861)));
evalcond[8]=((((-0.00025)*x1850))+((px*sj0))+(((0.00025)*cj1))+(((-1.0)*r01*x1861))+(((-1.0)*py*x1845))+(((-1.0)*r00*x1862))+(((0.00025)*cj0*x1843))+(((0.1515)*sj1))+(((-0.00025)*x1849))+((x1848*x1851))+((r01*x1863))+((r10*x1860))+(((0.078)*x1859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=cj1;
j3eval[1]=IKsign(cj1);
j3eval[2]=((IKabs(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))))+(IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj1;
j3eval[1]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))))+IKsqr((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))), (((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1864=(r21*sj5);
IkReal x1865=(cj5*r20);
IkReal x1866=IKsin(j3);
IkReal x1867=IKcos(j3);
IkReal x1868=((1.0)*sj4);
IkReal x1869=(cj0*cj5*r00);
IkReal x1870=(cj5*r10*sj0);
IkReal x1871=(cj0*r01*sj5);
IkReal x1872=(r11*sj0*sj5);
IkReal x1873=((1.1e-7)*cj5);
IkReal x1874=((1.1e-7)*sj5);
IkReal x1875=(cj0*r01);
IkReal x1876=(cj5*sj4);
IkReal x1877=(cj0*r00);
IkReal x1878=(sj4*sj5);
IkReal x1879=(r11*sj0);
IkReal x1880=(r10*sj0);
evalcond[0]=((((-1.0)*x1865))+x1864+(((-1.0)*x1866)));
evalcond[1]=((((-1.0)*r20*sj5*x1868))+(((-1.0)*cj5*r21*x1868))+x1867+(((-1.0)*(1.0)*cj4*r22)));
evalcond[2]=(x1867+x1869+x1870+(((-1.0)*x1871))+(((-1.0)*x1872)));
evalcond[3]=((0.1515)+((r21*x1873))+(((0.078)*x1867))+(((-1.0)*(1.0)*pz))+(((0.00025)*x1865))+((r20*x1874))+(((-0.00025)*x1864)));
evalcond[4]=(((x1878*x1880))+x1866+((x1875*x1876))+((x1877*x1878))+((cj4*r12*sj0))+((x1876*x1879))+((cj0*cj4*r02)));
evalcond[5]=((0.00945)+(((-1.0)*x1873*x1879))+(((-0.00025)*x1869))+(((-1.0)*x1874*x1877))+(((-1.0)*x1873*x1875))+((cj0*px))+((py*sj0))+(((-1.0)*x1874*x1880))+(((0.00025)*x1872))+(((0.078)*x1866))+(((-0.00025)*x1870))+(((0.00025)*x1871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1881=((1.0)*r21);
if( IKabs(((((-1.0)*sj5*x1881))+((cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*sj4*x1881)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x1881))+((cj5*r20))))+IKsqr(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*sj4*x1881))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj5*x1881))+((cj5*r20))), ((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*sj4*x1881))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1882=IKsin(j3);
IkReal x1883=(r21*sj5);
IkReal x1884=(cj5*r20);
IkReal x1885=IKcos(j3);
IkReal x1886=((1.0)*sj4);
IkReal x1887=(cj0*cj5*r00);
IkReal x1888=(cj5*r10*sj0);
IkReal x1889=(cj0*r01*sj5);
IkReal x1890=(r11*sj0*sj5);
IkReal x1891=((1.1e-7)*cj5);
IkReal x1892=((1.1e-7)*sj5);
IkReal x1893=(cj0*r01);
IkReal x1894=(cj5*sj4);
IkReal x1895=(cj0*r00);
IkReal x1896=(sj4*sj5);
IkReal x1897=(r11*sj0);
IkReal x1898=(r10*sj0);
evalcond[0]=(x1882+(((-1.0)*x1884))+x1883);
evalcond[1]=((((-1.0)*cj5*r21*x1886))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x1886))+(((-1.0)*x1885)));
evalcond[2]=((((-1.0)*x1890))+x1885+x1888+(((-1.0)*x1889))+x1887);
evalcond[3]=((-0.1515)+(((-0.00025)*x1883))+(((-1.0)*(1.0)*pz))+((r21*x1891))+(((-0.078)*x1885))+((r20*x1892))+(((0.00025)*x1884)));
evalcond[4]=(((x1893*x1894))+x1882+((x1895*x1896))+((x1896*x1898))+((cj4*r12*sj0))+((cj0*cj4*r02))+((x1894*x1897)));
evalcond[5]=((0.00945)+(((-1.0)*x1891*x1893))+((cj0*px))+((py*sj0))+(((-0.00025)*x1888))+(((-0.00025)*x1887))+(((-1.0)*x1892*x1895))+(((0.00025)*x1890))+(((-1.0)*x1892*x1898))+(((0.078)*x1882))+(((0.00025)*x1889))+(((-1.0)*x1891*x1897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1899=IKPowWithIntegerCheck(sj1,-1);
if(!x1899.valid){
continue;
}
CheckValue<IkReal> x1900=IKPowWithIntegerCheck(cj1,-1);
if(!x1900.valid){
continue;
}
if( IKabs(((x1899.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1900.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1899.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))))))+IKsqr(((x1900.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1899.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))))), ((x1900.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1901=(r21*sj5);
IkReal x1902=(cj5*r20);
IkReal x1903=IKsin(j3);
IkReal x1904=((1.0)*x1903);
IkReal x1905=IKcos(j3);
IkReal x1906=(cj1*x1905);
IkReal x1907=((1.0)*sj4);
IkReal x1908=(cj5*r00);
IkReal x1909=(cj0*x1908);
IkReal x1910=(cj5*r10);
IkReal x1911=(sj0*x1910);
IkReal x1912=((1.0)*cj0);
IkReal x1913=(r01*sj5);
IkReal x1914=((1.0)*sj0);
IkReal x1915=(cj0*r11);
IkReal x1916=(sj5*x1915);
IkReal x1917=(sj0*x1908);
IkReal x1918=((1.1e-7)*cj5);
IkReal x1919=(cj4*r02);
IkReal x1920=(cj4*r12);
IkReal x1921=(cj0*r01);
IkReal x1922=(cj5*sj4);
IkReal x1923=(r00*sj4*sj5);
IkReal x1924=(cj5*sj0*sj4);
IkReal x1925=(r10*sj4*sj5);
IkReal x1926=(sj1*x1905);
IkReal x1927=((1.1e-7)*cj0*sj5);
IkReal x1928=((1.1e-7)*cj5*sj0);
IkReal x1929=((1.1e-7)*sj0*sj5);
IkReal x1930=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*cj1*x1904))+(((-1.0)*x1902))+x1901);
evalcond[1]=((((-1.0)*r20*sj5*x1907))+x1906+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x1907)));
evalcond[2]=(x1905+(((-1.0)*r11*sj5*x1914))+(((-1.0)*x1912*x1913))+x1909+x1911);
evalcond[3]=(x1916+(((-1.0)*sj1*x1904))+x1917+(((-1.0)*x1910*x1912))+(((-1.0)*x1913*x1914)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+((r21*x1918))+(((-0.00025)*x1901))+(((0.00025)*sj1))+(((0.00025)*x1902))+(((0.078)*x1906)));
evalcond[5]=(((x1921*x1922))+((sj0*x1925))+((cj0*x1919))+x1903+((cj0*x1923))+((sj0*x1920))+((r11*x1924)));
evalcond[6]=((((-1.0)*x1912*x1920))+(((-1.0)*cj0*r11*x1922))+(((-1.0)*x1912*x1925))+((sj0*x1923))+((sj0*x1919))+((r01*x1924))+x1926);
evalcond[7]=((0.00945)+(((-1.0)*x1918*x1921))+(((-1.0)*r00*x1927))+(((0.078)*x1903))+(((0.00025)*sj5*x1921))+((cj0*px))+((py*sj0))+(((-0.00025)*x1909))+(((-1.0)*r10*x1929))+(((-1.0)*r11*x1928))+((r11*x1930))+(((-0.00025)*x1911)));
evalcond[8]=((((-0.00025)*x1917))+((r01*x1930))+((px*sj0))+((x1915*x1918))+(((0.1515)*sj1))+(((-1.0)*py*x1912))+((r10*x1927))+(((-1.0)*r00*x1929))+(((-1.0)*r01*x1928))+(((-1.0)*(0.00025)*cj1))+(((0.00025)*cj0*x1910))+(((0.078)*x1926))+(((-0.00025)*x1916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1931=((1.0)*cj5);
CheckValue<IkReal> x1932=IKPowWithIntegerCheck(cj1,-1);
if(!x1932.valid){
continue;
}
if( IKabs(((x1932.value)*(((((-1.0)*r20*x1931))+((r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r00*x1931))+((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1931))+((cj0*r01*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1932.value)*(((((-1.0)*r20*x1931))+((r21*sj5))))))+IKsqr(((((-1.0)*cj0*r00*x1931))+((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1931))+((cj0*r01*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1932.value)*(((((-1.0)*r20*x1931))+((r21*sj5))))), ((((-1.0)*cj0*r00*x1931))+((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1931))+((cj0*r01*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1933=(r21*sj5);
IkReal x1934=(cj5*r20);
IkReal x1935=IKsin(j3);
IkReal x1936=((1.0)*x1935);
IkReal x1937=IKcos(j3);
IkReal x1938=(cj1*x1937);
IkReal x1939=((1.0)*sj4);
IkReal x1940=(cj5*r00);
IkReal x1941=(cj0*x1940);
IkReal x1942=(cj5*r10);
IkReal x1943=(sj0*x1942);
IkReal x1944=((1.0)*cj0);
IkReal x1945=(r01*sj5);
IkReal x1946=((1.0)*sj0);
IkReal x1947=(cj0*r11);
IkReal x1948=(sj5*x1947);
IkReal x1949=(sj0*x1940);
IkReal x1950=((1.1e-7)*cj5);
IkReal x1951=(cj4*r02);
IkReal x1952=(cj4*r12);
IkReal x1953=(cj0*r01);
IkReal x1954=(cj5*sj4);
IkReal x1955=(r00*sj4*sj5);
IkReal x1956=(cj5*sj0*sj4);
IkReal x1957=(r10*sj4*sj5);
IkReal x1958=(sj1*x1937);
IkReal x1959=((1.1e-7)*cj0*sj5);
IkReal x1960=((1.1e-7)*cj5*sj0);
IkReal x1961=((1.1e-7)*sj0*sj5);
IkReal x1962=((0.00025)*sj0*sj5);
evalcond[0]=(x1933+(((-1.0)*x1934))+(((-1.0)*cj1*x1936)));
evalcond[1]=((((-1.0)*r20*sj5*x1939))+(((-1.0)*cj5*r21*x1939))+(((-1.0)*(1.0)*cj4*r22))+x1938);
evalcond[2]=((((-1.0)*r11*sj5*x1946))+(((-1.0)*x1944*x1945))+x1943+x1937+x1941);
evalcond[3]=((((-1.0)*x1945*x1946))+(((-1.0)*sj1*x1936))+(((-1.0)*x1942*x1944))+x1949+x1948);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((0.078)*x1938))+(((-0.00025)*x1933))+(((0.00025)*x1934))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((0.00025)*sj1))+((r21*x1950)));
evalcond[5]=(((cj0*x1955))+x1935+((x1953*x1954))+((cj0*x1951))+((sj0*x1957))+((r11*x1956))+((sj0*x1952)));
evalcond[6]=(((r01*x1956))+((sj0*x1955))+(((-1.0)*x1944*x1957))+(((-1.0)*x1944*x1952))+((sj0*x1951))+(((-1.0)*cj0*r11*x1954))+x1958);
evalcond[7]=((0.00945)+(((0.078)*x1935))+(((-0.00025)*x1941))+(((-1.0)*x1950*x1953))+((cj0*px))+((py*sj0))+((r11*x1962))+(((-1.0)*r00*x1959))+(((-1.0)*r11*x1960))+(((-0.00025)*x1943))+(((0.00025)*sj5*x1953))+(((-1.0)*r10*x1961)));
evalcond[8]=((((-1.0)*r00*x1961))+(((0.078)*x1958))+((px*sj0))+(((0.00025)*cj0*x1942))+(((-0.00025)*x1948))+(((0.1515)*sj1))+(((-1.0)*py*x1944))+(((-0.00025)*x1949))+((r01*x1962))+((x1947*x1950))+((r10*x1959))+(((-1.0)*(0.00025)*cj1))+(((-1.0)*r01*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x1963 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))),IkReal((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1963.valid){
continue;
}
CheckValue<IkReal> x1964=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x1964.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1963.value)+(((1.5707963267949)*(x1964.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x1965=(r21*sj5);
IkReal x1966=(cj5*r20);
IkReal x1967=IKsin(j3);
IkReal x1968=((1.0)*x1967);
IkReal x1969=IKcos(j3);
IkReal x1970=(cj1*x1969);
IkReal x1971=((1.0)*sj4);
IkReal x1972=(cj5*r00);
IkReal x1973=(cj0*x1972);
IkReal x1974=(cj5*r10);
IkReal x1975=(sj0*x1974);
IkReal x1976=((1.0)*cj0);
IkReal x1977=(r01*sj5);
IkReal x1978=((1.0)*sj0);
IkReal x1979=(cj0*r11);
IkReal x1980=(sj5*x1979);
IkReal x1981=(sj0*x1972);
IkReal x1982=((1.1e-7)*cj5);
IkReal x1983=(cj4*r02);
IkReal x1984=(cj4*r12);
IkReal x1985=(cj0*r01);
IkReal x1986=(cj5*sj4);
IkReal x1987=(r00*sj4*sj5);
IkReal x1988=(cj5*sj0*sj4);
IkReal x1989=(r10*sj4*sj5);
IkReal x1990=(sj1*x1969);
IkReal x1991=((1.1e-7)*cj0*sj5);
IkReal x1992=((1.1e-7)*cj5*sj0);
IkReal x1993=((1.1e-7)*sj0*sj5);
IkReal x1994=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*cj1*x1968))+x1965+(((-1.0)*x1966)));
evalcond[1]=((((-1.0)*cj5*r21*x1971))+(((-1.0)*(1.0)*cj4*r22))+x1970+(((-1.0)*r20*sj5*x1971)));
evalcond[2]=(x1973+(((-1.0)*r11*sj5*x1978))+(((-1.0)*x1976*x1977))+x1975+x1969);
evalcond[3]=((((-1.0)*sj1*x1968))+x1981+(((-1.0)*x1974*x1976))+(((-1.0)*x1977*x1978))+x1980);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((-0.00025)*x1965))+(((0.078)*x1970))+((r21*x1982))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((0.00025)*x1966))+(((0.00025)*sj1)));
evalcond[5]=(((sj0*x1984))+((cj0*x1987))+x1967+((r11*x1988))+((cj0*x1983))+((sj0*x1989))+((x1985*x1986)));
evalcond[6]=(((sj0*x1987))+(((-1.0)*x1976*x1984))+x1990+((r01*x1988))+(((-1.0)*cj0*r11*x1986))+(((-1.0)*x1976*x1989))+((sj0*x1983)));
evalcond[7]=((0.00945)+((r11*x1994))+(((-1.0)*x1982*x1985))+(((-0.00025)*x1975))+((cj0*px))+((py*sj0))+(((0.078)*x1967))+(((-1.0)*r00*x1991))+(((-1.0)*r11*x1992))+(((0.00025)*sj5*x1985))+(((-0.00025)*x1973))+(((-1.0)*r10*x1993)));
evalcond[8]=((((0.078)*x1990))+(((-0.00025)*x1980))+(((-0.00025)*x1981))+((px*sj0))+(((0.1515)*sj1))+((r10*x1991))+(((-1.0)*r00*x1993))+((x1979*x1982))+(((-1.0)*r01*x1992))+(((-1.0)*py*x1976))+(((-1.0)*(0.00025)*cj1))+(((0.00025)*cj0*x1974))+((r01*x1994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2002=IKPowWithIntegerCheck(sj2,-1);
if(!x2002.valid){
continue;
}
IkReal x1995=x2002.value;
IkReal x1996=(cj2*sj1);
IkReal x1997=(cj0*cj5*r00);
IkReal x1998=(cj5*r10*sj0);
IkReal x1999=((1.0)*sj5);
IkReal x2000=(cj0*r01*x1999);
IkReal x2001=(r11*sj0*x1999);
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(cj1,-1);
if(!x2003.valid){
continue;
}
if( IKabs((x1995*(x2003.value)*((((x1996*x1997))+(((-1.0)*x1996*x2001))+(((-1.0)*x1996*x2000))+(((-1.0)*(1.0)*cj5*r20*sj2))+((r21*sj2*sj5))+((x1996*x1998)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1995*((x1998+(((-1.0)*x2001))+(((-1.0)*x2000))+x1997)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1995*(x2003.value)*((((x1996*x1997))+(((-1.0)*x1996*x2001))+(((-1.0)*x1996*x2000))+(((-1.0)*(1.0)*cj5*r20*sj2))+((r21*sj2*sj5))+((x1996*x1998))))))+IKsqr((x1995*((x1998+(((-1.0)*x2001))+(((-1.0)*x2000))+x1997))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x1995*(x2003.value)*((((x1996*x1997))+(((-1.0)*x1996*x2001))+(((-1.0)*x1996*x2000))+(((-1.0)*(1.0)*cj5*r20*sj2))+((r21*sj2*sj5))+((x1996*x1998))))), (x1995*((x1998+(((-1.0)*x2001))+(((-1.0)*x2000))+x1997))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2004=(r21*sj5);
IkReal x2005=(cj5*r20);
IkReal x2006=IKsin(j3);
IkReal x2007=((1.0)*x2006);
IkReal x2008=(cj1*x2007);
IkReal x2009=IKcos(j3);
IkReal x2010=(sj1*x2009);
IkReal x2011=(cj5*r00);
IkReal x2012=(cj0*x2011);
IkReal x2013=(cj5*r10);
IkReal x2014=(sj0*x2013);
IkReal x2015=((1.0)*cj0);
IkReal x2016=(r01*sj5);
IkReal x2017=((1.0)*sj0);
IkReal x2018=(cj1*x2009);
IkReal x2019=(cj2*sj1);
IkReal x2020=((1.0)*sj4);
IkReal x2021=(cj0*r11);
IkReal x2022=(sj5*x2021);
IkReal x2023=(sj0*x2011);
IkReal x2024=(cj4*r02);
IkReal x2025=(cj4*r12);
IkReal x2026=(cj0*r01);
IkReal x2027=(cj5*sj4);
IkReal x2028=(r00*sj4*sj5);
IkReal x2029=(cj5*sj0*sj4);
IkReal x2030=(r10*sj4*sj5);
IkReal x2031=((1.1e-7)*cj5);
IkReal x2032=((0.00025)*sj2);
IkReal x2033=((0.078)*x2006);
IkReal x2034=((1.1e-7)*cj0*sj5);
IkReal x2035=((1.1e-7)*cj5*sj0);
IkReal x2036=((1.1e-7)*sj0*sj5);
IkReal x2037=((0.00025)*sj0*sj5);
evalcond[0]=(((cj2*x2010))+(((-1.0)*x2008))+x2004+(((-1.0)*x2005)));
evalcond[1]=((((-1.0)*x2015*x2016))+(((-1.0)*r11*sj5*x2017))+x2014+(((-1.0)*sj2*x2009))+x2012);
evalcond[2]=((((-1.0)*cj5*r21*x2020))+(((-1.0)*(1.0)*cj4*r22))+((x2006*x2019))+x2018+(((-1.0)*r20*sj5*x2020)));
evalcond[3]=((((-1.0)*x2016*x2017))+x2022+x2023+(((-1.0)*sj1*x2007))+(((-1.0)*cj2*x2018))+(((-1.0)*x2013*x2015)));
evalcond[4]=(((cj0*x2024))+((cj0*x2028))+(((-1.0)*sj2*x2007))+((sj0*x2025))+((sj0*x2030))+((x2026*x2027))+((r11*x2029)));
evalcond[5]=(((r21*x2031))+((r20*(((1.1e-7)*sj5))))+(((0.00025)*x2005))+((x2019*x2033))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x2004))+(((0.078)*x2018))+(((-1.0)*sj1*x2032)));
evalcond[6]=(x2010+((sj0*x2024))+(((-1.0)*x2015*x2030))+(((-1.0)*cj0*r11*x2027))+(((-1.0)*cj2*x2008))+((r01*x2029))+(((-1.0)*x2015*x2025))+((sj0*x2028)));
evalcond[7]=((0.00945)+((r11*x2037))+(((-1.0)*r00*x2034))+((cj0*px))+((py*sj0))+(((-0.00025)*x2012))+(((-1.0)*x2026*x2031))+(((-1.0)*sj2*x2033))+(((-0.00025)*x2014))+(((0.00025)*sj5*x2026))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*r11*x2035))+(((-1.0)*r10*x2036)));
evalcond[8]=((((-1.0)*r00*x2036))+(((0.078)*x2010))+(((-1.0)*r01*x2035))+(((-1.0)*cj1*cj2*x2033))+((px*sj0))+((cj1*x2032))+(((-1.0)*py*x2015))+(((0.1515)*sj1))+((r10*x2034))+(((0.00025)*cj0*x2013))+((x2021*x2031))+(((-0.00025)*x2023))+((r01*x2037))+(((-0.00025)*x2022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2038=(r21*sj5);
IkReal x2039=((1.0)*cj1);
IkReal x2040=(cj5*r20);
IkReal x2041=(cj0*r11*sj5);
IkReal x2042=(cj5*r00*sj0);
IkReal x2043=((1.0)*sj1);
IkReal x2044=(cj0*cj5*r10);
IkReal x2045=(r01*sj0*sj5);
CheckValue<IkReal> x2046=IKPowWithIntegerCheck(cj2,-1);
if(!x2046.valid){
continue;
}
if( IKabs(((((-1.0)*x2039*x2040))+((sj1*x2042))+((cj1*x2038))+(((-1.0)*x2043*x2044))+((sj1*x2041))+(((-1.0)*x2043*x2045)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2046.value)*((((sj1*x2040))+(((-1.0)*x2039*x2044))+((cj1*x2041))+((cj1*x2042))+(((-1.0)*x2039*x2045))+(((-1.0)*x2038*x2043)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2039*x2040))+((sj1*x2042))+((cj1*x2038))+(((-1.0)*x2043*x2044))+((sj1*x2041))+(((-1.0)*x2043*x2045))))+IKsqr(((x2046.value)*((((sj1*x2040))+(((-1.0)*x2039*x2044))+((cj1*x2041))+((cj1*x2042))+(((-1.0)*x2039*x2045))+(((-1.0)*x2038*x2043))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x2039*x2040))+((sj1*x2042))+((cj1*x2038))+(((-1.0)*x2043*x2044))+((sj1*x2041))+(((-1.0)*x2043*x2045))), ((x2046.value)*((((sj1*x2040))+(((-1.0)*x2039*x2044))+((cj1*x2041))+((cj1*x2042))+(((-1.0)*x2039*x2045))+(((-1.0)*x2038*x2043))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2047=(r21*sj5);
IkReal x2048=(cj5*r20);
IkReal x2049=IKsin(j3);
IkReal x2050=((1.0)*x2049);
IkReal x2051=(cj1*x2050);
IkReal x2052=IKcos(j3);
IkReal x2053=(sj1*x2052);
IkReal x2054=(cj5*r00);
IkReal x2055=(cj0*x2054);
IkReal x2056=(cj5*r10);
IkReal x2057=(sj0*x2056);
IkReal x2058=((1.0)*cj0);
IkReal x2059=(r01*sj5);
IkReal x2060=((1.0)*sj0);
IkReal x2061=(cj1*x2052);
IkReal x2062=(cj2*sj1);
IkReal x2063=((1.0)*sj4);
IkReal x2064=(cj0*r11);
IkReal x2065=(sj5*x2064);
IkReal x2066=(sj0*x2054);
IkReal x2067=(cj4*r02);
IkReal x2068=(cj4*r12);
IkReal x2069=(cj0*r01);
IkReal x2070=(cj5*sj4);
IkReal x2071=(r00*sj4*sj5);
IkReal x2072=(cj5*sj0*sj4);
IkReal x2073=(r10*sj4*sj5);
IkReal x2074=((1.1e-7)*cj5);
IkReal x2075=((0.00025)*sj2);
IkReal x2076=((0.078)*x2049);
IkReal x2077=((1.1e-7)*cj0*sj5);
IkReal x2078=((1.1e-7)*cj5*sj0);
IkReal x2079=((1.1e-7)*sj0*sj5);
IkReal x2080=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x2051))+(((-1.0)*x2048))+((cj2*x2053))+x2047);
evalcond[1]=(x2055+(((-1.0)*sj2*x2052))+x2057+(((-1.0)*r11*sj5*x2060))+(((-1.0)*x2058*x2059)));
evalcond[2]=((((-1.0)*cj5*r21*x2063))+x2061+(((-1.0)*(1.0)*cj4*r22))+((x2049*x2062))+(((-1.0)*r20*sj5*x2063)));
evalcond[3]=(x2066+(((-1.0)*x2059*x2060))+(((-1.0)*x2056*x2058))+x2065+(((-1.0)*cj2*x2061))+(((-1.0)*sj1*x2050)));
evalcond[4]=(((sj0*x2068))+((r11*x2072))+((sj0*x2073))+((cj0*x2071))+(((-1.0)*sj2*x2050))+((x2069*x2070))+((cj0*x2067)));
evalcond[5]=(((r20*(((1.1e-7)*sj5))))+(((0.00025)*x2048))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((0.078)*x2061))+((r21*x2074))+((x2062*x2076))+(((-0.00025)*x2047))+(((-1.0)*sj1*x2075)));
evalcond[6]=((((-1.0)*x2058*x2068))+((sj0*x2071))+(((-1.0)*x2058*x2073))+x2053+((sj0*x2067))+(((-1.0)*cj0*r11*x2070))+(((-1.0)*cj2*x2051))+((r01*x2072)));
evalcond[7]=((0.00945)+(((-1.0)*sj2*x2076))+(((-1.0)*r11*x2078))+(((-1.0)*r00*x2077))+((cj0*px))+((py*sj0))+(((-0.00025)*x2057))+(((-1.0)*x2069*x2074))+(((-1.0)*r10*x2079))+(((0.00025)*sj5*x2069))+(((-1.0)*(0.00025)*cj2))+((r11*x2080))+(((-0.00025)*x2055)));
evalcond[8]=(((cj1*x2075))+(((-0.00025)*x2066))+(((-1.0)*r00*x2079))+((px*sj0))+(((-1.0)*py*x2058))+(((-1.0)*r01*x2078))+(((0.1515)*sj1))+(((0.078)*x2053))+((x2064*x2074))+(((-1.0)*cj1*cj2*x2076))+((r01*x2080))+(((0.00025)*cj0*x2056))+(((-0.00025)*x2065))+((r10*x2077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2081=cj1*cj1;
IkReal x2082=cj2*cj2;
IkReal x2083=(cj1*r21);
IkReal x2084=(cj1*r20);
IkReal x2085=(cj4*r22);
IkReal x2086=(cj5*sj4);
IkReal x2087=(cj2*r21*sj1);
IkReal x2088=(sj4*sj5);
IkReal x2089=(cj2*r20*sj1);
CheckValue<IkReal> x2090 = IKatan2WithCheck(IkReal((((x2086*x2087))+((sj5*x2083))+((cj2*sj1*x2085))+((x2088*x2089))+(((-1.0)*cj5*x2084)))),IkReal((((cj1*x2085))+(((-1.0)*sj5*x2087))+((x2083*x2086))+((cj5*x2089))+((x2084*x2088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2090.valid){
continue;
}
CheckValue<IkReal> x2091=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2081*x2082))+x2081+x2082)),-1);
if(!x2091.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2090.value)+(((1.5707963267949)*(x2091.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2092=(r21*sj5);
IkReal x2093=(cj5*r20);
IkReal x2094=IKsin(j3);
IkReal x2095=((1.0)*x2094);
IkReal x2096=(cj1*x2095);
IkReal x2097=IKcos(j3);
IkReal x2098=(sj1*x2097);
IkReal x2099=(cj5*r00);
IkReal x2100=(cj0*x2099);
IkReal x2101=(cj5*r10);
IkReal x2102=(sj0*x2101);
IkReal x2103=((1.0)*cj0);
IkReal x2104=(r01*sj5);
IkReal x2105=((1.0)*sj0);
IkReal x2106=(cj1*x2097);
IkReal x2107=(cj2*sj1);
IkReal x2108=((1.0)*sj4);
IkReal x2109=(cj0*r11);
IkReal x2110=(sj5*x2109);
IkReal x2111=(sj0*x2099);
IkReal x2112=(cj4*r02);
IkReal x2113=(cj4*r12);
IkReal x2114=(cj0*r01);
IkReal x2115=(cj5*sj4);
IkReal x2116=(r00*sj4*sj5);
IkReal x2117=(cj5*sj0*sj4);
IkReal x2118=(r10*sj4*sj5);
IkReal x2119=((1.1e-7)*cj5);
IkReal x2120=((0.00025)*sj2);
IkReal x2121=((0.078)*x2094);
IkReal x2122=((1.1e-7)*cj0*sj5);
IkReal x2123=((1.1e-7)*cj5*sj0);
IkReal x2124=((1.1e-7)*sj0*sj5);
IkReal x2125=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x2093))+x2092+((cj2*x2098))+(((-1.0)*x2096)));
evalcond[1]=((((-1.0)*x2103*x2104))+x2100+x2102+(((-1.0)*r11*sj5*x2105))+(((-1.0)*sj2*x2097)));
evalcond[2]=(((x2094*x2107))+(((-1.0)*cj5*r21*x2108))+(((-1.0)*r20*sj5*x2108))+(((-1.0)*(1.0)*cj4*r22))+x2106);
evalcond[3]=((((-1.0)*sj1*x2095))+(((-1.0)*x2101*x2103))+(((-1.0)*x2104*x2105))+(((-1.0)*cj2*x2106))+x2110+x2111);
evalcond[4]=(((cj0*x2116))+((cj0*x2112))+((sj0*x2118))+((r11*x2117))+(((-1.0)*sj2*x2095))+((x2114*x2115))+((sj0*x2113)));
evalcond[5]=(((r20*(((1.1e-7)*sj5))))+(((-0.00025)*x2092))+((r21*x2119))+((x2107*x2121))+(((0.078)*x2106))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((-1.0)*sj1*x2120))+(((0.00025)*x2093)));
evalcond[6]=(((r01*x2117))+((sj0*x2112))+(((-1.0)*cj2*x2096))+x2098+((sj0*x2116))+(((-1.0)*x2103*x2113))+(((-1.0)*x2103*x2118))+(((-1.0)*cj0*r11*x2115)));
evalcond[7]=((0.00945)+(((-1.0)*r10*x2124))+(((-0.00025)*x2100))+((cj0*px))+(((-0.00025)*x2102))+((py*sj0))+(((-1.0)*x2114*x2119))+(((0.00025)*sj5*x2114))+(((-1.0)*r11*x2123))+(((-1.0)*sj2*x2121))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*r00*x2122))+((r11*x2125)));
evalcond[8]=((((-0.00025)*x2111))+((px*sj0))+((x2109*x2119))+(((0.00025)*cj0*x2101))+(((-0.00025)*x2110))+(((0.078)*x2098))+(((0.1515)*sj1))+(((-1.0)*py*x2103))+(((-1.0)*r00*x2124))+((cj1*x2120))+(((-1.0)*cj1*cj2*x2121))+(((-1.0)*r01*x2123))+((r10*x2122))+((r01*x2125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2126=((1.0)*cj4);
IkReal x2127=((1.0)*sj4);
IkReal x2128=(cj0*cj4);
IkReal x2129=(cj4*sj0);
CheckValue<IkReal> x2130=IKPowWithIntegerCheck(sj1,-1);
if(!x2130.valid){
continue;
}
if( IKabs(((x2130.value)*(((((-1.0)*r20*sj5*x2126))+(((-1.0)*cj5*r21*x2126))+((r22*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r02*x2127))+((r10*sj5*x2129))+((cj5*r01*x2128))+((r00*sj5*x2128))+((cj5*r11*x2129))+(((-1.0)*r12*sj0*x2127)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2130.value)*(((((-1.0)*r20*sj5*x2126))+(((-1.0)*cj5*r21*x2126))+((r22*sj4))))))+IKsqr(((((-1.0)*cj0*r02*x2127))+((r10*sj5*x2129))+((cj5*r01*x2128))+((r00*sj5*x2128))+((cj5*r11*x2129))+(((-1.0)*r12*sj0*x2127))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x2130.value)*(((((-1.0)*r20*sj5*x2126))+(((-1.0)*cj5*r21*x2126))+((r22*sj4))))), ((((-1.0)*cj0*r02*x2127))+((r10*sj5*x2129))+((cj5*r01*x2128))+((r00*sj5*x2128))+((cj5*r11*x2129))+(((-1.0)*r12*sj0*x2127))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x2131=IKsin(j2);
IkReal x2132=((1.0)*cj4*cj5);
IkReal x2133=((1.0)*cj4*sj5);
IkReal x2134=((1.0)*r02);
IkReal x2135=(cj0*sj4);
IkReal x2136=(sj0*sj4);
IkReal x2137=(cj0*cj4);
IkReal x2138=(cj5*r01);
IkReal x2139=(r00*sj5);
IkReal x2140=(cj4*sj0);
evalcond[0]=((((-1.0)*sj1*x2131))+(((-1.0)*r20*x2133))+((r22*sj4))+(((-1.0)*r21*x2132)));
evalcond[1]=((((-1.0)*r12*x2136))+(((-1.0)*(1.0)*(IKcos(j2))))+((r10*sj5*x2140))+((x2137*x2138))+((x2137*x2139))+((cj5*r11*x2140))+(((-1.0)*x2134*x2135)));
evalcond[2]=(((r12*x2135))+((x2138*x2140))+(((-1.0)*cj0*r11*x2132))+((x2139*x2140))+(((-1.0)*cj0*r10*x2133))+(((-1.0)*x2134*x2136))+((cj1*x2131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
IkReal x2141=cj1*cj1;
IkReal x2142=cj2*cj2;
IkReal x2143=((((-1.0)*x2141*x2142))+x2142+x2141);
IkReal x2144=(cj4*r22);
IkReal x2145=(cj1*r21);
IkReal x2146=(cj5*sj4);
IkReal x2147=(cj1*r20);
IkReal x2148=(sj4*sj5);
IkReal x2149=(cj2*r20*sj1);
IkReal x2150=(cj2*r21*sj1);
j3eval[0]=x2143;
j3eval[1]=((IKabs((((cj1*x2144))+((x2145*x2146))+((cj5*x2149))+((x2147*x2148))+(((-1.0)*sj5*x2150)))))+(IKabs(((((-1.0)*cj5*x2147))+((x2148*x2149))+((sj5*x2145))+((cj2*sj1*x2144))+((x2146*x2150))))));
j3eval[2]=IKsign(x2143);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=cj1;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
j3eval[2]=((IKabs(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))))+(IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2151=(cj0*sj5);
IkReal x2152=(cj5*r00);
IkReal x2153=(cj5*r10);
IkReal x2154=((1.0)*r01);
IkReal x2155=(sj0*sj5);
if( IKabs(((((-1.0)*cj0*x2153))+((sj0*x2152))+((r11*x2151))+(((-1.0)*x2154*x2155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*x2152))+(((-1.0)*x2151*x2154))+((sj0*x2153))+(((-1.0)*r11*x2155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x2153))+((sj0*x2152))+((r11*x2151))+(((-1.0)*x2154*x2155))))+IKsqr((((cj0*x2152))+(((-1.0)*x2151*x2154))+((sj0*x2153))+(((-1.0)*r11*x2155))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*x2153))+((sj0*x2152))+((r11*x2151))+(((-1.0)*x2154*x2155))), (((cj0*x2152))+(((-1.0)*x2151*x2154))+((sj0*x2153))+(((-1.0)*r11*x2155))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2156=(cj5*r00);
IkReal x2157=(cj0*x2156);
IkReal x2158=(cj5*r10);
IkReal x2159=(sj0*x2158);
IkReal x2160=IKcos(j3);
IkReal x2161=((1.0)*cj0);
IkReal x2162=(r01*sj5);
IkReal x2163=((1.0)*sj0);
IkReal x2164=(cj0*r11);
IkReal x2165=(sj5*x2164);
IkReal x2166=(sj0*x2156);
IkReal x2167=IKsin(j3);
IkReal x2168=((-1.0)*x2167);
IkReal x2169=(cj4*r02);
IkReal x2170=(cj4*r12);
IkReal x2171=(cj0*r01);
IkReal x2172=(cj5*sj4);
IkReal x2173=(r00*sj4*sj5);
IkReal x2174=(cj5*sj0*sj4);
IkReal x2175=(r10*sj4*sj5);
IkReal x2176=((1.1e-7)*cj5);
IkReal x2177=((1.1e-7)*cj0*sj5);
IkReal x2178=((1.1e-7)*cj5*sj0);
IkReal x2179=((1.1e-7)*sj0*sj5);
IkReal x2180=((0.00025)*sj0*sj5);
evalcond[0]=(x2157+(((-1.0)*x2160))+(((-1.0)*x2161*x2162))+(((-1.0)*r11*sj5*x2163))+x2159);
evalcond[1]=(x2166+(((-1.0)*x2162*x2163))+(((-1.0)*x2158*x2161))+x2168+x2165);
evalcond[2]=(((cj0*x2173))+((sj0*x2170))+((r11*x2174))+((x2171*x2172))+((sj0*x2175))+((cj0*x2169))+x2168);
evalcond[3]=((((-1.0)*x2161*x2175))+x2160+((sj0*x2173))+(((-1.0)*cj0*r11*x2172))+(((-1.0)*x2161*x2170))+((sj0*x2169))+((r01*x2174)));
evalcond[4]=((0.00945)+(((-0.00025)*x2159))+(((-1.0)*r10*x2179))+(((-0.078)*x2167))+((cj0*px))+((py*sj0))+(((-1.0)*r00*x2177))+(((-0.00025)*x2157))+(((-1.0)*r11*x2178))+((r11*x2180))+(((-1.0)*x2171*x2176))+(((0.00025)*sj5*x2171)));
evalcond[5]=((0.1515)+((r10*x2177))+(((-1.0)*py*x2161))+(((0.00025)*cj0*x2158))+((x2164*x2176))+((r01*x2180))+((px*sj0))+(((-1.0)*r01*x2178))+(((-0.00025)*x2165))+(((-0.00025)*x2166))+(((-1.0)*r00*x2179))+(((0.078)*x2160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2181=(cj0*sj5);
IkReal x2182=(cj5*r00);
IkReal x2183=((1.0)*cj0);
IkReal x2184=(cj5*r10);
IkReal x2185=(sj0*sj5);
if( IKabs(((((-1.0)*r01*x2185))+((r11*x2181))+((sj0*x2182))+(((-1.0)*x2183*x2184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2185))+(((-1.0)*x2182*x2183))+(((-1.0)*sj0*x2184))+((r01*x2181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2185))+((r11*x2181))+((sj0*x2182))+(((-1.0)*x2183*x2184))))+IKsqr((((r11*x2185))+(((-1.0)*x2182*x2183))+(((-1.0)*sj0*x2184))+((r01*x2181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r01*x2185))+((r11*x2181))+((sj0*x2182))+(((-1.0)*x2183*x2184))), (((r11*x2185))+(((-1.0)*x2182*x2183))+(((-1.0)*sj0*x2184))+((r01*x2181))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2186=IKcos(j3);
IkReal x2187=(cj5*r00);
IkReal x2188=(cj0*x2187);
IkReal x2189=(cj5*r10);
IkReal x2190=(sj0*x2189);
IkReal x2191=((1.0)*cj0);
IkReal x2192=(r01*sj5);
IkReal x2193=((1.0)*sj0);
IkReal x2194=(cj0*r11);
IkReal x2195=(sj5*x2194);
IkReal x2196=(sj0*x2187);
IkReal x2197=IKsin(j3);
IkReal x2198=(cj4*r02);
IkReal x2199=(cj4*r12);
IkReal x2200=(cj0*r01);
IkReal x2201=(cj5*sj4);
IkReal x2202=(r00*sj4*sj5);
IkReal x2203=(cj5*sj0*sj4);
IkReal x2204=(r10*sj4*sj5);
IkReal x2205=((1.1e-7)*cj5);
IkReal x2206=((1.1e-7)*cj0*sj5);
IkReal x2207=((1.1e-7)*cj5*sj0);
IkReal x2208=((1.1e-7)*sj0*sj5);
IkReal x2209=((0.00025)*sj0*sj5);
evalcond[0]=(x2186+(((-1.0)*x2191*x2192))+x2188+(((-1.0)*r11*sj5*x2193))+x2190);
evalcond[1]=(x2195+x2196+(((-1.0)*x2189*x2191))+(((-1.0)*x2192*x2193))+(((-1.0)*x2197)));
evalcond[2]=(x2197+((r11*x2203))+((sj0*x2199))+((x2200*x2201))+((cj0*x2198))+((sj0*x2204))+((cj0*x2202)));
evalcond[3]=(x2186+(((-1.0)*x2191*x2204))+((sj0*x2198))+(((-1.0)*x2191*x2199))+(((-1.0)*cj0*r11*x2201))+((r01*x2203))+((sj0*x2202)));
evalcond[4]=((0.00945)+(((-1.0)*r10*x2208))+(((-1.0)*x2200*x2205))+((cj0*px))+((py*sj0))+(((-0.00025)*x2188))+(((-0.00025)*x2190))+(((0.078)*x2197))+(((-1.0)*r00*x2206))+(((0.00025)*sj5*x2200))+(((-1.0)*r11*x2207))+((r11*x2209)));
evalcond[5]=((0.1515)+((r01*x2209))+(((-0.00025)*x2195))+(((0.078)*x2186))+((px*sj0))+((r10*x2206))+(((0.00025)*cj0*x2189))+(((-1.0)*r01*x2207))+(((-0.00025)*x2196))+(((-1.0)*py*x2191))+((x2194*x2205))+(((-1.0)*r00*x2208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))+IKsqr(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))), ((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2210=IKcos(j3);
IkReal x2211=(r21*sj5);
IkReal x2212=(cj5*r20);
IkReal x2213=IKsin(j3);
IkReal x2214=((1.0)*sj4);
IkReal x2215=(cj0*r11);
IkReal x2216=(sj5*x2215);
IkReal x2217=(cj5*r00*sj0);
IkReal x2218=((1.0)*cj0);
IkReal x2219=(cj5*r10);
IkReal x2220=(r01*sj0*sj5);
IkReal x2221=((1.1e-7)*cj5);
IkReal x2222=((1.1e-7)*sj5);
IkReal x2223=(cj5*sj4);
IkReal x2224=(r01*sj0);
IkReal x2225=(r00*sj0);
IkReal x2226=(sj4*sj5);
evalcond[0]=(x2211+(((-1.0)*x2212))+x2210);
evalcond[1]=((((-1.0)*cj5*r21*x2214))+x2213+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x2214)));
evalcond[2]=(x2217+(((-1.0)*x2218*x2219))+(((-1.0)*x2220))+(((-1.0)*x2213))+x2216);
evalcond[3]=((((0.078)*x2213))+((r21*x2221))+(((0.00025)*x2212))+(((-1.0)*(1.0)*pz))+((r20*x2222))+(((-0.00025)*x2211)));
evalcond[4]=((((-1.0)*cj0*r11*x2223))+((cj4*r02*sj0))+(((-1.0)*cj0*r10*x2226))+((x2223*x2224))+x2210+(((-1.0)*cj4*r12*x2218))+((x2225*x2226)));
evalcond[5]=((0.1515)+(((0.00025)*x2220))+(((-0.00025)*x2216))+((px*sj0))+(((0.078)*x2210))+(((-1.0)*x2221*x2224))+(((-1.0)*x2222*x2225))+(((0.00025)*cj0*x2219))+((x2215*x2221))+((cj0*r10*x2222))+(((-1.0)*py*x2218))+(((-0.00025)*x2217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2227=((1.0)*cj5);
if( IKabs(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x2227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2227))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x2227))))+IKsqr(((((-1.0)*r20*x2227))+((r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x2227))), ((((-1.0)*r20*x2227))+((r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2228=(r21*sj5);
IkReal x2229=(cj5*r20);
IkReal x2230=IKcos(j3);
IkReal x2231=IKsin(j3);
IkReal x2232=((-1.0)*x2231);
IkReal x2233=((1.0)*sj4);
IkReal x2234=(cj0*r11);
IkReal x2235=(sj5*x2234);
IkReal x2236=(cj5*r00*sj0);
IkReal x2237=((1.0)*cj0);
IkReal x2238=(cj5*r10);
IkReal x2239=(r01*sj0*sj5);
IkReal x2240=((1.1e-7)*cj5);
IkReal x2241=((1.1e-7)*sj5);
IkReal x2242=(cj5*sj4);
IkReal x2243=(r01*sj0);
IkReal x2244=(r00*sj0);
IkReal x2245=(sj4*sj5);
evalcond[0]=((((-1.0)*x2229))+(((-1.0)*x2230))+x2228);
evalcond[1]=((((-1.0)*r20*sj5*x2233))+(((-1.0)*cj5*r21*x2233))+(((-1.0)*(1.0)*cj4*r22))+x2232);
evalcond[2]=(x2235+x2232+x2236+(((-1.0)*x2237*x2238))+(((-1.0)*x2239)));
evalcond[3]=((((-1.0)*(1.0)*pz))+(((-0.00025)*x2228))+(((0.00025)*x2229))+(((-0.078)*x2231))+((r21*x2240))+((r20*x2241)));
evalcond[4]=(((cj4*r02*sj0))+x2230+(((-1.0)*cj0*r11*x2242))+((x2242*x2243))+(((-1.0)*cj0*r10*x2245))+(((-1.0)*cj4*r12*x2237))+((x2244*x2245)));
evalcond[5]=((0.1515)+((x2234*x2240))+(((0.00025)*x2239))+((px*sj0))+(((-1.0)*x2241*x2244))+(((-0.00025)*x2235))+(((0.078)*x2230))+((cj0*r10*x2241))+(((-0.00025)*x2236))+(((-1.0)*x2240*x2243))+(((-1.0)*py*x2237))+(((0.00025)*cj0*x2238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2246=((1.0)*sj5);
CheckValue<IkReal> x2247=IKPowWithIntegerCheck(cj2,-1);
if(!x2247.valid){
continue;
}
CheckValue<IkReal> x2248=IKPowWithIntegerCheck(sj2,-1);
if(!x2248.valid){
continue;
}
if( IKabs(((x2247.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2248.value)*(((((-1.0)*r11*sj0*x2246))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2246))+((cj0*cj5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2247.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))))+IKsqr(((x2248.value)*(((((-1.0)*r11*sj0*x2246))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2246))+((cj0*cj5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x2247.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))), ((x2248.value)*(((((-1.0)*r11*sj0*x2246))+((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2246))+((cj0*cj5*r00))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2249=(r21*sj5);
IkReal x2250=IKcos(j3);
IkReal x2251=(cj5*r20);
IkReal x2252=IKsin(j3);
IkReal x2253=(cj2*x2252);
IkReal x2254=((1.0)*sj4);
IkReal x2255=(cj0*r11);
IkReal x2256=(sj5*x2255);
IkReal x2257=(cj5*r00);
IkReal x2258=(sj0*x2257);
IkReal x2259=((1.0)*x2252);
IkReal x2260=((1.0)*cj0);
IkReal x2261=(cj5*r10);
IkReal x2262=((1.0)*sj0);
IkReal x2263=(r01*sj5);
IkReal x2264=(cj0*x2257);
IkReal x2265=(sj0*x2261);
IkReal x2266=((1.1e-7)*cj5);
IkReal x2267=(cj4*r02);
IkReal x2268=(cj4*r12);
IkReal x2269=(cj0*r01);
IkReal x2270=(cj5*sj4);
IkReal x2271=(r00*sj4*sj5);
IkReal x2272=(cj5*sj0*sj4);
IkReal x2273=(r10*sj4*sj5);
IkReal x2274=((1.1e-7)*cj0*sj5);
IkReal x2275=((1.1e-7)*cj5*sj0);
IkReal x2276=((1.1e-7)*sj0*sj5);
IkReal x2277=((0.00025)*sj0*sj5);
evalcond[0]=(x2249+((cj2*x2250))+(((-1.0)*x2251)));
evalcond[1]=((((-1.0)*r20*sj5*x2254))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x2254))+x2253);
evalcond[2]=(x2256+x2258+(((-1.0)*x2260*x2261))+(((-1.0)*x2259))+(((-1.0)*x2262*x2263)));
evalcond[3]=((((-1.0)*x2260*x2263))+x2264+x2265+(((-1.0)*r11*sj5*x2262))+(((-1.0)*sj2*x2250)));
evalcond[4]=((((-0.00025)*x2249))+((r20*(((1.1e-7)*sj5))))+((r21*x2266))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.00025)*sj2))+(((0.078)*x2253))+(((0.00025)*x2251)));
evalcond[5]=(((cj0*x2267))+((sj0*x2268))+((x2269*x2270))+((cj0*x2271))+((r11*x2272))+((sj0*x2273))+(((-1.0)*sj2*x2259)));
evalcond[6]=(x2250+(((-1.0)*x2260*x2268))+((sj0*x2267))+((sj0*x2271))+((r01*x2272))+(((-1.0)*x2260*x2273))+(((-1.0)*cj0*r11*x2270)));
evalcond[7]=((0.1515)+(((-1.0)*r01*x2275))+(((0.00025)*cj0*x2261))+(((0.078)*x2250))+((px*sj0))+(((-0.00025)*x2258))+(((-1.0)*py*x2260))+(((-0.00025)*x2256))+((x2255*x2266))+(((-1.0)*r00*x2276))+((r01*x2277))+((r10*x2274)));
evalcond[8]=((0.00945)+((r11*x2277))+((cj0*px))+((py*sj0))+(((-1.0)*r00*x2274))+(((0.00025)*sj5*x2269))+(((-0.078)*sj2*x2252))+(((-1.0)*r10*x2276))+(((-1.0)*r11*x2275))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*x2266*x2269))+(((-0.00025)*x2264))+(((-0.00025)*x2265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2278=((1.0)*sj5);
CheckValue<IkReal> x2279=IKPowWithIntegerCheck(cj2,-1);
if(!x2279.valid){
continue;
}
if( IKabs(((((-1.0)*r01*sj0*x2278))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2279.value)*((((cj5*r20))+(((-1.0)*r21*x2278)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj0*x2278))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))))+IKsqr(((x2279.value)*((((cj5*r20))+(((-1.0)*r21*x2278))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r01*sj0*x2278))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))), ((x2279.value)*((((cj5*r20))+(((-1.0)*r21*x2278))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2280=(r21*sj5);
IkReal x2281=IKcos(j3);
IkReal x2282=(cj5*r20);
IkReal x2283=IKsin(j3);
IkReal x2284=(cj2*x2283);
IkReal x2285=((1.0)*sj4);
IkReal x2286=(cj0*r11);
IkReal x2287=(sj5*x2286);
IkReal x2288=(cj5*r00);
IkReal x2289=(sj0*x2288);
IkReal x2290=((1.0)*x2283);
IkReal x2291=((1.0)*cj0);
IkReal x2292=(cj5*r10);
IkReal x2293=((1.0)*sj0);
IkReal x2294=(r01*sj5);
IkReal x2295=(cj0*x2288);
IkReal x2296=(sj0*x2292);
IkReal x2297=((1.1e-7)*cj5);
IkReal x2298=(cj4*r02);
IkReal x2299=(cj4*r12);
IkReal x2300=(cj0*r01);
IkReal x2301=(cj5*sj4);
IkReal x2302=(r00*sj4*sj5);
IkReal x2303=(cj5*sj0*sj4);
IkReal x2304=(r10*sj4*sj5);
IkReal x2305=((1.1e-7)*cj0*sj5);
IkReal x2306=((1.1e-7)*cj5*sj0);
IkReal x2307=((1.1e-7)*sj0*sj5);
IkReal x2308=((0.00025)*sj0*sj5);
evalcond[0]=(x2280+((cj2*x2281))+(((-1.0)*x2282)));
evalcond[1]=(x2284+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x2285))+(((-1.0)*cj5*r21*x2285)));
evalcond[2]=((((-1.0)*x2293*x2294))+(((-1.0)*x2290))+(((-1.0)*x2291*x2292))+x2287+x2289);
evalcond[3]=(x2295+(((-1.0)*x2291*x2294))+(((-1.0)*sj2*x2281))+(((-1.0)*r11*sj5*x2293))+x2296);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+((r21*x2297))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x2280))+(((0.078)*x2284))+(((-1.0)*(0.00025)*sj2))+(((0.00025)*x2282)));
evalcond[5]=(((sj0*x2304))+((cj0*x2298))+((cj0*x2302))+((x2300*x2301))+(((-1.0)*sj2*x2290))+((sj0*x2299))+((r11*x2303)));
evalcond[6]=((((-1.0)*x2291*x2304))+(((-1.0)*x2291*x2299))+((sj0*x2302))+x2281+((sj0*x2298))+((r01*x2303))+(((-1.0)*cj0*r11*x2301)));
evalcond[7]=((0.1515)+(((0.078)*x2281))+((r10*x2305))+((r01*x2308))+((px*sj0))+(((-0.00025)*x2289))+((x2286*x2297))+(((-1.0)*r00*x2307))+(((-1.0)*r01*x2306))+(((-1.0)*py*x2291))+(((0.00025)*cj0*x2292))+(((-0.00025)*x2287)));
evalcond[8]=((0.00945)+((r11*x2308))+(((-0.00025)*x2296))+(((-1.0)*r10*x2307))+((cj0*px))+(((-0.00025)*x2295))+((py*sj0))+(((0.00025)*sj5*x2300))+(((-1.0)*r11*x2306))+(((-1.0)*r00*x2305))+(((-1.0)*x2297*x2300))+(((-0.078)*sj2*x2283))+(((-1.0)*(0.00025)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2309=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x2309.valid){
continue;
}
CheckValue<IkReal> x2310 = IKatan2WithCheck(IkReal((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))),IkReal(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2310.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2309.value)))+(x2310.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2311=(r21*sj5);
IkReal x2312=IKcos(j3);
IkReal x2313=(cj5*r20);
IkReal x2314=IKsin(j3);
IkReal x2315=(cj2*x2314);
IkReal x2316=((1.0)*sj4);
IkReal x2317=(cj0*r11);
IkReal x2318=(sj5*x2317);
IkReal x2319=(cj5*r00);
IkReal x2320=(sj0*x2319);
IkReal x2321=((1.0)*x2314);
IkReal x2322=((1.0)*cj0);
IkReal x2323=(cj5*r10);
IkReal x2324=((1.0)*sj0);
IkReal x2325=(r01*sj5);
IkReal x2326=(cj0*x2319);
IkReal x2327=(sj0*x2323);
IkReal x2328=((1.1e-7)*cj5);
IkReal x2329=(cj4*r02);
IkReal x2330=(cj4*r12);
IkReal x2331=(cj0*r01);
IkReal x2332=(cj5*sj4);
IkReal x2333=(r00*sj4*sj5);
IkReal x2334=(cj5*sj0*sj4);
IkReal x2335=(r10*sj4*sj5);
IkReal x2336=((1.1e-7)*cj0*sj5);
IkReal x2337=((1.1e-7)*cj5*sj0);
IkReal x2338=((1.1e-7)*sj0*sj5);
IkReal x2339=((0.00025)*sj0*sj5);
evalcond[0]=(((cj2*x2312))+x2311+(((-1.0)*x2313)));
evalcond[1]=((((-1.0)*cj5*r21*x2316))+x2315+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x2316)));
evalcond[2]=((((-1.0)*x2321))+x2318+x2320+(((-1.0)*x2324*x2325))+(((-1.0)*x2322*x2323)));
evalcond[3]=((((-1.0)*r11*sj5*x2324))+x2327+x2326+(((-1.0)*x2322*x2325))+(((-1.0)*sj2*x2312)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+((r21*x2328))+(((0.078)*x2315))+(((-0.00025)*x2311))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.00025)*sj2))+(((0.00025)*x2313)));
evalcond[5]=(((cj0*x2329))+((sj0*x2330))+((sj0*x2335))+((r11*x2334))+(((-1.0)*sj2*x2321))+((x2331*x2332))+((cj0*x2333)));
evalcond[6]=((((-1.0)*x2322*x2335))+x2312+((r01*x2334))+((sj0*x2333))+((sj0*x2329))+(((-1.0)*cj0*r11*x2332))+(((-1.0)*x2322*x2330)));
evalcond[7]=((0.1515)+(((-0.00025)*x2320))+(((-1.0)*r00*x2338))+(((-1.0)*py*x2322))+(((0.00025)*cj0*x2323))+((px*sj0))+(((-1.0)*r01*x2337))+((r10*x2336))+(((-0.00025)*x2318))+(((0.078)*x2312))+((x2317*x2328))+((r01*x2339)));
evalcond[8]=((0.00945)+(((-1.0)*x2328*x2331))+(((-0.00025)*x2326))+((r11*x2339))+(((0.00025)*sj5*x2331))+((cj0*px))+((py*sj0))+(((-0.078)*sj2*x2314))+(((-1.0)*r00*x2336))+(((-1.0)*r11*x2337))+(((-0.00025)*x2327))+(((-1.0)*r10*x2338))+(((-1.0)*(0.00025)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x2340=((1.0)*cj5);
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
j3eval[2]=((IKabs(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x2340)))))+(IKabs(((((-1.0)*r20*x2340))+((r21*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j3eval[0]=cj2;
j3eval[1]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2341=(cj0*cj5);
IkReal x2342=(r01*sj5);
IkReal x2343=((1.0)*cj0);
IkReal x2344=(r11*sj5);
IkReal x2345=(cj5*sj0);
if( IKabs(((((-1.0)*r00*x2345))+(((-1.0)*x2343*x2344))+((sj0*x2342))+((r10*x2341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2345))+(((-1.0)*x2342*x2343))+((r00*x2341))+(((-1.0)*sj0*x2344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2345))+(((-1.0)*x2343*x2344))+((sj0*x2342))+((r10*x2341))))+IKsqr((((r10*x2345))+(((-1.0)*x2342*x2343))+((r00*x2341))+(((-1.0)*sj0*x2344))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x2345))+(((-1.0)*x2343*x2344))+((sj0*x2342))+((r10*x2341))), (((r10*x2345))+(((-1.0)*x2342*x2343))+((r00*x2341))+(((-1.0)*sj0*x2344))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2346=IKsin(j3);
IkReal x2347=(cj0*r11);
IkReal x2348=(sj5*x2347);
IkReal x2349=(cj5*r00);
IkReal x2350=(sj0*x2349);
IkReal x2351=((1.0)*cj0);
IkReal x2352=(cj5*r10);
IkReal x2353=((1.0)*sj0);
IkReal x2354=(r01*sj5);
IkReal x2355=(cj0*x2349);
IkReal x2356=(sj0*x2352);
IkReal x2357=IKcos(j3);
IkReal x2358=((-1.0)*x2357);
IkReal x2359=(cj4*r02);
IkReal x2360=(cj4*r12);
IkReal x2361=(cj0*r01);
IkReal x2362=(cj5*sj4);
IkReal x2363=(r00*sj4*sj5);
IkReal x2364=(cj5*sj0*sj4);
IkReal x2365=(r10*sj4*sj5);
IkReal x2366=((1.1e-7)*cj5);
IkReal x2367=((1.1e-7)*cj0*sj5);
IkReal x2368=((1.1e-7)*cj5*sj0);
IkReal x2369=((1.1e-7)*sj0*sj5);
IkReal x2370=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x2351*x2352))+x2348+x2346+(((-1.0)*x2353*x2354))+x2350);
evalcond[1]=((((-1.0)*x2351*x2354))+x2355+(((-1.0)*r11*sj5*x2353))+x2356+x2358);
evalcond[2]=(((cj0*x2359))+((x2361*x2362))+((r11*x2364))+((sj0*x2360))+((sj0*x2365))+((cj0*x2363))+(((-1.0)*x2346)));
evalcond[3]=(((r01*x2364))+((sj0*x2359))+(((-1.0)*x2351*x2360))+(((-1.0)*x2351*x2365))+(((-1.0)*cj0*r11*x2362))+((sj0*x2363))+x2358);
evalcond[4]=((0.00945)+(((0.00025)*sj5*x2361))+(((-1.0)*r10*x2369))+(((-1.0)*r11*x2368))+((cj0*px))+((py*sj0))+(((-1.0)*x2361*x2366))+(((-0.078)*x2346))+(((-0.00025)*x2355))+(((-1.0)*r00*x2367))+(((-0.00025)*x2356))+((r11*x2370)));
evalcond[5]=((-0.1515)+((r01*x2370))+(((-0.00025)*x2350))+(((0.00025)*cj0*x2352))+((px*sj0))+(((-0.078)*x2357))+((x2347*x2366))+(((-1.0)*r00*x2369))+((r10*x2367))+(((-1.0)*r01*x2368))+(((-1.0)*py*x2351))+(((-0.00025)*x2348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2371=(cj0*cj5);
IkReal x2372=(r01*sj5);
IkReal x2373=(r11*sj5);
IkReal x2374=((1.0)*r00);
IkReal x2375=(cj5*sj0);
if( IKabs(((((-1.0)*cj0*x2373))+((r10*x2371))+(((-1.0)*x2374*x2375))+((sj0*x2372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x2373))+((cj0*x2372))+(((-1.0)*x2371*x2374))+(((-1.0)*r10*x2375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x2373))+((r10*x2371))+(((-1.0)*x2374*x2375))+((sj0*x2372))))+IKsqr((((sj0*x2373))+((cj0*x2372))+(((-1.0)*x2371*x2374))+(((-1.0)*r10*x2375))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*cj0*x2373))+((r10*x2371))+(((-1.0)*x2374*x2375))+((sj0*x2372))), (((sj0*x2373))+((cj0*x2372))+(((-1.0)*x2371*x2374))+(((-1.0)*r10*x2375))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2376=IKcos(j3);
IkReal x2377=(cj5*r00);
IkReal x2378=(cj0*x2377);
IkReal x2379=(cj5*r10);
IkReal x2380=(sj0*x2379);
IkReal x2381=((1.0)*cj0);
IkReal x2382=(r01*sj5);
IkReal x2383=((1.0)*sj0);
IkReal x2384=IKsin(j3);
IkReal x2385=(cj0*r11);
IkReal x2386=(sj5*x2385);
IkReal x2387=(sj0*x2377);
IkReal x2388=(cj4*r02);
IkReal x2389=(cj4*r12);
IkReal x2390=(cj0*r01);
IkReal x2391=(cj5*sj4);
IkReal x2392=(r00*sj4*sj5);
IkReal x2393=(cj5*sj0*sj4);
IkReal x2394=(r10*sj4*sj5);
IkReal x2395=((1.1e-7)*cj5);
IkReal x2396=((1.1e-7)*cj0*sj5);
IkReal x2397=((1.1e-7)*cj5*sj0);
IkReal x2398=((1.1e-7)*sj0*sj5);
IkReal x2399=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*r11*sj5*x2383))+(((-1.0)*x2381*x2382))+x2380+x2378+x2376);
evalcond[1]=((((-1.0)*x2382*x2383))+(((-1.0)*x2379*x2381))+x2384+x2387+x2386);
evalcond[2]=(((cj0*x2392))+((x2390*x2391))+((cj0*x2388))+((sj0*x2394))+((r11*x2393))+((sj0*x2389))+x2384);
evalcond[3]=((((-1.0)*x2381*x2389))+((r01*x2393))+((sj0*x2388))+(((-1.0)*x2381*x2394))+(((-1.0)*x2376))+(((-1.0)*cj0*r11*x2391))+((sj0*x2392)));
evalcond[4]=((0.00945)+(((-0.00025)*x2378))+((cj0*px))+((py*sj0))+((r11*x2399))+(((0.00025)*sj5*x2390))+(((-0.00025)*x2380))+(((-1.0)*r10*x2398))+(((-1.0)*r11*x2397))+(((0.078)*x2384))+(((-1.0)*r00*x2396))+(((-1.0)*x2390*x2395)));
evalcond[5]=((-0.1515)+(((-0.00025)*x2386))+((px*sj0))+((r10*x2396))+((r01*x2399))+(((-0.00025)*x2387))+(((-1.0)*r01*x2397))+((x2385*x2395))+(((0.00025)*cj0*x2379))+(((-1.0)*r00*x2398))+(((-0.078)*x2376))+(((-1.0)*py*x2381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2400=((1.0)*cj5);
if( IKabs(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x2400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2400))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x2400))))+IKsqr(((((-1.0)*r20*x2400))+((r21*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r21*sj4*x2400))), ((((-1.0)*r20*x2400))+((r21*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2401=(r21*sj5);
IkReal x2402=(cj5*r20);
IkReal x2403=IKcos(j3);
IkReal x2404=((-1.0)*x2403);
IkReal x2405=IKsin(j3);
IkReal x2406=((1.0)*sj4);
IkReal x2407=(cj0*r11);
IkReal x2408=(sj5*x2407);
IkReal x2409=(cj5*r00*sj0);
IkReal x2410=((1.0)*cj0);
IkReal x2411=(cj5*r10);
IkReal x2412=(r01*sj0*sj5);
IkReal x2413=((1.1e-7)*cj5);
IkReal x2414=((1.1e-7)*sj5);
IkReal x2415=(cj5*sj4);
IkReal x2416=(r01*sj0);
IkReal x2417=(r00*sj0);
IkReal x2418=(sj4*sj5);
evalcond[0]=(x2401+(((-1.0)*x2402))+x2404);
evalcond[1]=((((-1.0)*cj5*r21*x2406))+(((-1.0)*x2405))+(((-1.0)*r20*sj5*x2406))+(((-1.0)*(1.0)*cj4*r22)));
evalcond[2]=(x2409+x2408+(((-1.0)*x2412))+(((-1.0)*x2410*x2411))+x2405);
evalcond[3]=((((0.00025)*x2402))+(((-1.0)*(1.0)*pz))+((r20*x2414))+((r21*x2413))+(((-0.00025)*x2401))+(((-0.078)*x2405)));
evalcond[4]=(((cj4*r02*sj0))+(((-1.0)*cj0*r11*x2415))+(((-1.0)*cj0*r10*x2418))+x2404+((x2415*x2416))+((x2417*x2418))+(((-1.0)*cj4*r12*x2410)));
evalcond[5]=((-0.1515)+(((0.00025)*x2412))+(((-1.0)*py*x2410))+((px*sj0))+(((-0.078)*x2403))+(((0.00025)*cj0*x2411))+(((-0.00025)*x2408))+(((-1.0)*x2413*x2416))+((cj0*r10*x2414))+(((-0.00025)*x2409))+(((-1.0)*x2414*x2417))+((x2407*x2413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))+IKsqr(((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))), ((((-1.0)*(1.0)*r21*sj5))+((cj5*r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2419=IKcos(j3);
IkReal x2420=(r21*sj5);
IkReal x2421=(cj5*r20);
IkReal x2422=IKsin(j3);
IkReal x2423=((1.0)*sj4);
IkReal x2424=(cj0*r11);
IkReal x2425=(sj5*x2424);
IkReal x2426=(cj5*r00*sj0);
IkReal x2427=((1.0)*cj0);
IkReal x2428=(cj5*r10);
IkReal x2429=(r01*sj0*sj5);
IkReal x2430=((1.1e-7)*cj5);
IkReal x2431=((1.1e-7)*sj5);
IkReal x2432=(cj5*sj4);
IkReal x2433=(r01*sj0);
IkReal x2434=(r00*sj0);
IkReal x2435=(sj4*sj5);
evalcond[0]=(x2419+(((-1.0)*x2421))+x2420);
evalcond[1]=((((-1.0)*r20*sj5*x2423))+x2422+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x2423)));
evalcond[2]=(x2422+x2426+x2425+(((-1.0)*x2427*x2428))+(((-1.0)*x2429)));
evalcond[3]=(((r21*x2430))+((r20*x2431))+(((-0.00025)*x2420))+(((-1.0)*(1.0)*pz))+(((0.00025)*x2421))+(((0.078)*x2422)));
evalcond[4]=(((cj4*r02*sj0))+(((-1.0)*x2419))+(((-1.0)*cj0*r10*x2435))+(((-1.0)*cj4*r12*x2427))+((x2434*x2435))+((x2432*x2433))+(((-1.0)*cj0*r11*x2432)));
evalcond[5]=((-0.1515)+(((-0.00025)*x2426))+(((0.00025)*cj0*x2428))+((px*sj0))+(((-1.0)*py*x2427))+(((-1.0)*x2431*x2434))+(((-0.00025)*x2425))+((x2424*x2430))+(((-1.0)*x2430*x2433))+(((0.00025)*x2429))+((cj0*r10*x2431))+(((-0.078)*x2419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2436=((1.0)*sj5);
CheckValue<IkReal> x2437=IKPowWithIntegerCheck(cj2,-1);
if(!x2437.valid){
continue;
}
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(sj2,-1);
if(!x2438.valid){
continue;
}
if( IKabs(((x2437.value)*(((((-1.0)*r20*sj4*x2436))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*(1.0)*cj5*r21*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2438.value)*(((((-1.0)*cj0*r01*x2436))+((cj5*r10*sj0))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x2436)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2437.value)*(((((-1.0)*r20*sj4*x2436))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*(1.0)*cj5*r21*sj4))))))+IKsqr(((x2438.value)*(((((-1.0)*cj0*r01*x2436))+((cj5*r10*sj0))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x2436))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x2437.value)*(((((-1.0)*r20*sj4*x2436))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*(1.0)*cj5*r21*sj4))))), ((x2438.value)*(((((-1.0)*cj0*r01*x2436))+((cj5*r10*sj0))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x2436))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2439=(r21*sj5);
IkReal x2440=(cj5*r20);
IkReal x2441=IKcos(j3);
IkReal x2442=((1.0)*x2441);
IkReal x2443=IKsin(j3);
IkReal x2444=(cj2*x2443);
IkReal x2445=((1.0)*sj4);
IkReal x2446=(cj0*r11);
IkReal x2447=(sj5*x2446);
IkReal x2448=(cj5*r00);
IkReal x2449=(sj0*x2448);
IkReal x2450=((1.0)*cj0);
IkReal x2451=(cj5*r10);
IkReal x2452=((1.0)*sj0);
IkReal x2453=(r01*sj5);
IkReal x2454=(cj0*x2448);
IkReal x2455=(sj0*x2451);
IkReal x2456=((1.1e-7)*cj5);
IkReal x2457=(cj4*r02);
IkReal x2458=(cj4*r12);
IkReal x2459=(sj2*x2443);
IkReal x2460=(cj0*r01);
IkReal x2461=(cj5*sj4);
IkReal x2462=(r00*sj4*sj5);
IkReal x2463=(cj5*sj0*sj4);
IkReal x2464=(r10*sj4*sj5);
IkReal x2465=((1.1e-7)*cj0*sj5);
IkReal x2466=((1.1e-7)*cj5*sj0);
IkReal x2467=((1.1e-7)*sj0*sj5);
IkReal x2468=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x2440))+(((-1.0)*cj2*x2442))+x2439);
evalcond[1]=((((-1.0)*r20*sj5*x2445))+(((-1.0)*x2444))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x2445)));
evalcond[2]=((((-1.0)*x2450*x2451))+x2447+x2449+x2443+(((-1.0)*x2452*x2453)));
evalcond[3]=(x2454+x2455+(((-1.0)*x2450*x2453))+(((-1.0)*sj2*x2442))+(((-1.0)*r11*sj5*x2452)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+((r21*x2456))+(((0.00025)*x2440))+(((-0.00025)*x2439))+(((0.00025)*sj2))+(((-1.0)*(1.0)*pz))+(((-0.078)*x2444)));
evalcond[5]=(((cj0*x2457))+(((-1.0)*x2459))+((cj0*x2462))+((sj0*x2458))+((r11*x2463))+((x2460*x2461))+((sj0*x2464)));
evalcond[6]=((((-1.0)*cj0*r11*x2461))+(((-1.0)*x2450*x2458))+((r01*x2463))+((sj0*x2457))+(((-1.0)*x2450*x2464))+((sj0*x2462))+(((-1.0)*x2442)));
evalcond[7]=((-0.1515)+((px*sj0))+(((-1.0)*r01*x2466))+((r10*x2465))+(((-0.00025)*x2449))+(((-0.078)*x2441))+((r01*x2468))+(((-1.0)*py*x2450))+(((-1.0)*r00*x2467))+(((0.00025)*cj0*x2451))+(((-0.00025)*x2447))+((x2446*x2456)));
evalcond[8]=((0.00945)+(((0.00025)*sj5*x2460))+((r11*x2468))+(((-1.0)*x2456*x2460))+(((-0.078)*x2459))+(((-0.00025)*x2454))+((cj0*px))+((py*sj0))+(((-1.0)*r00*x2465))+(((-1.0)*r10*x2467))+(((-0.00025)*x2455))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*r11*x2466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2469=((1.0)*cj5);
CheckValue<IkReal> x2470=IKPowWithIntegerCheck(cj2,-1);
if(!x2470.valid){
continue;
}
if( IKabs((((cj0*cj5*r10))+(((-1.0)*r00*sj0*x2469))+((r01*sj0*sj5))+(((-1.0)*(1.0)*cj0*r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2470.value)*(((((-1.0)*r20*x2469))+((r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*cj5*r10))+(((-1.0)*r00*sj0*x2469))+((r01*sj0*sj5))+(((-1.0)*(1.0)*cj0*r11*sj5))))+IKsqr(((x2470.value)*(((((-1.0)*r20*x2469))+((r21*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj0*cj5*r10))+(((-1.0)*r00*sj0*x2469))+((r01*sj0*sj5))+(((-1.0)*(1.0)*cj0*r11*sj5))), ((x2470.value)*(((((-1.0)*r20*x2469))+((r21*sj5))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2471=(r21*sj5);
IkReal x2472=(cj5*r20);
IkReal x2473=IKcos(j3);
IkReal x2474=((1.0)*x2473);
IkReal x2475=IKsin(j3);
IkReal x2476=(cj2*x2475);
IkReal x2477=((1.0)*sj4);
IkReal x2478=(cj0*r11);
IkReal x2479=(sj5*x2478);
IkReal x2480=(cj5*r00);
IkReal x2481=(sj0*x2480);
IkReal x2482=((1.0)*cj0);
IkReal x2483=(cj5*r10);
IkReal x2484=((1.0)*sj0);
IkReal x2485=(r01*sj5);
IkReal x2486=(cj0*x2480);
IkReal x2487=(sj0*x2483);
IkReal x2488=((1.1e-7)*cj5);
IkReal x2489=(cj4*r02);
IkReal x2490=(cj4*r12);
IkReal x2491=(sj2*x2475);
IkReal x2492=(cj0*r01);
IkReal x2493=(cj5*sj4);
IkReal x2494=(r00*sj4*sj5);
IkReal x2495=(cj5*sj0*sj4);
IkReal x2496=(r10*sj4*sj5);
IkReal x2497=((1.1e-7)*cj0*sj5);
IkReal x2498=((1.1e-7)*cj5*sj0);
IkReal x2499=((1.1e-7)*sj0*sj5);
IkReal x2500=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x2472))+x2471+(((-1.0)*cj2*x2474)));
evalcond[1]=((((-1.0)*r20*sj5*x2477))+(((-1.0)*cj5*r21*x2477))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*x2476)));
evalcond[2]=(x2475+x2479+(((-1.0)*x2482*x2483))+(((-1.0)*x2484*x2485))+x2481);
evalcond[3]=((((-1.0)*sj2*x2474))+(((-1.0)*r11*sj5*x2484))+x2487+x2486+(((-1.0)*x2482*x2485)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((-0.078)*x2476))+((r21*x2488))+(((0.00025)*sj2))+(((0.00025)*x2472))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x2471)));
evalcond[5]=(((sj0*x2490))+((cj0*x2489))+((r11*x2495))+((sj0*x2496))+((cj0*x2494))+(((-1.0)*x2491))+((x2492*x2493)));
evalcond[6]=((((-1.0)*x2482*x2490))+(((-1.0)*x2482*x2496))+((sj0*x2489))+(((-1.0)*x2474))+(((-1.0)*cj0*r11*x2493))+((sj0*x2494))+((r01*x2495)));
evalcond[7]=((-0.1515)+(((-0.078)*x2473))+((x2478*x2488))+((px*sj0))+(((-0.00025)*x2479))+(((0.00025)*cj0*x2483))+((r01*x2500))+(((-0.00025)*x2481))+((r10*x2497))+(((-1.0)*r00*x2499))+(((-1.0)*py*x2482))+(((-1.0)*r01*x2498)));
evalcond[8]=((0.00945)+(((-0.00025)*x2487))+(((-1.0)*r00*x2497))+((cj0*px))+((py*sj0))+(((0.00025)*sj5*x2492))+((r11*x2500))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*r11*x2498))+(((-0.00025)*x2486))+(((-1.0)*r10*x2499))+(((-0.078)*x2491))+(((-1.0)*x2488*x2492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2501=((1.0)*cj5);
CheckValue<IkReal> x2502 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj4*x2501))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22)))),IkReal(((((-1.0)*r20*x2501))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2502.valid){
continue;
}
CheckValue<IkReal> x2503=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x2503.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2502.value)+(((1.5707963267949)*(x2503.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2504=(r21*sj5);
IkReal x2505=(cj5*r20);
IkReal x2506=IKcos(j3);
IkReal x2507=((1.0)*x2506);
IkReal x2508=IKsin(j3);
IkReal x2509=(cj2*x2508);
IkReal x2510=((1.0)*sj4);
IkReal x2511=(cj0*r11);
IkReal x2512=(sj5*x2511);
IkReal x2513=(cj5*r00);
IkReal x2514=(sj0*x2513);
IkReal x2515=((1.0)*cj0);
IkReal x2516=(cj5*r10);
IkReal x2517=((1.0)*sj0);
IkReal x2518=(r01*sj5);
IkReal x2519=(cj0*x2513);
IkReal x2520=(sj0*x2516);
IkReal x2521=((1.1e-7)*cj5);
IkReal x2522=(cj4*r02);
IkReal x2523=(cj4*r12);
IkReal x2524=(sj2*x2508);
IkReal x2525=(cj0*r01);
IkReal x2526=(cj5*sj4);
IkReal x2527=(r00*sj4*sj5);
IkReal x2528=(cj5*sj0*sj4);
IkReal x2529=(r10*sj4*sj5);
IkReal x2530=((1.1e-7)*cj0*sj5);
IkReal x2531=((1.1e-7)*cj5*sj0);
IkReal x2532=((1.1e-7)*sj0*sj5);
IkReal x2533=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x2505))+(((-1.0)*cj2*x2507))+x2504);
evalcond[1]=((((-1.0)*cj5*r21*x2510))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*x2509))+(((-1.0)*r20*sj5*x2510)));
evalcond[2]=((((-1.0)*x2517*x2518))+x2514+x2512+x2508+(((-1.0)*x2515*x2516)));
evalcond[3]=((((-1.0)*x2515*x2518))+(((-1.0)*r11*sj5*x2517))+(((-1.0)*sj2*x2507))+x2519+x2520);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+((r21*x2521))+(((0.00025)*sj2))+(((0.00025)*x2505))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x2504))+(((-0.078)*x2509)));
evalcond[5]=(((cj0*x2527))+((r11*x2528))+((cj0*x2522))+((sj0*x2523))+((x2525*x2526))+(((-1.0)*x2524))+((sj0*x2529)));
evalcond[6]=(((r01*x2528))+(((-1.0)*x2515*x2529))+(((-1.0)*cj0*r11*x2526))+((sj0*x2522))+(((-1.0)*x2507))+(((-1.0)*x2515*x2523))+((sj0*x2527)));
evalcond[7]=((-0.1515)+(((-1.0)*py*x2515))+(((0.00025)*cj0*x2516))+((r01*x2533))+((r10*x2530))+((px*sj0))+(((-1.0)*r00*x2532))+(((-0.00025)*x2512))+(((-1.0)*r01*x2531))+((x2511*x2521))+(((-0.00025)*x2514))+(((-0.078)*x2506)));
evalcond[8]=((0.00945)+(((-1.0)*r00*x2530))+(((-0.00025)*x2520))+((cj0*px))+(((0.00025)*sj5*x2525))+((py*sj0))+(((-1.0)*x2521*x2525))+(((-0.00025)*x2519))+((r11*x2533))+(((-0.078)*x2524))+(((-1.0)*r11*x2531))+(((-1.0)*r10*x2532))+(((-1.0)*(0.00025)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2534=(r21*sj5);
IkReal x2535=(cj4*r22);
IkReal x2536=(cj5*r20);
IkReal x2537=(cj5*r21);
IkReal x2538=(sj1*sj4);
IkReal x2539=(r20*sj5);
IkReal x2540=(cj1*sj4);
if( IKabs((((x2537*x2538))+(((-1.0)*cj1*x2536))+((x2538*x2539))+((cj1*x2534))+((sj1*x2535)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2536))+(((-1.0)*sj1*x2534))+((x2539*x2540))+((cj1*x2535))+((x2537*x2540)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2537*x2538))+(((-1.0)*cj1*x2536))+((x2538*x2539))+((cj1*x2534))+((sj1*x2535))))+IKsqr((((sj1*x2536))+(((-1.0)*sj1*x2534))+((x2539*x2540))+((cj1*x2535))+((x2537*x2540))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((x2537*x2538))+(((-1.0)*cj1*x2536))+((x2538*x2539))+((cj1*x2534))+((sj1*x2535))), (((sj1*x2536))+(((-1.0)*sj1*x2534))+((x2539*x2540))+((cj1*x2535))+((x2537*x2540))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2541=(r21*sj5);
IkReal x2542=(cj5*r20);
IkReal x2543=IKcos(j3);
IkReal x2544=(sj1*x2543);
IkReal x2545=IKsin(j3);
IkReal x2546=(cj1*x2545);
IkReal x2547=(x2544+(((-1.0)*x2546)));
IkReal x2548=(cj1*x2543);
IkReal x2549=(sj1*x2545);
IkReal x2550=((1.0)*sj4);
IkReal x2551=(cj0*r11);
IkReal x2552=(sj5*x2551);
IkReal x2553=(cj5*r00*sj0);
IkReal x2554=((1.0)*cj0);
IkReal x2555=(cj5*r10);
IkReal x2556=(r01*sj0*sj5);
IkReal x2557=((1.1e-7)*cj5);
IkReal x2558=((1.1e-7)*sj5);
IkReal x2559=(cj5*sj4);
IkReal x2560=(r01*sj0);
IkReal x2561=(r00*sj0);
IkReal x2562=(sj4*sj5);
evalcond[0]=((((-1.0)*x2542))+x2547+x2541);
evalcond[1]=(x2549+(((-1.0)*r20*sj5*x2550))+(((-1.0)*cj5*r21*x2550))+(((-1.0)*(1.0)*cj4*r22))+x2548);
evalcond[2]=((((-1.0)*x2548))+(((-1.0)*x2556))+x2552+(((-1.0)*x2554*x2555))+(((-1.0)*x2549))+x2553);
evalcond[3]=((((0.078)*x2548))+(((-0.00025)*x2541))+((r21*x2557))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((0.00025)*x2542))+(((0.078)*x2549))+((r20*x2558)));
evalcond[4]=(((cj4*r02*sj0))+((x2561*x2562))+x2547+(((-1.0)*cj4*r12*x2554))+((x2559*x2560))+(((-1.0)*cj0*r10*x2562))+(((-1.0)*cj0*r11*x2559)));
evalcond[5]=((((0.078)*x2544))+((px*sj0))+(((-0.078)*x2546))+(((-1.0)*x2558*x2561))+(((0.1515)*sj1))+(((-1.0)*py*x2554))+(((-1.0)*x2557*x2560))+(((0.00025)*cj0*x2555))+((x2551*x2557))+(((-0.00025)*x2552))+(((0.00025)*x2556))+(((-0.00025)*x2553))+((cj0*r10*x2558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2563=(r21*sj5);
IkReal x2564=((1.0)*cj5*r20);
IkReal x2565=(cj4*r22);
IkReal x2566=(cj5*r21);
IkReal x2567=((1.0)*sj1*sj4);
IkReal x2568=(r20*sj5);
IkReal x2569=(cj1*sj4);
if( IKabs(((((-1.0)*sj1*x2565))+(((-1.0)*x2566*x2567))+(((-1.0)*x2567*x2568))+((cj1*x2563))+(((-1.0)*cj1*x2564)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2563))+((x2566*x2569))+(((-1.0)*sj1*x2564))+((x2568*x2569))+((cj1*x2565)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x2565))+(((-1.0)*x2566*x2567))+(((-1.0)*x2567*x2568))+((cj1*x2563))+(((-1.0)*cj1*x2564))))+IKsqr((((sj1*x2563))+((x2566*x2569))+(((-1.0)*sj1*x2564))+((x2568*x2569))+((cj1*x2565))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj1*x2565))+(((-1.0)*x2566*x2567))+(((-1.0)*x2567*x2568))+((cj1*x2563))+(((-1.0)*cj1*x2564))), (((sj1*x2563))+((x2566*x2569))+(((-1.0)*sj1*x2564))+((x2568*x2569))+((cj1*x2565))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2570=(r21*sj5);
IkReal x2571=(cj5*r20);
IkReal x2572=IKsin(j3);
IkReal x2573=(cj1*x2572);
IkReal x2574=IKcos(j3);
IkReal x2575=(sj1*x2574);
IkReal x2576=(cj1*x2574);
IkReal x2577=(sj1*x2572);
IkReal x2578=(x2576+(((-1.0)*x2577)));
IkReal x2579=((1.0)*sj4);
IkReal x2580=(cj0*r11);
IkReal x2581=(sj5*x2580);
IkReal x2582=(cj5*r00*sj0);
IkReal x2583=((1.0)*cj0);
IkReal x2584=(cj5*r10);
IkReal x2585=(r01*sj0*sj5);
IkReal x2586=((1.1e-7)*cj5);
IkReal x2587=((1.1e-7)*sj5);
IkReal x2588=(cj5*sj4);
IkReal x2589=(r01*sj0);
IkReal x2590=(r00*sj0);
IkReal x2591=(sj4*sj5);
evalcond[0]=((((-1.0)*x2575))+x2570+(((-1.0)*x2573))+(((-1.0)*x2571)));
evalcond[1]=(x2578+(((-1.0)*r20*sj5*x2579))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x2579)));
evalcond[2]=((((-1.0)*x2583*x2584))+x2578+(((-1.0)*x2585))+x2582+x2581);
evalcond[3]=((((0.078)*x2576))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x2570))+((r20*x2587))+(((0.00025)*x2571))+((r21*x2586))+(((-0.078)*x2577)));
evalcond[4]=(((cj4*r02*sj0))+(((-1.0)*cj4*r12*x2583))+(((-1.0)*cj0*r11*x2588))+((x2590*x2591))+((x2588*x2589))+x2573+x2575+(((-1.0)*cj0*r10*x2591)));
evalcond[5]=((((-1.0)*x2586*x2589))+(((-1.0)*py*x2583))+((px*sj0))+(((-0.00025)*x2582))+(((-1.0)*x2587*x2590))+(((0.1515)*sj1))+(((0.078)*x2573))+(((0.00025)*x2585))+((cj0*r10*x2587))+((x2580*x2586))+(((0.078)*x2575))+(((-0.00025)*x2581))+(((0.00025)*cj0*x2584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=cj1;
j3eval[1]=IKsign(cj1);
j3eval[2]=((IKabs(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))))+(IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj1;
j3eval[1]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))))+IKsqr((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))), (((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2592=(r21*sj5);
IkReal x2593=(cj5*r20);
IkReal x2594=IKsin(j3);
IkReal x2595=((-1.0)*x2594);
IkReal x2596=IKcos(j3);
IkReal x2597=((1.0)*sj4);
IkReal x2598=(cj0*cj5*r00);
IkReal x2599=(cj5*r10*sj0);
IkReal x2600=(cj0*r01*sj5);
IkReal x2601=(r11*sj0*sj5);
IkReal x2602=((1.1e-7)*cj5);
IkReal x2603=((1.1e-7)*sj5);
IkReal x2604=(cj0*r01);
IkReal x2605=(cj5*sj4);
IkReal x2606=(cj0*r00);
IkReal x2607=(sj4*sj5);
IkReal x2608=(r11*sj0);
IkReal x2609=(r10*sj0);
evalcond[0]=(x2592+x2595+(((-1.0)*x2593)));
evalcond[1]=((((-1.0)*r20*sj5*x2597))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x2597))+x2596);
evalcond[2]=(x2598+x2599+(((-1.0)*x2596))+(((-1.0)*x2600))+(((-1.0)*x2601)));
evalcond[3]=((0.1515)+(((0.078)*x2596))+(((-0.00025)*x2592))+(((0.00025)*x2593))+(((-1.0)*(1.0)*pz))+((r21*x2602))+((r20*x2603)));
evalcond[4]=(((x2605*x2608))+((x2606*x2607))+((x2607*x2609))+x2595+((cj4*r12*sj0))+((x2604*x2605))+((cj0*cj4*r02)));
evalcond[5]=((0.00945)+(((-0.00025)*x2599))+(((-0.00025)*x2598))+(((-1.0)*x2602*x2604))+(((0.00025)*x2600))+((cj0*px))+((py*sj0))+(((-1.0)*x2602*x2608))+(((-0.078)*x2594))+(((0.00025)*x2601))+(((-1.0)*x2603*x2606))+(((-1.0)*x2603*x2609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2610=((1.0)*r21);
if( IKabs((((cj5*r20))+(((-1.0)*sj5*x2610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*sj4*x2610))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((-1.0)*sj5*x2610))))+IKsqr(((((-1.0)*cj5*sj4*x2610))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((-1.0)*sj5*x2610))), ((((-1.0)*cj5*sj4*x2610))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2611=IKsin(j3);
IkReal x2612=(r21*sj5);
IkReal x2613=(cj5*r20);
IkReal x2614=IKcos(j3);
IkReal x2615=((-1.0)*x2614);
IkReal x2616=((1.0)*sj4);
IkReal x2617=(cj0*cj5*r00);
IkReal x2618=(cj5*r10*sj0);
IkReal x2619=(cj0*r01*sj5);
IkReal x2620=(r11*sj0*sj5);
IkReal x2621=((1.1e-7)*cj5);
IkReal x2622=((1.1e-7)*sj5);
IkReal x2623=(cj0*r01);
IkReal x2624=(cj5*sj4);
IkReal x2625=(cj0*r00);
IkReal x2626=(sj4*sj5);
IkReal x2627=(r11*sj0);
IkReal x2628=(r10*sj0);
evalcond[0]=((((-1.0)*x2613))+x2612+x2611);
evalcond[1]=((((-1.0)*r20*sj5*x2616))+x2615+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x2616)));
evalcond[2]=((((-1.0)*x2619))+x2615+x2617+x2618+(((-1.0)*x2620)));
evalcond[3]=((-0.1515)+(((-0.00025)*x2612))+(((0.00025)*x2613))+(((-1.0)*(1.0)*pz))+((r20*x2622))+((r21*x2621))+(((-0.078)*x2614)));
evalcond[4]=(((x2625*x2626))+((x2626*x2628))+(((-1.0)*x2611))+((x2623*x2624))+((cj4*r12*sj0))+((cj0*cj4*r02))+((x2624*x2627)));
evalcond[5]=((0.00945)+(((0.00025)*x2619))+(((-1.0)*x2622*x2628))+((cj0*px))+((py*sj0))+(((-1.0)*x2621*x2627))+(((-0.00025)*x2618))+(((0.00025)*x2620))+(((-1.0)*x2621*x2623))+(((-0.00025)*x2617))+(((-1.0)*x2622*x2625))+(((-0.078)*x2611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2629=IKPowWithIntegerCheck(sj1,-1);
if(!x2629.valid){
continue;
}
CheckValue<IkReal> x2630=IKPowWithIntegerCheck(cj1,-1);
if(!x2630.valid){
continue;
}
if( IKabs(((x2629.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2630.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2629.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))))))+IKsqr(((x2630.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x2629.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))))), ((x2630.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2631=(r21*sj5);
IkReal x2632=(cj5*r20);
IkReal x2633=IKsin(j3);
IkReal x2634=((1.0)*x2633);
IkReal x2635=IKcos(j3);
IkReal x2636=(cj1*x2635);
IkReal x2637=((1.0)*sj4);
IkReal x2638=(cj5*r00);
IkReal x2639=(cj0*x2638);
IkReal x2640=(cj5*r10);
IkReal x2641=(sj0*x2640);
IkReal x2642=((1.0)*cj0);
IkReal x2643=(r01*sj5);
IkReal x2644=((1.0)*sj0);
IkReal x2645=(cj0*r11);
IkReal x2646=(sj5*x2645);
IkReal x2647=(sj0*x2638);
IkReal x2648=((1.1e-7)*cj5);
IkReal x2649=(cj4*r02);
IkReal x2650=(cj4*r12);
IkReal x2651=(cj0*r01);
IkReal x2652=(cj5*sj4);
IkReal x2653=(r00*sj4*sj5);
IkReal x2654=(cj5*sj0*sj4);
IkReal x2655=(r10*sj4*sj5);
IkReal x2656=(sj1*x2635);
IkReal x2657=((1.1e-7)*cj0*sj5);
IkReal x2658=((1.1e-7)*cj5*sj0);
IkReal x2659=((1.1e-7)*sj0*sj5);
IkReal x2660=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x2632))+(((-1.0)*cj1*x2634))+x2631);
evalcond[1]=((((-1.0)*r20*sj5*x2637))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x2637))+x2636);
evalcond[2]=(x2641+(((-1.0)*r11*sj5*x2644))+x2639+(((-1.0)*x2642*x2643))+(((-1.0)*x2635)));
evalcond[3]=((((-1.0)*x2640*x2642))+(((-1.0)*x2643*x2644))+x2646+(((-1.0)*sj1*x2634))+x2647);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+((r21*x2648))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((0.078)*x2636))+(((-1.0)*(0.00025)*sj1))+(((-0.00025)*x2631))+(((0.00025)*x2632)));
evalcond[5]=(((sj0*x2655))+(((-1.0)*x2634))+((sj0*x2650))+((x2651*x2652))+((r11*x2654))+((cj0*x2653))+((cj0*x2649)));
evalcond[6]=(((sj0*x2653))+(((-1.0)*cj0*r11*x2652))+((r01*x2654))+(((-1.0)*x2642*x2650))+((sj0*x2649))+(((-1.0)*x2642*x2655))+x2656);
evalcond[7]=((0.00945)+((cj0*px))+((py*sj0))+(((-0.00025)*x2641))+(((-0.00025)*x2639))+(((-1.0)*r10*x2659))+(((-0.078)*x2633))+(((0.00025)*sj5*x2651))+(((-1.0)*r11*x2658))+(((-1.0)*r00*x2657))+(((-1.0)*x2648*x2651))+((r11*x2660)));
evalcond[8]=((((0.078)*x2656))+((px*sj0))+(((0.00025)*cj1))+(((-1.0)*py*x2642))+((x2645*x2648))+(((-1.0)*r00*x2659))+(((-0.00025)*x2646))+((r01*x2660))+(((0.1515)*sj1))+(((0.00025)*cj0*x2640))+(((-1.0)*r01*x2658))+((r10*x2657))+(((-0.00025)*x2647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2661=((1.0)*sj5);
CheckValue<IkReal> x2662=IKPowWithIntegerCheck(cj1,-1);
if(!x2662.valid){
continue;
}
if( IKabs(((x2662.value)*(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2661))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x2661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2662.value)*(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))))))+IKsqr((((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2661))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x2661))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x2662.value)*(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))))), (((cj5*r10*sj0))+(((-1.0)*cj0*r01*x2661))+((cj0*cj5*r00))+(((-1.0)*r11*sj0*x2661))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2663=(r21*sj5);
IkReal x2664=(cj5*r20);
IkReal x2665=IKsin(j3);
IkReal x2666=((1.0)*x2665);
IkReal x2667=IKcos(j3);
IkReal x2668=(cj1*x2667);
IkReal x2669=((1.0)*sj4);
IkReal x2670=(cj5*r00);
IkReal x2671=(cj0*x2670);
IkReal x2672=(cj5*r10);
IkReal x2673=(sj0*x2672);
IkReal x2674=((1.0)*cj0);
IkReal x2675=(r01*sj5);
IkReal x2676=((1.0)*sj0);
IkReal x2677=(cj0*r11);
IkReal x2678=(sj5*x2677);
IkReal x2679=(sj0*x2670);
IkReal x2680=((1.1e-7)*cj5);
IkReal x2681=(cj4*r02);
IkReal x2682=(cj4*r12);
IkReal x2683=(cj0*r01);
IkReal x2684=(cj5*sj4);
IkReal x2685=(r00*sj4*sj5);
IkReal x2686=(cj5*sj0*sj4);
IkReal x2687=(r10*sj4*sj5);
IkReal x2688=(sj1*x2667);
IkReal x2689=((1.1e-7)*cj0*sj5);
IkReal x2690=((1.1e-7)*cj5*sj0);
IkReal x2691=((1.1e-7)*sj0*sj5);
IkReal x2692=((0.00025)*sj0*sj5);
evalcond[0]=(x2663+(((-1.0)*x2664))+(((-1.0)*cj1*x2666)));
evalcond[1]=((((-1.0)*cj5*r21*x2669))+(((-1.0)*r20*sj5*x2669))+(((-1.0)*(1.0)*cj4*r22))+x2668);
evalcond[2]=((((-1.0)*x2667))+(((-1.0)*x2674*x2675))+(((-1.0)*r11*sj5*x2676))+x2673+x2671);
evalcond[3]=((((-1.0)*sj1*x2666))+x2679+(((-1.0)*x2675*x2676))+(((-1.0)*x2672*x2674))+x2678);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((-0.00025)*x2663))+(((0.00025)*x2664))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.00025)*sj1))+(((0.078)*x2668))+((r21*x2680)));
evalcond[5]=(((sj0*x2682))+((sj0*x2687))+((x2683*x2684))+((cj0*x2681))+((r11*x2686))+((cj0*x2685))+(((-1.0)*x2666)));
evalcond[6]=((((-1.0)*cj0*r11*x2684))+(((-1.0)*x2674*x2687))+((sj0*x2685))+(((-1.0)*x2674*x2682))+((r01*x2686))+((sj0*x2681))+x2688);
evalcond[7]=((0.00945)+((r11*x2692))+(((-1.0)*r11*x2690))+(((-1.0)*r10*x2691))+(((-0.00025)*x2671))+((cj0*px))+((py*sj0))+(((-0.078)*x2665))+(((-0.00025)*x2673))+(((0.00025)*sj5*x2683))+(((-1.0)*r00*x2689))+(((-1.0)*x2680*x2683)));
evalcond[8]=((((0.078)*x2688))+(((-0.00025)*x2679))+((r10*x2689))+((px*sj0))+((r01*x2692))+((x2677*x2680))+(((0.00025)*cj1))+(((-1.0)*r00*x2691))+(((-1.0)*r01*x2690))+(((0.1515)*sj1))+(((0.00025)*cj0*x2672))+(((-1.0)*py*x2674))+(((-0.00025)*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2693 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))),IkReal((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2693.valid){
continue;
}
CheckValue<IkReal> x2694=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x2694.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2693.value)+(((1.5707963267949)*(x2694.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2695=(r21*sj5);
IkReal x2696=(cj5*r20);
IkReal x2697=IKsin(j3);
IkReal x2698=((1.0)*x2697);
IkReal x2699=IKcos(j3);
IkReal x2700=(cj1*x2699);
IkReal x2701=((1.0)*sj4);
IkReal x2702=(cj5*r00);
IkReal x2703=(cj0*x2702);
IkReal x2704=(cj5*r10);
IkReal x2705=(sj0*x2704);
IkReal x2706=((1.0)*cj0);
IkReal x2707=(r01*sj5);
IkReal x2708=((1.0)*sj0);
IkReal x2709=(cj0*r11);
IkReal x2710=(sj5*x2709);
IkReal x2711=(sj0*x2702);
IkReal x2712=((1.1e-7)*cj5);
IkReal x2713=(cj4*r02);
IkReal x2714=(cj4*r12);
IkReal x2715=(cj0*r01);
IkReal x2716=(cj5*sj4);
IkReal x2717=(r00*sj4*sj5);
IkReal x2718=(cj5*sj0*sj4);
IkReal x2719=(r10*sj4*sj5);
IkReal x2720=(sj1*x2699);
IkReal x2721=((1.1e-7)*cj0*sj5);
IkReal x2722=((1.1e-7)*cj5*sj0);
IkReal x2723=((1.1e-7)*sj0*sj5);
IkReal x2724=((0.00025)*sj0*sj5);
evalcond[0]=(x2695+(((-1.0)*x2696))+(((-1.0)*cj1*x2698)));
evalcond[1]=((((-1.0)*cj5*r21*x2701))+(((-1.0)*r20*sj5*x2701))+x2700+(((-1.0)*(1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*x2706*x2707))+(((-1.0)*r11*sj5*x2708))+(((-1.0)*x2699))+x2705+x2703);
evalcond[3]=((((-1.0)*x2704*x2706))+x2711+(((-1.0)*sj1*x2698))+(((-1.0)*x2707*x2708))+x2710);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((0.078)*x2700))+((r21*x2712))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.00025)*sj1))+(((-0.00025)*x2695))+(((0.00025)*x2696)));
evalcond[5]=(((sj0*x2719))+(((-1.0)*x2698))+((cj0*x2717))+((cj0*x2713))+((x2715*x2716))+((r11*x2718))+((sj0*x2714)));
evalcond[6]=(((sj0*x2713))+((sj0*x2717))+(((-1.0)*x2706*x2714))+x2720+(((-1.0)*cj0*r11*x2716))+((r01*x2718))+(((-1.0)*x2706*x2719)));
evalcond[7]=((0.00945)+(((-1.0)*r11*x2722))+(((-0.00025)*x2703))+(((0.00025)*sj5*x2715))+((cj0*px))+(((-0.00025)*x2705))+((py*sj0))+(((-1.0)*x2712*x2715))+(((-1.0)*r00*x2721))+(((-0.078)*x2697))+((r11*x2724))+(((-1.0)*r10*x2723)));
evalcond[8]=((((-1.0)*py*x2706))+(((-1.0)*r00*x2723))+((px*sj0))+(((0.00025)*cj1))+(((-0.00025)*x2711))+(((0.00025)*cj0*x2704))+((r10*x2721))+(((0.1515)*sj1))+(((-0.00025)*x2710))+(((-1.0)*r01*x2722))+((x2709*x2712))+((r01*x2724))+(((0.078)*x2720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=cj1;
j3eval[1]=IKsign(cj1);
j3eval[2]=((IKabs(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))))+(IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj1;
j3eval[1]=cj1;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))))+IKsqr((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5))), (((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2725=(r21*sj5);
IkReal x2726=(cj5*r20);
IkReal x2727=IKsin(j3);
IkReal x2728=IKcos(j3);
IkReal x2729=((1.0)*sj4);
IkReal x2730=(cj0*cj5*r00);
IkReal x2731=(cj5*r10*sj0);
IkReal x2732=(cj0*r01*sj5);
IkReal x2733=(r11*sj0*sj5);
IkReal x2734=((1.1e-7)*cj5);
IkReal x2735=((1.1e-7)*sj5);
IkReal x2736=(cj0*r01);
IkReal x2737=(cj5*sj4);
IkReal x2738=(cj0*r00);
IkReal x2739=(sj4*sj5);
IkReal x2740=(r11*sj0);
IkReal x2741=(r10*sj0);
evalcond[0]=((((-1.0)*x2726))+x2725+(((-1.0)*x2727)));
evalcond[1]=(x2728+(((-1.0)*cj5*r21*x2729))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x2729)));
evalcond[2]=(x2728+(((-1.0)*x2732))+(((-1.0)*x2733))+x2730+x2731);
evalcond[3]=((0.1515)+(((0.00025)*x2726))+((r21*x2734))+(((-0.00025)*x2725))+(((-1.0)*(1.0)*pz))+(((0.078)*x2728))+((r20*x2735)));
evalcond[4]=(x2727+((x2737*x2740))+((x2736*x2737))+((x2738*x2739))+((cj4*r12*sj0))+((x2739*x2741))+((cj0*cj4*r02)));
evalcond[5]=((0.00945)+(((0.078)*x2727))+(((-1.0)*x2735*x2741))+((cj0*px))+((py*sj0))+(((0.00025)*x2732))+(((0.00025)*x2733))+(((-1.0)*x2735*x2738))+(((-1.0)*x2734*x2740))+(((-0.00025)*x2731))+(((-0.00025)*x2730))+(((-1.0)*x2734*x2736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2742=((1.0)*r21);
if( IKabs((((cj5*r20))+(((-1.0)*sj5*x2742)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*sj4*x2742))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20))+(((-1.0)*sj5*x2742))))+IKsqr(((((-1.0)*cj5*sj4*x2742))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20))+(((-1.0)*sj5*x2742))), ((((-1.0)*cj5*sj4*x2742))+(((-1.0)*(1.0)*r20*sj4*sj5))+(((-1.0)*(1.0)*cj4*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x2743=IKsin(j3);
IkReal x2744=(r21*sj5);
IkReal x2745=(cj5*r20);
IkReal x2746=IKcos(j3);
IkReal x2747=((1.0)*sj4);
IkReal x2748=(cj0*cj5*r00);
IkReal x2749=(cj5*r10*sj0);
IkReal x2750=(cj0*r01*sj5);
IkReal x2751=(r11*sj0*sj5);
IkReal x2752=((1.1e-7)*cj5);
IkReal x2753=((1.1e-7)*sj5);
IkReal x2754=(cj0*r01);
IkReal x2755=(cj5*sj4);
IkReal x2756=(cj0*r00);
IkReal x2757=(sj4*sj5);
IkReal x2758=(r11*sj0);
IkReal x2759=(r10*sj0);
evalcond[0]=((((-1.0)*x2745))+x2743+x2744);
evalcond[1]=((((-1.0)*x2746))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x2747))+(((-1.0)*r20*sj5*x2747)));
evalcond[2]=(x2746+(((-1.0)*x2750))+x2748+(((-1.0)*x2751))+x2749);
evalcond[3]=((-0.1515)+(((-0.078)*x2746))+((r21*x2752))+(((-1.0)*(1.0)*pz))+(((0.00025)*x2745))+(((-0.00025)*x2744))+((r20*x2753)));
evalcond[4]=(((x2756*x2757))+((x2754*x2755))+x2743+((cj4*r12*sj0))+((x2755*x2758))+((x2757*x2759))+((cj0*cj4*r02)));
evalcond[5]=((0.00945)+(((-1.0)*x2753*x2756))+(((-1.0)*x2753*x2759))+(((-0.00025)*x2748))+(((-0.00025)*x2749))+((cj0*px))+((py*sj0))+(((0.00025)*x2750))+(((0.078)*x2743))+(((0.00025)*x2751))+(((-1.0)*x2752*x2758))+(((-1.0)*x2752*x2754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2760=IKPowWithIntegerCheck(sj1,-1);
if(!x2760.valid){
continue;
}
CheckValue<IkReal> x2761=IKPowWithIntegerCheck(cj1,-1);
if(!x2761.valid){
continue;
}
if( IKabs(((x2760.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2761.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2760.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))))))+IKsqr(((x2761.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x2760.value)*(((((-1.0)*(1.0)*r01*sj0*sj5))+((cj5*r00*sj0))+(((-1.0)*(1.0)*cj0*cj5*r10))+((cj0*r11*sj5))))), ((x2761.value)*((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2762=(r21*sj5);
IkReal x2763=(cj5*r20);
IkReal x2764=IKsin(j3);
IkReal x2765=((1.0)*x2764);
IkReal x2766=IKcos(j3);
IkReal x2767=(cj1*x2766);
IkReal x2768=((1.0)*sj4);
IkReal x2769=(cj5*r00);
IkReal x2770=(cj0*x2769);
IkReal x2771=(cj5*r10);
IkReal x2772=(sj0*x2771);
IkReal x2773=((1.0)*cj0);
IkReal x2774=(r01*sj5);
IkReal x2775=((1.0)*sj0);
IkReal x2776=(cj0*r11);
IkReal x2777=(sj5*x2776);
IkReal x2778=(sj0*x2769);
IkReal x2779=((1.1e-7)*cj5);
IkReal x2780=(cj4*r02);
IkReal x2781=(cj4*r12);
IkReal x2782=(cj0*r01);
IkReal x2783=(cj5*sj4);
IkReal x2784=(r00*sj4*sj5);
IkReal x2785=(cj5*sj0*sj4);
IkReal x2786=(r10*sj4*sj5);
IkReal x2787=(sj1*x2766);
IkReal x2788=((1.1e-7)*cj0*sj5);
IkReal x2789=((1.1e-7)*cj5*sj0);
IkReal x2790=((1.1e-7)*sj0*sj5);
IkReal x2791=((0.00025)*sj0*sj5);
evalcond[0]=(x2762+(((-1.0)*cj1*x2765))+(((-1.0)*x2763)));
evalcond[1]=(x2767+(((-1.0)*r20*sj5*x2768))+(((-1.0)*(1.0)*cj4*r22))+(((-1.0)*cj5*r21*x2768)));
evalcond[2]=(x2770+(((-1.0)*r11*sj5*x2775))+x2772+(((-1.0)*x2773*x2774))+x2766);
evalcond[3]=((((-1.0)*x2774*x2775))+(((-1.0)*sj1*x2765))+x2778+x2777+(((-1.0)*x2771*x2773)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((0.078)*x2767))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+((r21*x2779))+(((0.00025)*x2763))+(((0.00025)*sj1))+(((-0.00025)*x2762)));
evalcond[5]=(((sj0*x2786))+((cj0*x2784))+((r11*x2785))+((cj0*x2780))+((x2782*x2783))+x2764+((sj0*x2781)));
evalcond[6]=(((sj0*x2780))+(((-1.0)*x2773*x2786))+((sj0*x2784))+((r01*x2785))+(((-1.0)*cj0*r11*x2783))+x2787+(((-1.0)*x2773*x2781)));
evalcond[7]=((0.00945)+(((-1.0)*x2779*x2782))+(((-0.00025)*x2770))+(((-1.0)*r00*x2788))+((cj0*px))+((py*sj0))+(((-1.0)*r10*x2790))+(((-0.00025)*x2772))+(((-1.0)*r11*x2789))+((r11*x2791))+(((0.00025)*sj5*x2782))+(((0.078)*x2764)));
evalcond[8]=(((x2776*x2779))+(((0.078)*x2787))+((r01*x2791))+((px*sj0))+(((-1.0)*r01*x2789))+(((0.00025)*cj0*x2771))+(((-0.00025)*x2778))+(((-0.00025)*x2777))+(((0.1515)*sj1))+(((-1.0)*(0.00025)*cj1))+(((-1.0)*r00*x2790))+((r10*x2788))+(((-1.0)*py*x2773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2792=((1.0)*cj5);
CheckValue<IkReal> x2793=IKPowWithIntegerCheck(cj1,-1);
if(!x2793.valid){
continue;
}
if( IKabs(((x2793.value)*(((((-1.0)*r20*x2792))+((r21*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2792))+(((-1.0)*cj0*r00*x2792))+((cj0*r01*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2793.value)*(((((-1.0)*r20*x2792))+((r21*sj5))))))+IKsqr((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2792))+(((-1.0)*cj0*r00*x2792))+((cj0*r01*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x2793.value)*(((((-1.0)*r20*x2792))+((r21*sj5))))), (((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2792))+(((-1.0)*cj0*r00*x2792))+((cj0*r01*sj5))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2794=(r21*sj5);
IkReal x2795=(cj5*r20);
IkReal x2796=IKsin(j3);
IkReal x2797=((1.0)*x2796);
IkReal x2798=IKcos(j3);
IkReal x2799=(cj1*x2798);
IkReal x2800=((1.0)*sj4);
IkReal x2801=(cj5*r00);
IkReal x2802=(cj0*x2801);
IkReal x2803=(cj5*r10);
IkReal x2804=(sj0*x2803);
IkReal x2805=((1.0)*cj0);
IkReal x2806=(r01*sj5);
IkReal x2807=((1.0)*sj0);
IkReal x2808=(cj0*r11);
IkReal x2809=(sj5*x2808);
IkReal x2810=(sj0*x2801);
IkReal x2811=((1.1e-7)*cj5);
IkReal x2812=(cj4*r02);
IkReal x2813=(cj4*r12);
IkReal x2814=(cj0*r01);
IkReal x2815=(cj5*sj4);
IkReal x2816=(r00*sj4*sj5);
IkReal x2817=(cj5*sj0*sj4);
IkReal x2818=(r10*sj4*sj5);
IkReal x2819=(sj1*x2798);
IkReal x2820=((1.1e-7)*cj0*sj5);
IkReal x2821=((1.1e-7)*cj5*sj0);
IkReal x2822=((1.1e-7)*sj0*sj5);
IkReal x2823=((0.00025)*sj0*sj5);
evalcond[0]=(x2794+(((-1.0)*cj1*x2797))+(((-1.0)*x2795)));
evalcond[1]=((((-1.0)*cj5*r21*x2800))+(((-1.0)*r20*sj5*x2800))+x2799+(((-1.0)*(1.0)*cj4*r22)));
evalcond[2]=(x2804+x2798+x2802+(((-1.0)*r11*sj5*x2807))+(((-1.0)*x2805*x2806)));
evalcond[3]=(x2809+(((-1.0)*x2806*x2807))+x2810+(((-1.0)*x2803*x2805))+(((-1.0)*sj1*x2797)));
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+(((0.078)*x2799))+(((0.00025)*x2795))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+(((-0.00025)*x2794))+((r21*x2811))+(((0.00025)*sj1)));
evalcond[5]=(((cj0*x2812))+((r11*x2817))+((x2814*x2815))+((sj0*x2813))+((sj0*x2818))+x2796+((cj0*x2816)));
evalcond[6]=(((sj0*x2816))+x2819+((r01*x2817))+(((-1.0)*x2805*x2813))+(((-1.0)*cj0*r11*x2815))+(((-1.0)*x2805*x2818))+((sj0*x2812)));
evalcond[7]=((0.00945)+((r11*x2823))+(((-0.00025)*x2804))+(((-1.0)*r00*x2820))+((cj0*px))+((py*sj0))+(((-0.00025)*x2802))+(((-1.0)*r11*x2821))+(((0.078)*x2796))+(((-1.0)*x2811*x2814))+(((-1.0)*r10*x2822))+(((0.00025)*sj5*x2814)));
evalcond[8]=((((-0.00025)*x2810))+(((-1.0)*py*x2805))+(((-0.00025)*x2809))+((x2808*x2811))+(((-1.0)*r01*x2821))+((px*sj0))+(((-1.0)*r00*x2822))+((r10*x2820))+(((0.1515)*sj1))+((r01*x2823))+(((0.00025)*cj0*x2803))+(((0.078)*x2819))+(((-1.0)*(0.00025)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2824 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj5*r20))+((r21*sj5)))),IkReal((((cj5*r21*sj4))+((r20*sj4*sj5))+((cj4*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2824.valid){
continue;
}
CheckValue<IkReal> x2825=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x2825.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2824.value)+(((1.5707963267949)*(x2825.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2826=(r21*sj5);
IkReal x2827=(cj5*r20);
IkReal x2828=IKsin(j3);
IkReal x2829=((1.0)*x2828);
IkReal x2830=IKcos(j3);
IkReal x2831=(cj1*x2830);
IkReal x2832=((1.0)*sj4);
IkReal x2833=(cj5*r00);
IkReal x2834=(cj0*x2833);
IkReal x2835=(cj5*r10);
IkReal x2836=(sj0*x2835);
IkReal x2837=((1.0)*cj0);
IkReal x2838=(r01*sj5);
IkReal x2839=((1.0)*sj0);
IkReal x2840=(cj0*r11);
IkReal x2841=(sj5*x2840);
IkReal x2842=(sj0*x2833);
IkReal x2843=((1.1e-7)*cj5);
IkReal x2844=(cj4*r02);
IkReal x2845=(cj4*r12);
IkReal x2846=(cj0*r01);
IkReal x2847=(cj5*sj4);
IkReal x2848=(r00*sj4*sj5);
IkReal x2849=(cj5*sj0*sj4);
IkReal x2850=(r10*sj4*sj5);
IkReal x2851=(sj1*x2830);
IkReal x2852=((1.1e-7)*cj0*sj5);
IkReal x2853=((1.1e-7)*cj5*sj0);
IkReal x2854=((1.1e-7)*sj0*sj5);
IkReal x2855=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x2827))+(((-1.0)*cj1*x2829))+x2826);
evalcond[1]=((((-1.0)*cj5*r21*x2832))+(((-1.0)*(1.0)*cj4*r22))+x2831+(((-1.0)*r20*sj5*x2832)));
evalcond[2]=((((-1.0)*r11*sj5*x2839))+x2834+x2836+x2830+(((-1.0)*x2837*x2838)));
evalcond[3]=((((-1.0)*x2835*x2837))+(((-1.0)*x2838*x2839))+(((-1.0)*sj1*x2829))+x2841+x2842);
evalcond[4]=(((r20*(((1.1e-7)*sj5))))+((r21*x2843))+(((0.1515)*cj1))+(((0.00025)*x2827))+(((-1.0)*(1.0)*pz))+(((0.078)*x2831))+(((0.00025)*sj1))+(((-0.00025)*x2826)));
evalcond[5]=(((r11*x2849))+((sj0*x2845))+((x2846*x2847))+((cj0*x2844))+x2828+((sj0*x2850))+((cj0*x2848)));
evalcond[6]=((((-1.0)*x2837*x2850))+((sj0*x2844))+((r01*x2849))+x2851+(((-1.0)*x2837*x2845))+((sj0*x2848))+(((-1.0)*cj0*r11*x2847)));
evalcond[7]=((0.00945)+((r11*x2855))+((cj0*px))+((py*sj0))+(((0.078)*x2828))+(((-0.00025)*x2836))+(((0.00025)*sj5*x2846))+(((-1.0)*r00*x2852))+(((-1.0)*r10*x2854))+(((-1.0)*x2843*x2846))+(((-1.0)*r11*x2853))+(((-0.00025)*x2834)));
evalcond[8]=((((-1.0)*r00*x2854))+(((-0.00025)*x2841))+((r10*x2852))+((px*sj0))+(((-1.0)*r01*x2853))+((x2840*x2843))+(((0.1515)*sj1))+(((-1.0)*py*x2837))+(((0.078)*x2851))+(((0.00025)*cj0*x2835))+((r01*x2855))+(((-1.0)*(0.00025)*cj1))+(((-0.00025)*x2842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(sj2,-1);
if(!x2863.valid){
continue;
}
IkReal x2856=x2863.value;
IkReal x2857=(cj2*sj1);
IkReal x2858=(cj0*cj5*r00);
IkReal x2859=(cj5*r10*sj0);
IkReal x2860=((1.0)*sj5);
IkReal x2861=(cj0*r01*x2860);
IkReal x2862=(r11*sj0*x2860);
CheckValue<IkReal> x2864=IKPowWithIntegerCheck(cj1,-1);
if(!x2864.valid){
continue;
}
if( IKabs((x2856*(x2864.value)*((((x2857*x2858))+(((-1.0)*x2857*x2861))+(((-1.0)*(1.0)*cj5*r20*sj2))+((r21*sj2*sj5))+(((-1.0)*x2857*x2862))+((x2857*x2859)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2856*(((((-1.0)*x2861))+(((-1.0)*x2862))+x2859+x2858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2856*(x2864.value)*((((x2857*x2858))+(((-1.0)*x2857*x2861))+(((-1.0)*(1.0)*cj5*r20*sj2))+((r21*sj2*sj5))+(((-1.0)*x2857*x2862))+((x2857*x2859))))))+IKsqr((x2856*(((((-1.0)*x2861))+(((-1.0)*x2862))+x2859+x2858))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x2856*(x2864.value)*((((x2857*x2858))+(((-1.0)*x2857*x2861))+(((-1.0)*(1.0)*cj5*r20*sj2))+((r21*sj2*sj5))+(((-1.0)*x2857*x2862))+((x2857*x2859))))), (x2856*(((((-1.0)*x2861))+(((-1.0)*x2862))+x2859+x2858))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2865=(r21*sj5);
IkReal x2866=(cj5*r20);
IkReal x2867=IKsin(j3);
IkReal x2868=((1.0)*x2867);
IkReal x2869=(cj1*x2868);
IkReal x2870=IKcos(j3);
IkReal x2871=(sj1*x2870);
IkReal x2872=(cj5*r00);
IkReal x2873=(cj0*x2872);
IkReal x2874=(cj5*r10);
IkReal x2875=(sj0*x2874);
IkReal x2876=((1.0)*cj0);
IkReal x2877=(r01*sj5);
IkReal x2878=((1.0)*sj0);
IkReal x2879=(cj1*x2870);
IkReal x2880=(cj2*sj1);
IkReal x2881=((1.0)*sj4);
IkReal x2882=(cj0*r11);
IkReal x2883=(sj5*x2882);
IkReal x2884=(sj0*x2872);
IkReal x2885=(cj4*r02);
IkReal x2886=(cj4*r12);
IkReal x2887=(cj0*r01);
IkReal x2888=(cj5*sj4);
IkReal x2889=(r00*sj4*sj5);
IkReal x2890=(cj5*sj0*sj4);
IkReal x2891=(r10*sj4*sj5);
IkReal x2892=((1.1e-7)*cj5);
IkReal x2893=((0.00025)*sj2);
IkReal x2894=((0.078)*x2867);
IkReal x2895=((1.1e-7)*cj0*sj5);
IkReal x2896=((1.1e-7)*cj5*sj0);
IkReal x2897=((1.1e-7)*sj0*sj5);
IkReal x2898=((0.00025)*sj0*sj5);
evalcond[0]=((((-1.0)*x2869))+((cj2*x2871))+(((-1.0)*x2866))+x2865);
evalcond[1]=((((-1.0)*sj2*x2870))+(((-1.0)*r11*sj5*x2878))+(((-1.0)*x2876*x2877))+x2873+x2875);
evalcond[2]=((((-1.0)*r20*sj5*x2881))+((x2867*x2880))+(((-1.0)*(1.0)*cj4*r22))+x2879+(((-1.0)*cj5*r21*x2881)));
evalcond[3]=(x2883+(((-1.0)*x2874*x2876))+(((-1.0)*cj2*x2879))+(((-1.0)*sj1*x2868))+x2884+(((-1.0)*x2877*x2878)));
evalcond[4]=(((x2887*x2888))+((sj0*x2886))+((cj0*x2885))+((cj0*x2889))+(((-1.0)*sj2*x2868))+((sj0*x2891))+((r11*x2890)));
evalcond[5]=(((r20*(((1.1e-7)*sj5))))+(((0.00025)*x2866))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+((r21*x2892))+(((-1.0)*sj1*x2893))+(((0.078)*x2879))+(((-0.00025)*x2865))+((x2880*x2894)));
evalcond[6]=((((-1.0)*cj0*r11*x2888))+x2871+((sj0*x2889))+(((-1.0)*cj2*x2869))+((sj0*x2885))+((r01*x2890))+(((-1.0)*x2876*x2891))+(((-1.0)*x2876*x2886)));
evalcond[7]=((0.00945)+((r11*x2898))+(((-1.0)*sj2*x2894))+(((0.00025)*sj5*x2887))+((cj0*px))+((py*sj0))+(((-0.00025)*x2875))+(((-1.0)*r11*x2896))+(((-1.0)*r10*x2897))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*r00*x2895))+(((-1.0)*x2887*x2892))+(((-0.00025)*x2873)));
evalcond[8]=((((-1.0)*cj1*cj2*x2894))+(((0.078)*x2871))+(((-1.0)*r01*x2896))+(((-0.00025)*x2884))+((px*sj0))+(((-1.0)*r00*x2897))+((r10*x2895))+(((-0.00025)*x2883))+((r01*x2898))+((cj1*x2893))+(((0.1515)*sj1))+(((-1.0)*py*x2876))+((x2882*x2892))+(((0.00025)*cj0*x2874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2899=(r21*sj5);
IkReal x2900=((1.0)*cj1);
IkReal x2901=(cj5*r20);
IkReal x2902=(cj0*r11*sj5);
IkReal x2903=(cj5*r00*sj0);
IkReal x2904=((1.0)*sj1);
IkReal x2905=(cj0*cj5*r10);
IkReal x2906=(r01*sj0*sj5);
CheckValue<IkReal> x2907=IKPowWithIntegerCheck(cj2,-1);
if(!x2907.valid){
continue;
}
if( IKabs(((((-1.0)*x2904*x2905))+((sj1*x2903))+(((-1.0)*x2900*x2901))+((cj1*x2899))+(((-1.0)*x2904*x2906))+((sj1*x2902)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2907.value)*(((((-1.0)*x2899*x2904))+(((-1.0)*x2900*x2905))+((sj1*x2901))+((cj1*x2902))+(((-1.0)*x2900*x2906))+((cj1*x2903)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2904*x2905))+((sj1*x2903))+(((-1.0)*x2900*x2901))+((cj1*x2899))+(((-1.0)*x2904*x2906))+((sj1*x2902))))+IKsqr(((x2907.value)*(((((-1.0)*x2899*x2904))+(((-1.0)*x2900*x2905))+((sj1*x2901))+((cj1*x2902))+(((-1.0)*x2900*x2906))+((cj1*x2903))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x2904*x2905))+((sj1*x2903))+(((-1.0)*x2900*x2901))+((cj1*x2899))+(((-1.0)*x2904*x2906))+((sj1*x2902))), ((x2907.value)*(((((-1.0)*x2899*x2904))+(((-1.0)*x2900*x2905))+((sj1*x2901))+((cj1*x2902))+(((-1.0)*x2900*x2906))+((cj1*x2903))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2908=(r21*sj5);
IkReal x2909=(cj5*r20);
IkReal x2910=IKsin(j3);
IkReal x2911=((1.0)*x2910);
IkReal x2912=(cj1*x2911);
IkReal x2913=IKcos(j3);
IkReal x2914=(sj1*x2913);
IkReal x2915=(cj5*r00);
IkReal x2916=(cj0*x2915);
IkReal x2917=(cj5*r10);
IkReal x2918=(sj0*x2917);
IkReal x2919=((1.0)*cj0);
IkReal x2920=(r01*sj5);
IkReal x2921=((1.0)*sj0);
IkReal x2922=(cj1*x2913);
IkReal x2923=(cj2*sj1);
IkReal x2924=((1.0)*sj4);
IkReal x2925=(cj0*r11);
IkReal x2926=(sj5*x2925);
IkReal x2927=(sj0*x2915);
IkReal x2928=(cj4*r02);
IkReal x2929=(cj4*r12);
IkReal x2930=(cj0*r01);
IkReal x2931=(cj5*sj4);
IkReal x2932=(r00*sj4*sj5);
IkReal x2933=(cj5*sj0*sj4);
IkReal x2934=(r10*sj4*sj5);
IkReal x2935=((1.1e-7)*cj5);
IkReal x2936=((0.00025)*sj2);
IkReal x2937=((0.078)*x2910);
IkReal x2938=((1.1e-7)*cj0*sj5);
IkReal x2939=((1.1e-7)*cj5*sj0);
IkReal x2940=((1.1e-7)*sj0*sj5);
IkReal x2941=((0.00025)*sj0*sj5);
evalcond[0]=(x2908+((cj2*x2914))+(((-1.0)*x2912))+(((-1.0)*x2909)));
evalcond[1]=((((-1.0)*r11*sj5*x2921))+(((-1.0)*sj2*x2913))+x2916+x2918+(((-1.0)*x2919*x2920)));
evalcond[2]=(x2922+(((-1.0)*r20*sj5*x2924))+(((-1.0)*cj5*r21*x2924))+(((-1.0)*(1.0)*cj4*r22))+((x2910*x2923)));
evalcond[3]=(x2927+(((-1.0)*x2920*x2921))+(((-1.0)*sj1*x2911))+(((-1.0)*cj2*x2922))+x2926+(((-1.0)*x2917*x2919)));
evalcond[4]=((((-1.0)*sj2*x2911))+((cj0*x2932))+((r11*x2933))+((x2930*x2931))+((sj0*x2934))+((cj0*x2928))+((sj0*x2929)));
evalcond[5]=(((r20*(((1.1e-7)*sj5))))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+((x2923*x2937))+(((-1.0)*sj1*x2936))+(((0.00025)*x2909))+((r21*x2935))+(((0.078)*x2922))+(((-0.00025)*x2908)));
evalcond[6]=((((-1.0)*cj0*r11*x2931))+x2914+((r01*x2933))+((sj0*x2932))+(((-1.0)*x2919*x2934))+(((-1.0)*cj2*x2912))+((sj0*x2928))+(((-1.0)*x2919*x2929)));
evalcond[7]=((0.00945)+(((-1.0)*x2930*x2935))+(((-1.0)*sj2*x2937))+(((-0.00025)*x2916))+((cj0*px))+((py*sj0))+(((-1.0)*r00*x2938))+(((-0.00025)*x2918))+(((-1.0)*r11*x2939))+((r11*x2941))+(((0.00025)*sj5*x2930))+(((-1.0)*(0.00025)*cj2))+(((-1.0)*r10*x2940)));
evalcond[8]=(((r01*x2941))+(((-0.00025)*x2927))+((cj1*x2936))+(((-1.0)*cj1*cj2*x2937))+(((0.00025)*cj0*x2917))+((px*sj0))+(((-1.0)*r00*x2940))+(((-0.00025)*x2926))+((r10*x2938))+((x2925*x2935))+(((0.078)*x2914))+(((0.1515)*sj1))+(((-1.0)*py*x2919))+(((-1.0)*r01*x2939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2942=cj1*cj1;
IkReal x2943=cj2*cj2;
IkReal x2944=(cj1*r21);
IkReal x2945=(cj1*r20);
IkReal x2946=(cj4*r22);
IkReal x2947=(cj5*sj4);
IkReal x2948=(cj2*r21*sj1);
IkReal x2949=(sj4*sj5);
IkReal x2950=(cj2*r20*sj1);
CheckValue<IkReal> x2951=IKPowWithIntegerCheck(IKsign((x2943+x2942+(((-1.0)*x2942*x2943)))),-1);
if(!x2951.valid){
continue;
}
CheckValue<IkReal> x2952 = IKatan2WithCheck(IkReal((((x2947*x2948))+((cj2*sj1*x2946))+(((-1.0)*cj5*x2945))+((x2949*x2950))+((sj5*x2944)))),IkReal((((cj1*x2946))+(((-1.0)*sj5*x2948))+((x2945*x2949))+((cj5*x2950))+((x2944*x2947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2952.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2951.value)))+(x2952.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[9];
IkReal x2953=(r21*sj5);
IkReal x2954=(cj5*r20);
IkReal x2955=IKsin(j3);
IkReal x2956=((1.0)*x2955);
IkReal x2957=(cj1*x2956);
IkReal x2958=IKcos(j3);
IkReal x2959=(sj1*x2958);
IkReal x2960=(cj5*r00);
IkReal x2961=(cj0*x2960);
IkReal x2962=(cj5*r10);
IkReal x2963=(sj0*x2962);
IkReal x2964=((1.0)*cj0);
IkReal x2965=(r01*sj5);
IkReal x2966=((1.0)*sj0);
IkReal x2967=(cj1*x2958);
IkReal x2968=(cj2*sj1);
IkReal x2969=((1.0)*sj4);
IkReal x2970=(cj0*r11);
IkReal x2971=(sj5*x2970);
IkReal x2972=(sj0*x2960);
IkReal x2973=(cj4*r02);
IkReal x2974=(cj4*r12);
IkReal x2975=(cj0*r01);
IkReal x2976=(cj5*sj4);
IkReal x2977=(r00*sj4*sj5);
IkReal x2978=(cj5*sj0*sj4);
IkReal x2979=(r10*sj4*sj5);
IkReal x2980=((1.1e-7)*cj5);
IkReal x2981=((0.00025)*sj2);
IkReal x2982=((0.078)*x2955);
IkReal x2983=((1.1e-7)*cj0*sj5);
IkReal x2984=((1.1e-7)*cj5*sj0);
IkReal x2985=((1.1e-7)*sj0*sj5);
IkReal x2986=((0.00025)*sj0*sj5);
evalcond[0]=(x2953+((cj2*x2959))+(((-1.0)*x2957))+(((-1.0)*x2954)));
evalcond[1]=((((-1.0)*sj2*x2958))+(((-1.0)*r11*sj5*x2966))+x2963+x2961+(((-1.0)*x2964*x2965)));
evalcond[2]=((((-1.0)*(1.0)*cj4*r22))+(((-1.0)*r20*sj5*x2969))+((x2955*x2968))+x2967+(((-1.0)*cj5*r21*x2969)));
evalcond[3]=((((-1.0)*x2965*x2966))+(((-1.0)*x2962*x2964))+x2972+(((-1.0)*cj2*x2967))+(((-1.0)*sj1*x2956))+x2971);
evalcond[4]=(((sj0*x2979))+(((-1.0)*sj2*x2956))+((sj0*x2974))+((x2975*x2976))+((cj0*x2973))+((cj0*x2977))+((r11*x2978)));
evalcond[5]=(((r20*(((1.1e-7)*sj5))))+((x2968*x2982))+(((0.078)*x2967))+(((-1.0)*sj1*x2981))+(((-0.00025)*x2953))+(((0.1515)*cj1))+(((-1.0)*(1.0)*pz))+((r21*x2980))+(((0.00025)*x2954)));
evalcond[6]=((((-1.0)*cj0*r11*x2976))+((sj0*x2973))+(((-1.0)*x2964*x2974))+(((-1.0)*x2964*x2979))+x2959+((r01*x2978))+(((-1.0)*cj2*x2957))+((sj0*x2977)));
evalcond[7]=((0.00945)+((r11*x2986))+(((-1.0)*r10*x2985))+(((-1.0)*x2975*x2980))+(((-0.00025)*x2961))+(((-1.0)*r11*x2984))+((cj0*px))+((py*sj0))+(((0.00025)*sj5*x2975))+(((-1.0)*(0.00025)*cj2))+(((-0.00025)*x2963))+(((-1.0)*sj2*x2982))+(((-1.0)*r00*x2983)));
evalcond[8]=((((-1.0)*r01*x2984))+(((-0.00025)*x2972))+((r01*x2986))+(((0.078)*x2959))+((r10*x2983))+((cj1*x2981))+((px*sj0))+(((-1.0)*py*x2964))+(((0.1515)*sj1))+(((-1.0)*cj1*cj2*x2982))+(((-1.0)*r00*x2985))+(((0.00025)*cj0*x2962))+(((-0.00025)*x2971))+((x2970*x2980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - cool400_description (053104c6b7a265552caa4fcf59b9f903)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
